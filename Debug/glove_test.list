
glove_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08003f1c  08003f1c  00013f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080041a4  080041a4  000141a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000000  080041b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001b8  20000068  0800421c  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000220  0800421c  00020220  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013c13  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000295a  00000000  00000000  00033cab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000096c6  00000000  00000000  00036605  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c50  00000000  00000000  0003fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000010c0  00000000  00000000  00040920  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000715c  00000000  00000000  000419e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004cff  00000000  00000000  00048b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004d83b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002a04  00000000  00000000  0004d8b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f04 	.word	0x08003f04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003f04 	.word	0x08003f04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <HAL_InitTick+0x2c>)
{
 8000594:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000596:	6818      	ldr	r0, [r3, #0]
 8000598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059c:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a0:	f000 fc2a 	bl	8000df8 <HAL_SYSTICK_Config>
 80005a4:	4604      	mov	r4, r0
 80005a6:	b938      	cbnz	r0, 80005b8 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80005a8:	4602      	mov	r2, r0
 80005aa:	4629      	mov	r1, r5
 80005ac:	f04f 30ff 	mov.w	r0, #4294967295
 80005b0:	f000 fbe2 	bl	8000d78 <HAL_NVIC_SetPriority>
 80005b4:	4620      	mov	r0, r4
 80005b6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80005b8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80005ba:	bd38      	pop	{r3, r4, r5, pc}
 80005bc:	20000000 	.word	0x20000000

080005c0 <HAL_Init>:
{
 80005c0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c2:	2003      	movs	r0, #3
 80005c4:	f000 fbc6 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff ffe1 	bl	8000590 <HAL_InitTick>
 80005ce:	4604      	mov	r4, r0
 80005d0:	b918      	cbnz	r0, 80005da <HAL_Init+0x1a>
    HAL_MspInit();
 80005d2:	f002 fb9b 	bl	8002d0c <HAL_MspInit>
}
 80005d6:	4620      	mov	r0, r4
 80005d8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80005da:	2401      	movs	r4, #1
 80005dc:	e7fb      	b.n	80005d6 <HAL_Init+0x16>
	...

080005e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005e0:	4a02      	ldr	r2, [pc, #8]	; (80005ec <HAL_IncTick+0xc>)
 80005e2:	6813      	ldr	r3, [r2, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000090 	.word	0x20000090

080005f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005f0:	4b01      	ldr	r3, [pc, #4]	; (80005f8 <HAL_GetTick+0x8>)
 80005f2:	6818      	ldr	r0, [r3, #0]
}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000090 	.word	0x20000090

080005fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005fc:	b538      	push	{r3, r4, r5, lr}
 80005fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000600:	f7ff fff6 	bl	80005f0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000604:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000606:	4605      	mov	r5, r0
  {
    wait++;
 8000608:	bf18      	it	ne
 800060a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 800060c:	f7ff fff0 	bl	80005f0 <HAL_GetTick>
 8000610:	1b40      	subs	r0, r0, r5
 8000612:	4284      	cmp	r4, r0
 8000614:	d8fa      	bhi.n	800060c <HAL_Delay+0x10>
  {
  }
}
 8000616:	bd38      	pop	{r3, r4, r5, pc}

08000618 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000618:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800061a:	0dcc      	lsrs	r4, r1, #23
 800061c:	f004 0404 	and.w	r4, r4, #4
 8000620:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 8000622:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8000626:	2307      	movs	r3, #7
 8000628:	fa03 f501 	lsl.w	r5, r3, r1
 800062c:	5823      	ldr	r3, [r4, r0]
 800062e:	fa02 f101 	lsl.w	r1, r2, r1
 8000632:	ea23 0305 	bic.w	r3, r3, r5
 8000636:	4319      	orrs	r1, r3
 8000638:	5021      	str	r1, [r4, r0]
 800063a:	bd30      	pop	{r4, r5, pc}

0800063c <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800063c:	6880      	ldr	r0, [r0, #8]
}
 800063e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8000642:	4770      	bx	lr

08000644 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000644:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800064a:	4604      	mov	r4, r0
 800064c:	2800      	cmp	r0, #0
 800064e:	d06e      	beq.n	800072e <HAL_ADC_Init+0xea>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000650:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8000652:	b925      	cbnz	r5, 800065e <HAL_ADC_Init+0x1a>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000654:	f002 fb72 	bl	8002d3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000658:	65a5      	str	r5, [r4, #88]	; 0x58
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800065a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800065e:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000660:	6883      	ldr	r3, [r0, #8]
 8000662:	0099      	lsls	r1, r3, #2
 8000664:	d465      	bmi.n	8000732 <HAL_ADC_Init+0xee>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000666:	6883      	ldr	r3, [r0, #8]
 8000668:	00da      	lsls	r2, r3, #3
 800066a:	d569      	bpl.n	8000740 <HAL_ADC_Init+0xfc>
 800066c:	6883      	ldr	r3, [r0, #8]
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	d574      	bpl.n	800075c <HAL_ADC_Init+0x118>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000672:	2100      	movs	r1, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000674:	f7ff ffe2 	bl	800063c <LL_ADC_REG_IsConversionOngoing>
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000678:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800067a:	f013 0f10 	tst.w	r3, #16
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800067e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000680:	d152      	bne.n	8000728 <HAL_ADC_Init+0xe4>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000682:	2800      	cmp	r0, #0
 8000684:	d150      	bne.n	8000728 <HAL_ADC_Init+0xe4>
    ADC_STATE_CLR_SET(hadc->State,
 8000686:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800068a:	f043 0302 	orr.w	r3, r3, #2
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800068e:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8000690:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000692:	6883      	ldr	r3, [r0, #8]
 8000694:	07dd      	lsls	r5, r3, #31
 8000696:	d56b      	bpl.n	8000770 <HAL_ADC_Init+0x12c>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8000698:	68e5      	ldr	r5, [r4, #12]
 800069a:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode)  );
 800069c:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 80006a0:	432b      	orrs	r3, r5
 80006a2:	68a5      	ldr	r5, [r4, #8]
 80006a4:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80006a6:	7e65      	ldrb	r5, [r4, #25]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006a8:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 80006aa:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80006ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80006b2:	bf02      	ittt	eq
 80006b4:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 80006b6:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80006ba:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006c0:	b122      	cbz	r2, 80006cc <HAL_ADC_Init+0x88>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80006c2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80006c4:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80006c8:	432a      	orrs	r2, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80006ca:	4313      	orrs	r3, r2
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 80006cc:	68c5      	ldr	r5, [r0, #12]
 80006ce:	4a40      	ldr	r2, [pc, #256]	; (80007d0 <HAL_ADC_Init+0x18c>)
 80006d0:	402a      	ands	r2, r5
 80006d2:	4313      	orrs	r3, r2
 80006d4:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80006d6:	f7ff ffb1 	bl	800063c <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80006da:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80006dc:	689a      	ldr	r2, [r3, #8]
 80006de:	0712      	lsls	r2, r2, #28
 80006e0:	d552      	bpl.n	8000788 <HAL_ADC_Init+0x144>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80006e2:	6922      	ldr	r2, [r4, #16]
 80006e4:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80006e6:	bf05      	ittet	eq
 80006e8:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 80006ea:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80006ec:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80006ee:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80006f2:	bf06      	itte	eq
 80006f4:	f020 000f 	biceq.w	r0, r0, #15
 80006f8:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80006fa:	f022 020f 	bicne.w	r2, r2, #15
 80006fe:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000700:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000702:	f023 0303 	bic.w	r3, r3, #3
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 800070c:	4608      	mov	r0, r1
 800070e:	b003      	add	sp, #12
 8000710:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 8000712:	9b01      	ldr	r3, [sp, #4]
 8000714:	3b01      	subs	r3, #1
 8000716:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8000718:	9b01      	ldr	r3, [sp, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1f9      	bne.n	8000712 <HAL_ADC_Init+0xce>
 800071e:	e7a5      	b.n	800066c <HAL_ADC_Init+0x28>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000720:	691a      	ldr	r2, [r3, #16]
 8000722:	f022 0201 	bic.w	r2, r2, #1
 8000726:	e051      	b.n	80007cc <HAL_ADC_Init+0x188>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000728:	f043 0310 	orr.w	r3, r3, #16
 800072c:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 800072e:	2101      	movs	r1, #1
 8000730:	e7ec      	b.n	800070c <HAL_ADC_Init+0xc8>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000732:	6883      	ldr	r3, [r0, #8]
 8000734:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000738:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800073c:	6083      	str	r3, [r0, #8]
 800073e:	e792      	b.n	8000666 <HAL_ADC_Init+0x22>
  MODIFY_REG(ADCx->CR,
 8000740:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000742:	4a24      	ldr	r2, [pc, #144]	; (80007d4 <HAL_ADC_Init+0x190>)
 8000744:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000748:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	6083      	str	r3, [r0, #8]
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <HAL_ADC_Init+0x194>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	fbb3 f3f2 	udiv	r3, r3, r2
 800075a:	e7dc      	b.n	8000716 <HAL_ADC_Init+0xd2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800075c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800075e:	f043 0310 	orr.w	r3, r3, #16
 8000762:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000764:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 800076c:	2101      	movs	r1, #1
 800076e:	e781      	b.n	8000674 <HAL_ADC_Init+0x30>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000770:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <HAL_ADC_Init+0x198>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	07db      	lsls	r3, r3, #31
 8000776:	d48f      	bmi.n	8000698 <HAL_ADC_Init+0x54>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000778:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <HAL_ADC_Init+0x19c>)
 800077a:	6865      	ldr	r5, [r4, #4]
 800077c:	6893      	ldr	r3, [r2, #8]
 800077e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000782:	432b      	orrs	r3, r5
 8000784:	6093      	str	r3, [r2, #8]
 8000786:	e787      	b.n	8000698 <HAL_ADC_Init+0x54>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000788:	2800      	cmp	r0, #0
 800078a:	d1aa      	bne.n	80006e2 <HAL_ADC_Init+0x9e>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800078c:	68d8      	ldr	r0, [r3, #12]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800078e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000792:	7e25      	ldrb	r5, [r4, #24]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000794:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000796:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 800079a:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800079e:	f020 0002 	bic.w	r0, r0, #2
 80007a2:	4302      	orrs	r2, r0
 80007a4:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80007a6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80007aa:	2a01      	cmp	r2, #1
 80007ac:	d1b8      	bne.n	8000720 <HAL_ADC_Init+0xdc>
        MODIFY_REG(hadc->Instance->CFGR2,
 80007ae:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80007b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80007b2:	6918      	ldr	r0, [r3, #16]
 80007b4:	432a      	orrs	r2, r5
 80007b6:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80007b8:	f042 0201 	orr.w	r2, r2, #1
 80007bc:	432a      	orrs	r2, r5
 80007be:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80007c0:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80007c4:	432a      	orrs	r2, r5
 80007c6:	f020 0004 	bic.w	r0, r0, #4
 80007ca:	4302      	orrs	r2, r0
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80007cc:	611a      	str	r2, [r3, #16]
 80007ce:	e788      	b.n	80006e2 <HAL_ADC_Init+0x9e>
 80007d0:	fff0c007 	.word	0xfff0c007
 80007d4:	00030d40 	.word	0x00030d40
 80007d8:	20000000 	.word	0x20000000
 80007dc:	50040000 	.word	0x50040000
 80007e0:	50040300 	.word	0x50040300

080007e4 <HAL_ADC_ConvCpltCallback>:
 80007e4:	4770      	bx	lr

080007e6 <HAL_ADC_ConvHalfCpltCallback>:
 80007e6:	4770      	bx	lr

080007e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80007e8:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80007ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80007ec:	f7ff fffb 	bl	80007e6 <HAL_ADC_ConvHalfCpltCallback>
 80007f0:	bd08      	pop	{r3, pc}

080007f2 <HAL_ADC_ErrorCallback>:
{
 80007f2:	4770      	bx	lr

080007f4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80007f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80007f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80007f8:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80007fc:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80007fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8000800:	d121      	bne.n	8000846 <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000806:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	6811      	ldr	r1, [r2, #0]
 800080c:	0708      	lsls	r0, r1, #28
 800080e:	d507      	bpl.n	8000820 <ADC_DMAConvCplt+0x2c>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000810:	68d1      	ldr	r1, [r2, #12]
 8000812:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8000816:	d112      	bne.n	800083e <ADC_DMAConvCplt+0x4a>
        if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8000818:	68d2      	ldr	r2, [r2, #12]
 800081a:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800081e:	e002      	b.n	8000826 <ADC_DMAConvCplt+0x32>
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8000820:	68d2      	ldr	r2, [r2, #12]
 8000822:	f012 0f02 	tst.w	r2, #2
 8000826:	d10a      	bne.n	800083e <ADC_DMAConvCplt+0x4a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000828:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800082a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800082e:	655a      	str	r2, [r3, #84]	; 0x54
        if((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000832:	04d1      	lsls	r1, r2, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000834:	bf5e      	ittt	pl
 8000836:	6d5a      	ldrpl	r2, [r3, #84]	; 0x54
 8000838:	f042 0201 	orrpl.w	r2, r2, #1
 800083c:	655a      	strpl	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ffd0 	bl	80007e4 <HAL_ADC_ConvCpltCallback>
 8000844:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000846:	06d2      	lsls	r2, r2, #27
 8000848:	d503      	bpl.n	8000852 <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ffd1 	bl	80007f2 <HAL_ADC_ErrorCallback>
 8000850:	bd10      	pop	{r4, pc}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800085a:	4718      	bx	r3

0800085c <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800085c:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800085e:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000860:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000866:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000868:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800086a:	f043 0304 	orr.w	r3, r3, #4
 800086e:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000870:	f7ff ffbf 	bl	80007f2 <HAL_ADC_ErrorCallback>
 8000874:	bd08      	pop	{r3, pc}
	...

08000878 <HAL_ADC_ConfigChannel>:
{
 8000878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800087e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000882:	2b01      	cmp	r3, #1
{
 8000884:	4605      	mov	r5, r0
 8000886:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8000888:	f000 8150 	beq.w	8000b2c <HAL_ADC_ConfigChannel+0x2b4>
 800088c:	2301      	movs	r3, #1
 800088e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000892:	6800      	ldr	r0, [r0, #0]
 8000894:	f7ff fed2 	bl	800063c <LL_ADC_REG_IsConversionOngoing>
 8000898:	2800      	cmp	r0, #0
 800089a:	f040 8141 	bne.w	8000b20 <HAL_ADC_ConfigChannel+0x2a8>
    if (sConfig->Rank <= 5U)
 800089e:	684b      	ldr	r3, [r1, #4]
 80008a0:	2b05      	cmp	r3, #5
 80008a2:	d808      	bhi.n	80008b6 <HAL_ADC_ConfigChannel+0x3e>
      switch (sConfig->Rank)
 80008a4:	3b02      	subs	r3, #2
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d838      	bhi.n	800091c <HAL_ADC_ConfigChannel+0xa4>
 80008aa:	e8df f003 	tbb	[pc, r3]
 80008ae:	3002      	.short	0x3002
 80008b0:	3432      	.short	0x3432
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80008b2:	230c      	movs	r3, #12
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80008b4:	6063      	str	r3, [r4, #4]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80008b6:	6861      	ldr	r1, [r4, #4]
 80008b8:	6828      	ldr	r0, [r5, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80008ba:	098e      	lsrs	r6, r1, #6
 80008bc:	f006 060c 	and.w	r6, r6, #12
 80008c0:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 80008c4:	f001 011f 	and.w	r1, r1, #31
 80008c8:	231f      	movs	r3, #31
 80008ca:	fa03 f201 	lsl.w	r2, r3, r1
 80008ce:	59f3      	ldr	r3, [r6, r7]
 80008d0:	ea23 0302 	bic.w	r3, r3, r2
 80008d4:	6822      	ldr	r2, [r4, #0]
 80008d6:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80008da:	408a      	lsls	r2, r1
 80008dc:	4313      	orrs	r3, r2
 80008de:	51f3      	str	r3, [r6, r7]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80008e0:	f7ff feac 	bl	800063c <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80008e4:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80008e6:	689a      	ldr	r2, [r3, #8]
 80008e8:	0716      	lsls	r6, r2, #28
 80008ea:	f140 8121 	bpl.w	8000b30 <HAL_ADC_ConfigChannel+0x2b8>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80008ee:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80008f0:	6883      	ldr	r3, [r0, #8]
 80008f2:	07d9      	lsls	r1, r3, #31
 80008f4:	f140 8141 	bpl.w	8000b7a <HAL_ADC_ConfigChannel+0x302>
    if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80008f8:	6821      	ldr	r1, [r4, #0]
 80008fa:	4bc5      	ldr	r3, [pc, #788]	; (8000c10 <HAL_ADC_ConfigChannel+0x398>)
 80008fc:	4219      	tst	r1, r3
 80008fe:	f040 80c1 	bne.w	8000a84 <HAL_ADC_ConfigChannel+0x20c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000902:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000904:	2300      	movs	r3, #0
 8000906:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 800090a:	b003      	add	sp, #12
 800090c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 800090e:	2312      	movs	r3, #18
 8000910:	e7d0      	b.n	80008b4 <HAL_ADC_ConfigChannel+0x3c>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8000912:	2318      	movs	r3, #24
 8000914:	e7ce      	b.n	80008b4 <HAL_ADC_ConfigChannel+0x3c>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8000916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800091a:	e7cb      	b.n	80008b4 <HAL_ADC_ConfigChannel+0x3c>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800091c:	2306      	movs	r3, #6
 800091e:	e7c9      	b.n	80008b4 <HAL_ADC_ConfigChannel+0x3c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000920:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000924:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8000928:	f3c1 6784 	ubfx	r7, r1, #26, #5
 800092c:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 8000930:	2800      	cmp	r0, #0
 8000932:	d13a      	bne.n	80009aa <HAL_ADC_ConfigChannel+0x132>
 8000934:	f3c3 6084 	ubfx	r0, r3, #26, #5
 8000938:	4287      	cmp	r7, r0
 800093a:	f040 8155 	bne.w	8000be8 <HAL_ADC_ConfigChannel+0x370>
  MODIFY_REG(*preg,
 800093e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000942:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000946:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000948:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 800094c:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8000950:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000954:	bb9f      	cbnz	r7, 80009be <HAL_ADC_ConfigChannel+0x146>
 8000956:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800095a:	4283      	cmp	r3, r0
 800095c:	f040 8149 	bne.w	8000bf2 <HAL_ADC_ConfigChannel+0x37a>
  MODIFY_REG(*preg,
 8000960:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000964:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000966:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000968:	6891      	ldr	r1, [r2, #8]
 800096a:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800096e:	f102 0608 	add.w	r6, r2, #8
 8000972:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000976:	bb77      	cbnz	r7, 80009d6 <HAL_ADC_ConfigChannel+0x15e>
 8000978:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800097c:	4283      	cmp	r3, r0
 800097e:	f040 813f 	bne.w	8000c00 <HAL_ADC_ConfigChannel+0x388>
  MODIFY_REG(*preg,
 8000982:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000986:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000988:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800098a:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800098e:	68d2      	ldr	r2, [r2, #12]
 8000990:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8000994:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8000998:	bb4e      	cbnz	r6, 80009ee <HAL_ADC_ConfigChannel+0x176>
 800099a:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800099e:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 80009a0:	bf04      	itt	eq
 80009a2:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80009a6:	6002      	streq	r2, [r0, #0]
 80009a8:	e7a1      	b.n	80008ee <HAL_ADC_ConfigChannel+0x76>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009aa:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80009ae:	fab0 f080 	clz	r0, r0
 80009b2:	4287      	cmp	r7, r0
 80009b4:	d0c3      	beq.n	800093e <HAL_ADC_ConfigChannel+0xc6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80009b6:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80009ba:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80009be:	fa93 f3a3 	rbit	r3, r3
 80009c2:	fab3 f383 	clz	r3, r3
 80009c6:	4283      	cmp	r3, r0
 80009c8:	d0ca      	beq.n	8000960 <HAL_ADC_ConfigChannel+0xe8>
 80009ca:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80009cc:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009ce:	f102 0608 	add.w	r6, r2, #8
 80009d2:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80009d6:	fa93 f3a3 	rbit	r3, r3
 80009da:	fab3 f383 	clz	r3, r3
 80009de:	4283      	cmp	r3, r0
 80009e0:	d0cf      	beq.n	8000982 <HAL_ADC_ConfigChannel+0x10a>
 80009e2:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80009e6:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80009e8:	6823      	ldr	r3, [r4, #0]
 80009ea:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80009ee:	fa93 f3a3 	rbit	r3, r3
 80009f2:	fab3 f383 	clz	r3, r3
 80009f6:	e7d2      	b.n	800099e <HAL_ADC_ConfigChannel+0x126>
 80009f8:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 80009fc:	fab2 f282 	clz	r2, r2
 8000a00:	3201      	adds	r2, #1
 8000a02:	f002 021f 	and.w	r2, r2, #31
 8000a06:	2a09      	cmp	r2, #9
 8000a08:	d910      	bls.n	8000a2c <HAL_ADC_ConfigChannel+0x1b4>
 8000a0a:	fa93 f2a3 	rbit	r2, r3
 8000a0e:	fab2 f282 	clz	r2, r2
 8000a12:	3201      	adds	r2, #1
 8000a14:	0692      	lsls	r2, r2, #26
 8000a16:	f002 46f8 	and.w	r6, r2, #2080374784	; 0x7c000000
 8000a1a:	fa93 f1a3 	rbit	r1, r3
 8000a1e:	fab1 f181 	clz	r1, r1
 8000a22:	3101      	adds	r1, #1
 8000a24:	f001 021f 	and.w	r2, r1, #31
 8000a28:	2101      	movs	r1, #1
 8000a2a:	e017      	b.n	8000a5c <HAL_ADC_ConfigChannel+0x1e4>
 8000a2c:	fa93 f6a3 	rbit	r6, r3
 8000a30:	fab6 f686 	clz	r6, r6
 8000a34:	3601      	adds	r6, #1
 8000a36:	06b6      	lsls	r6, r6, #26
 8000a38:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000a3c:	fa93 f1a3 	rbit	r1, r3
 8000a40:	fab1 f181 	clz	r1, r1
 8000a44:	3101      	adds	r1, #1
 8000a46:	f001 021f 	and.w	r2, r1, #31
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	e0ba      	b.n	8000bc4 <HAL_ADC_ConfigChannel+0x34c>
 8000a4e:	fa93 f1a3 	rbit	r1, r3
 8000a52:	fab1 f181 	clz	r1, r1
 8000a56:	e0bc      	b.n	8000bd2 <HAL_ADC_ConfigChannel+0x35a>
 8000a58:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000a5c:	4091      	lsls	r1, r2
 8000a5e:	ea41 0206 	orr.w	r2, r1, r6
 8000a62:	b957      	cbnz	r7, 8000a7a <HAL_ADC_ConfigChannel+0x202>
 8000a64:	0e9b      	lsrs	r3, r3, #26
 8000a66:	3301      	adds	r3, #1
 8000a68:	f003 031f 	and.w	r3, r3, #31
 8000a6c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8000a70:	391e      	subs	r1, #30
 8000a72:	0509      	lsls	r1, r1, #20
 8000a74:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8000a78:	e0b1      	b.n	8000bde <HAL_ADC_ConfigChannel+0x366>
 8000a7a:	fa93 f3a3 	rbit	r3, r3
 8000a7e:	fab3 f383 	clz	r3, r3
 8000a82:	e7f0      	b.n	8000a66 <HAL_ADC_ConfigChannel+0x1ee>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000a84:	4b63      	ldr	r3, [pc, #396]	; (8000c14 <HAL_ADC_ConfigChannel+0x39c>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000a86:	4a64      	ldr	r2, [pc, #400]	; (8000c18 <HAL_ADC_ConfigChannel+0x3a0>)
 8000a88:	6898      	ldr	r0, [r3, #8]
 8000a8a:	4291      	cmp	r1, r2
 8000a8c:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
 8000a90:	d11d      	bne.n	8000ace <HAL_ADC_ConfigChannel+0x256>
 8000a92:	0202      	lsls	r2, r0, #8
 8000a94:	f53f af35 	bmi.w	8000902 <HAL_ADC_ConfigChannel+0x8a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8000a98:	6829      	ldr	r1, [r5, #0]
 8000a9a:	4a60      	ldr	r2, [pc, #384]	; (8000c1c <HAL_ADC_ConfigChannel+0x3a4>)
 8000a9c:	4291      	cmp	r1, r2
 8000a9e:	f47f af30 	bne.w	8000902 <HAL_ADC_ConfigChannel+0x8a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000aa2:	689a      	ldr	r2, [r3, #8]
 8000aa4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8000aa8:	4322      	orrs	r2, r4
 8000aaa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000aae:	609a      	str	r2, [r3, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000ab0:	4b5b      	ldr	r3, [pc, #364]	; (8000c20 <HAL_ADC_ConfigChannel+0x3a8>)
 8000ab2:	4a5c      	ldr	r2, [pc, #368]	; (8000c24 <HAL_ADC_ConfigChannel+0x3ac>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	fbb3 f2f2 	udiv	r2, r3, r2
 8000aba:	230c      	movs	r3, #12
 8000abc:	4353      	muls	r3, r2
            wait_loop_index--;
 8000abe:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0UL)
 8000ac0:	9b01      	ldr	r3, [sp, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f43f af1d 	beq.w	8000902 <HAL_ADC_ConfigChannel+0x8a>
            wait_loop_index--;
 8000ac8:	9b01      	ldr	r3, [sp, #4]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	e7f7      	b.n	8000abe <HAL_ADC_ConfigChannel+0x246>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000ace:	4a56      	ldr	r2, [pc, #344]	; (8000c28 <HAL_ADC_ConfigChannel+0x3b0>)
 8000ad0:	4291      	cmp	r1, r2
 8000ad2:	d111      	bne.n	8000af8 <HAL_ADC_ConfigChannel+0x280>
 8000ad4:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8000ad8:	f47f af13 	bne.w	8000902 <HAL_ADC_ConfigChannel+0x8a>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000adc:	6829      	ldr	r1, [r5, #0]
 8000ade:	f1a2 42f7 	sub.w	r2, r2, #2071986176	; 0x7b800000
 8000ae2:	4291      	cmp	r1, r2
 8000ae4:	f47f af0d 	bne.w	8000902 <HAL_ADC_ConfigChannel+0x8a>
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8000aee:	4322      	orrs	r2, r4
 8000af0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	e705      	b.n	8000904 <HAL_ADC_ConfigChannel+0x8c>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000af8:	4a4c      	ldr	r2, [pc, #304]	; (8000c2c <HAL_ADC_ConfigChannel+0x3b4>)
 8000afa:	4291      	cmp	r1, r2
 8000afc:	f47f af01 	bne.w	8000902 <HAL_ADC_ConfigChannel+0x8a>
 8000b00:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8000b04:	f47f aefd 	bne.w	8000902 <HAL_ADC_ConfigChannel+0x8a>
        if (ADC_VREFINT_INSTANCE(hadc))
 8000b08:	6829      	ldr	r1, [r5, #0]
 8000b0a:	4a44      	ldr	r2, [pc, #272]	; (8000c1c <HAL_ADC_ConfigChannel+0x3a4>)
 8000b0c:	4291      	cmp	r1, r2
 8000b0e:	f47f aef8 	bne.w	8000902 <HAL_ADC_ConfigChannel+0x8a>
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8000b18:	4322      	orrs	r2, r4
 8000b1a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000b1e:	e7e9      	b.n	8000af4 <HAL_ADC_ConfigChannel+0x27c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b20:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8000b22:	f042 0220 	orr.w	r2, r2, #32
 8000b26:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000b28:	4618      	mov	r0, r3
 8000b2a:	e6eb      	b.n	8000904 <HAL_ADC_ConfigChannel+0x8c>
  __HAL_LOCK(hadc);
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	e6ec      	b.n	800090a <HAL_ADC_ConfigChannel+0x92>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b30:	2800      	cmp	r0, #0
 8000b32:	f47f aedc 	bne.w	80008ee <HAL_ADC_ConfigChannel+0x76>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000b36:	68a2      	ldr	r2, [r4, #8]
 8000b38:	6821      	ldr	r1, [r4, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fd6c 	bl	8000618 <LL_ADC_SetChannelSamplingTime>
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000b40:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000b42:	f8d5 e000 	ldr.w	lr, [r5]
 8000b46:	6823      	ldr	r3, [r4, #0]
 8000b48:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000b4c:	2e04      	cmp	r6, #4
 8000b4e:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 8000b52:	f43f aee5 	beq.w	8000920 <HAL_ADC_ConfigChannel+0xa8>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000b56:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8000b5a:	0048      	lsls	r0, r1, #1
 8000b5c:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8000b5e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8000b62:	4081      	lsls	r1, r0
 8000b64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b68:	4319      	orrs	r1, r3
 8000b6a:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8000b6e:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <HAL_ADC_ConfigChannel+0x3b8>)
 8000b70:	4003      	ands	r3, r0
 8000b72:	4319      	orrs	r1, r3
 8000b74:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
 8000b78:	e6b9      	b.n	80008ee <HAL_ADC_ConfigChannel+0x76>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000b7a:	68e6      	ldr	r6, [r4, #12]
 8000b7c:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8000b7e:	4a2d      	ldr	r2, [pc, #180]	; (8000c34 <HAL_ADC_ConfigChannel+0x3bc>)
 8000b80:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8000b84:	f006 0e18 	and.w	lr, r6, #24
 8000b88:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8000b8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8000b90:	401a      	ands	r2, r3
 8000b92:	ea21 0107 	bic.w	r1, r1, r7
 8000b96:	430a      	orrs	r2, r1
 8000b98:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000b9c:	4a26      	ldr	r2, [pc, #152]	; (8000c38 <HAL_ADC_ConfigChannel+0x3c0>)
 8000b9e:	4296      	cmp	r6, r2
 8000ba0:	f47f aeaa 	bne.w	80008f8 <HAL_ADC_ConfigChannel+0x80>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 8000ba4:	2f00      	cmp	r7, #0
 8000ba6:	f47f af27 	bne.w	80009f8 <HAL_ADC_ConfigChannel+0x180>
 8000baa:	0e9e      	lsrs	r6, r3, #26
 8000bac:	3601      	adds	r6, #1
 8000bae:	f006 021f 	and.w	r2, r6, #31
 8000bb2:	2a09      	cmp	r2, #9
 8000bb4:	f04f 0101 	mov.w	r1, #1
 8000bb8:	ea4f 6686 	mov.w	r6, r6, lsl #26
 8000bbc:	f63f af4c 	bhi.w	8000a58 <HAL_ADC_ConfigChannel+0x1e0>
 8000bc0:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000bc4:	4091      	lsls	r1, r2
 8000bc6:	ea41 0206 	orr.w	r2, r1, r6
 8000bca:	2f00      	cmp	r7, #0
 8000bcc:	f47f af3f 	bne.w	8000a4e <HAL_ADC_ConfigChannel+0x1d6>
 8000bd0:	0e99      	lsrs	r1, r3, #26
 8000bd2:	3101      	adds	r1, #1
 8000bd4:	f001 011f 	and.w	r1, r1, #31
 8000bd8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000bdc:	0509      	lsls	r1, r1, #20
 8000bde:	4311      	orrs	r1, r2
 8000be0:	68a2      	ldr	r2, [r4, #8]
 8000be2:	f7ff fd19 	bl	8000618 <LL_ADC_SetChannelSamplingTime>
 8000be6:	e687      	b.n	80008f8 <HAL_ADC_ConfigChannel+0x80>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000be8:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000bec:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000bf0:	e6b1      	b.n	8000956 <HAL_ADC_ConfigChannel+0xde>
 8000bf2:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000bf4:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bf6:	f102 0608 	add.w	r6, r2, #8
 8000bfa:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000bfe:	e6bb      	b.n	8000978 <HAL_ADC_ConfigChannel+0x100>
 8000c00:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000c04:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c06:	6823      	ldr	r3, [r4, #0]
 8000c08:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8000c0c:	e6c5      	b.n	800099a <HAL_ADC_ConfigChannel+0x122>
 8000c0e:	bf00      	nop
 8000c10:	80080000 	.word	0x80080000
 8000c14:	50040300 	.word	0x50040300
 8000c18:	c7520000 	.word	0xc7520000
 8000c1c:	50040000 	.word	0x50040000
 8000c20:	20000000 	.word	0x20000000
 8000c24:	00030d40 	.word	0x00030d40
 8000c28:	cb840000 	.word	0xcb840000
 8000c2c:	80000001 	.word	0x80000001
 8000c30:	03fff000 	.word	0x03fff000
 8000c34:	0007ffff 	.word	0x0007ffff
 8000c38:	407f0000 	.word	0x407f0000

08000c3c <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c3c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c3e:	6893      	ldr	r3, [r2, #8]
{
 8000c40:	b570      	push	{r4, r5, r6, lr}
 8000c42:	4604      	mov	r4, r0
 8000c44:	07d8      	lsls	r0, r3, #31
 8000c46:	d501      	bpl.n	8000c4c <ADC_Enable+0x10>
  return HAL_OK;
 8000c48:	2000      	movs	r0, #0
 8000c4a:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8000c4c:	6891      	ldr	r1, [r2, #8]
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <ADC_Enable+0x64>)
 8000c50:	4219      	tst	r1, r3
 8000c52:	d114      	bne.n	8000c7e <ADC_Enable+0x42>
  MODIFY_REG(ADCx->CR,
 8000c54:	6893      	ldr	r3, [r2, #8]
 8000c56:	4d13      	ldr	r5, [pc, #76]	; (8000ca4 <ADC_Enable+0x68>)
 8000c58:	402b      	ands	r3, r5
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8000c60:	f7ff fcc6 	bl	80005f0 <HAL_GetTick>
 8000c64:	4606      	mov	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000c66:	6822      	ldr	r2, [r4, #0]
 8000c68:	6813      	ldr	r3, [r2, #0]
 8000c6a:	07db      	lsls	r3, r3, #31
 8000c6c:	d4ec      	bmi.n	8000c48 <ADC_Enable+0xc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c6e:	6893      	ldr	r3, [r2, #8]
 8000c70:	07d9      	lsls	r1, r3, #31
 8000c72:	d50e      	bpl.n	8000c92 <ADC_Enable+0x56>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000c74:	f7ff fcbc 	bl	80005f0 <HAL_GetTick>
 8000c78:	1b80      	subs	r0, r0, r6
 8000c7a:	2802      	cmp	r0, #2
 8000c7c:	d9f3      	bls.n	8000c66 <ADC_Enable+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c80:	f043 0310 	orr.w	r3, r3, #16
 8000c84:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8000c8e:	2001      	movs	r0, #1
 8000c90:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8000c92:	6893      	ldr	r3, [r2, #8]
 8000c94:	402b      	ands	r3, r5
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6093      	str	r3, [r2, #8]
 8000c9c:	e7ea      	b.n	8000c74 <ADC_Enable+0x38>
 8000c9e:	bf00      	nop
 8000ca0:	8000003f 	.word	0x8000003f
 8000ca4:	7fffffc0 	.word	0x7fffffc0

08000ca8 <HAL_ADC_Start_DMA>:
{
 8000ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000caa:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000cac:	6800      	ldr	r0, [r0, #0]
{
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4616      	mov	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000cb2:	f7ff fcc3 	bl	800063c <LL_ADC_REG_IsConversionOngoing>
 8000cb6:	4607      	mov	r7, r0
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	d142      	bne.n	8000d42 <HAL_ADC_Start_DMA+0x9a>
    __HAL_LOCK(hadc);
 8000cbc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d03e      	beq.n	8000d42 <HAL_ADC_Start_DMA+0x9a>
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      tmp_hal_status = ADC_Enable(hadc);
 8000cca:	4620      	mov	r0, r4
 8000ccc:	f7ff ffb6 	bl	8000c3c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	d133      	bne.n	8000d3c <HAL_ADC_Start_DMA+0x94>
        ADC_STATE_CLR_SET(hadc->State,
 8000cd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000cd6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000cd8:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8000cda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000cde:	f023 0301 	bic.w	r3, r3, #1
 8000ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce6:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000ce8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000cea:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cee:	bf1c      	itt	ne
 8000cf0:	6da3      	ldrne	r3, [r4, #88]	; 0x58
 8000cf2:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc); 
 8000cf6:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <HAL_ADC_Start_DMA+0xa0>)
 8000cfa:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <HAL_ADC_Start_DMA+0xa4>)
 8000cfe:	6303      	str	r3, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <HAL_ADC_Start_DMA+0xa8>)
 8000d02:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d04:	231c      	movs	r3, #28
 8000d06:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000d0e:	684b      	ldr	r3, [r1, #4]
 8000d10:	f043 0310 	orr.w	r3, r3, #16
 8000d14:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000d16:	68cb      	ldr	r3, [r1, #12]
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d1e:	462a      	mov	r2, r5
 8000d20:	4633      	mov	r3, r6
 8000d22:	3140      	adds	r1, #64	; 0x40
 8000d24:	f000 f8e0 	bl	8000ee8 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000d28:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8000d2a:	6893      	ldr	r3, [r2, #8]
 8000d2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000d30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6093      	str	r3, [r2, #8]
 8000d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 8000d3c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
 8000d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_hal_status = HAL_BUSY;
 8000d42:	2002      	movs	r0, #2
}
 8000d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d46:	bf00      	nop
 8000d48:	080007f5 	.word	0x080007f5
 8000d4c:	080007e9 	.word	0x080007e9
 8000d50:	0800085d 	.word	0x0800085d

08000d54 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d56:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d5c:	041b      	lsls	r3, r3, #16
 8000d5e:	0c1b      	lsrs	r3, r3, #16
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d64:	0200      	lsls	r0, r0, #8
 8000d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000d6e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000d70:	60d3      	str	r3, [r2, #12]
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7a:	b530      	push	{r4, r5, lr}
 8000d7c:	68dc      	ldr	r4, [r3, #12]
 8000d7e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d82:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	2b04      	cmp	r3, #4
 8000d8a:	bf28      	it	cs
 8000d8c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 0501 	mov.w	r5, #1
 8000d94:	fa05 f303 	lsl.w	r3, r5, r3
 8000d98:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9c:	bf8c      	ite	hi
 8000d9e:	3c03      	subhi	r4, #3
 8000da0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da2:	4019      	ands	r1, r3
 8000da4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da6:	fa05 f404 	lsl.w	r4, r5, r4
 8000daa:	3c01      	subs	r4, #1
 8000dac:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000dae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	ea42 0201 	orr.w	r2, r2, r1
 8000db4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	bfaf      	iteee	ge
 8000dba:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbe:	f000 000f 	andlt.w	r0, r0, #15
 8000dc2:	4b06      	ldrlt	r3, [pc, #24]	; (8000ddc <HAL_NVIC_SetPriority+0x64>)
 8000dc4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	bfa5      	ittet	ge
 8000dc8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000dcc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000dd4:	bd30      	pop	{r4, r5, pc}
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00
 8000ddc:	e000ed14 	.word	0xe000ed14

08000de0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000de0:	0942      	lsrs	r2, r0, #5
 8000de2:	2301      	movs	r3, #1
 8000de4:	f000 001f 	and.w	r0, r0, #31
 8000de8:	fa03 f000 	lsl.w	r0, r3, r0
 8000dec:	4b01      	ldr	r3, [pc, #4]	; (8000df4 <HAL_NVIC_EnableIRQ+0x14>)
 8000dee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	3801      	subs	r0, #1
 8000dfa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000dfe:	d20a      	bcs.n	8000e16 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e04:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	21f0      	movs	r1, #240	; 0xf0
 8000e08:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e0c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e10:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e16:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000e010 	.word	0xe000e010
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e24:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e26:	2800      	cmp	r0, #0
 8000e28:	d04e      	beq.n	8000ec8 <HAL_DMA_Init+0xa4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e2a:	6801      	ldr	r1, [r0, #0]
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <HAL_DMA_Init+0xa8>)
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f04f 0414 	mov.w	r4, #20
 8000e34:	d840      	bhi.n	8000eb8 <HAL_DMA_Init+0x94>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e36:	4a26      	ldr	r2, [pc, #152]	; (8000ed0 <HAL_DMA_Init+0xac>)
 8000e38:	440a      	add	r2, r1
 8000e3a:	fbb2 f2f4 	udiv	r2, r2, r4
 8000e3e:	0092      	lsls	r2, r2, #2
 8000e40:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e42:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8000e46:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e4e:	6884      	ldr	r4, [r0, #8]
 8000e50:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e52:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8000e54:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8000e56:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e58:	432b      	orrs	r3, r5
 8000e5a:	6945      	ldr	r5, [r0, #20]
 8000e5c:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e5e:	6985      	ldr	r5, [r0, #24]
 8000e60:	432b      	orrs	r3, r5
 8000e62:	69c5      	ldr	r5, [r0, #28]
 8000e64:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e66:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e68:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8000e6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e70:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8000e72:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000e74:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8000e78:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000e7a:	d014      	beq.n	8000ea6 <HAL_DMA_Init+0x82>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000e7c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_DMA_Init+0xb0>)
 8000e80:	429a      	cmp	r2, r3
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e82:	bf0c      	ite	eq
 8000e84:	4914      	ldreq	r1, [pc, #80]	; (8000ed8 <HAL_DMA_Init+0xb4>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e86:	4915      	ldrne	r1, [pc, #84]	; (8000edc <HAL_DMA_Init+0xb8>)
 8000e88:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000e8a:	680a      	ldr	r2, [r1, #0]
 8000e8c:	f003 031c 	and.w	r3, r3, #28
 8000e90:	240f      	movs	r4, #15
 8000e92:	409c      	lsls	r4, r3
 8000e94:	ea22 0204 	bic.w	r2, r2, r4
 8000e98:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e9a:	6842      	ldr	r2, [r0, #4]
 8000e9c:	680c      	ldr	r4, [r1, #0]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	4323      	orrs	r3, r4
 8000ea4:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ea6:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000ea8:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eaa:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000eac:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8000eb0:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_DMA_Init+0xbc>)
 8000eba:	440b      	add	r3, r1
 8000ebc:	fbb3 f3f4 	udiv	r3, r3, r4
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <HAL_DMA_Init+0xc0>)
 8000ec6:	e7be      	b.n	8000e46 <HAL_DMA_Init+0x22>
    return HAL_ERROR;
 8000ec8:	2001      	movs	r0, #1
}
 8000eca:	bd30      	pop	{r4, r5, pc}
 8000ecc:	40020407 	.word	0x40020407
 8000ed0:	bffdfff8 	.word	0xbffdfff8
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	400200a8 	.word	0x400200a8
 8000edc:	400204a8 	.word	0x400204a8
 8000ee0:	bffdfbf8 	.word	0xbffdfbf8
 8000ee4:	40020400 	.word	0x40020400

08000ee8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ee8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000eea:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8000eee:	2c01      	cmp	r4, #1
 8000ef0:	d038      	beq.n	8000f64 <HAL_DMA_Start_IT+0x7c>

  if(HAL_DMA_STATE_READY == hdma->State)
 8000ef2:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8000ef6:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ef8:	b2ed      	uxtb	r5, r5
 8000efa:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8000efc:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 8000f00:	f04f 0600 	mov.w	r6, #0
 8000f04:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f08:	d12a      	bne.n	8000f60 <HAL_DMA_Start_IT+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f0a:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f0e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f10:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8000f12:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f14:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8000f16:	f026 0601 	bic.w	r6, r6, #1
 8000f1a:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f1c:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8000f1e:	f006 061c 	and.w	r6, r6, #28
 8000f22:	40b5      	lsls	r5, r6
 8000f24:	607d      	str	r5, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f26:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f28:	6883      	ldr	r3, [r0, #8]
 8000f2a:	6805      	ldr	r5, [r0, #0]
 8000f2c:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8000f2e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f30:	bf0b      	itete	eq
 8000f32:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000f34:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000f36:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000f38:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000f3a:	b14b      	cbz	r3, 8000f50 <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f3c:	6823      	ldr	r3, [r4, #0]
 8000f3e:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f42:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000f44:	682b      	ldr	r3, [r5, #0]
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f50:	6823      	ldr	r3, [r4, #0]
 8000f52:	f023 0304 	bic.w	r3, r3, #4
 8000f56:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	f043 030a 	orr.w	r3, r3, #10
 8000f5e:	e7f0      	b.n	8000f42 <HAL_DMA_Start_IT+0x5a>
    __HAL_UNLOCK(hdma);
 8000f60:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8000f64:	2002      	movs	r0, #2
}
 8000f66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f68 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f68:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000f6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8000f6c:	6803      	ldr	r3, [r0, #0]
{
 8000f6e:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000f70:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f74:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000f76:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000f78:	2404      	movs	r4, #4
 8000f7a:	4094      	lsls	r4, r2
 8000f7c:	4226      	tst	r6, r4
 8000f7e:	d00e      	beq.n	8000f9e <HAL_DMA_IRQHandler+0x36>
 8000f80:	f015 0f04 	tst.w	r5, #4
 8000f84:	d00b      	beq.n	8000f9e <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f8a:	bf5e      	ittt	pl
 8000f8c:	681a      	ldrpl	r2, [r3, #0]
 8000f8e:	f022 0204 	bicpl.w	r2, r2, #4
 8000f92:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8000f94:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000f96:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8000f98:	b373      	cbz	r3, 8000ff8 <HAL_DMA_IRQHandler+0x90>
}
 8000f9a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000f9c:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000f9e:	2402      	movs	r4, #2
 8000fa0:	4094      	lsls	r4, r2
 8000fa2:	4226      	tst	r6, r4
 8000fa4:	d012      	beq.n	8000fcc <HAL_DMA_IRQHandler+0x64>
 8000fa6:	f015 0f02 	tst.w	r5, #2
 8000faa:	d00f      	beq.n	8000fcc <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	0695      	lsls	r5, r2, #26
 8000fb0:	d406      	bmi.n	8000fc0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	f022 020a 	bic.w	r2, r2, #10
 8000fb8:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000fc0:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000fc2:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000fc4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8000fc8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000fca:	e7e5      	b.n	8000f98 <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000fcc:	2408      	movs	r4, #8
 8000fce:	4094      	lsls	r4, r2
 8000fd0:	4234      	tst	r4, r6
 8000fd2:	d011      	beq.n	8000ff8 <HAL_DMA_IRQHandler+0x90>
 8000fd4:	072c      	lsls	r4, r5, #28
 8000fd6:	d50f      	bpl.n	8000ff8 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd8:	681c      	ldr	r4, [r3, #0]
 8000fda:	f024 040e 	bic.w	r4, r4, #14
 8000fde:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	fa03 f202 	lsl.w	r2, r3, r2
 8000fe6:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fe8:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000fea:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8000ff4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000ff6:	e7cf      	b.n	8000f98 <HAL_DMA_IRQHandler+0x30>
}
 8000ff8:	bc70      	pop	{r4, r5, r6}
 8000ffa:	4770      	bx	lr

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001000:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001002:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001004:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8001160 <HAL_GPIO_Init+0x164>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001008:	4a53      	ldr	r2, [pc, #332]	; (8001158 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100a:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800100c:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00u;
 8001010:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001012:	9c01      	ldr	r4, [sp, #4]
 8001014:	40dc      	lsrs	r4, r3
 8001016:	d102      	bne.n	800101e <HAL_GPIO_Init+0x22>
      }
    }

    position++;
  }
}
 8001018:	b005      	add	sp, #20
 800101a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800101e:	2401      	movs	r4, #1
 8001020:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 8001024:	9c01      	ldr	r4, [sp, #4]
 8001026:	ea14 050a 	ands.w	r5, r4, sl
 800102a:	f000 808f 	beq.w	800114c <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102e:	684c      	ldr	r4, [r1, #4]
 8001030:	f024 0b10 	bic.w	fp, r4, #16
 8001034:	f1bb 0f02 	cmp.w	fp, #2
 8001038:	d111      	bne.n	800105e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3u];
 800103a:	08df      	lsrs	r7, r3, #3
 800103c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001040:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001044:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001046:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800104a:	fa09 fc0e 	lsl.w	ip, r9, lr
 800104e:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001052:	690e      	ldr	r6, [r1, #16]
 8001054:	fa06 f60e 	lsl.w	r6, r6, lr
 8001058:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 800105c:	623e      	str	r6, [r7, #32]
 800105e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001062:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8001064:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001066:	fa07 f70c 	lsl.w	r7, r7, ip
 800106a:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800106c:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001070:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001072:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001076:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800107a:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800107e:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8001082:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001084:	d811      	bhi.n	80010aa <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8001086:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001088:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800108c:	68ce      	ldr	r6, [r1, #12]
 800108e:	fa06 fe0c 	lsl.w	lr, r6, ip
 8001092:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8001096:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001098:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800109a:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800109e:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80010a2:	409e      	lsls	r6, r3
 80010a4:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80010a8:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80010aa:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010ac:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ae:	688e      	ldr	r6, [r1, #8]
 80010b0:	fa06 f60c 	lsl.w	r6, r6, ip
 80010b4:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010b6:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80010b8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ba:	d547      	bpl.n	800114c <HAL_GPIO_Init+0x150>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010bc:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 80010c0:	f046 0601 	orr.w	r6, r6, #1
 80010c4:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 80010c8:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 80010cc:	f023 0703 	bic.w	r7, r3, #3
 80010d0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80010d4:	f006 0601 	and.w	r6, r6, #1
 80010d8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80010dc:	9603      	str	r6, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010de:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80010e4:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010e6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80010ea:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010ee:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010f2:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010f6:	d02b      	beq.n	8001150 <HAL_GPIO_Init+0x154>
 80010f8:	4e18      	ldr	r6, [pc, #96]	; (800115c <HAL_GPIO_Init+0x160>)
 80010fa:	42b0      	cmp	r0, r6
 80010fc:	d02a      	beq.n	8001154 <HAL_GPIO_Init+0x158>
 80010fe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001102:	42b0      	cmp	r0, r6
 8001104:	bf14      	ite	ne
 8001106:	2607      	movne	r6, #7
 8001108:	2602      	moveq	r6, #2
 800110a:	fa06 f60e 	lsl.w	r6, r6, lr
 800110e:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001112:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8001114:	6816      	ldr	r6, [r2, #0]
        temp &= ~(iocurrent);
 8001116:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001118:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 800111c:	bf0c      	ite	eq
 800111e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001120:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8001122:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8001124:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001126:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 800112a:	bf0c      	ite	eq
 800112c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800112e:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8001130:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 8001132:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001134:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001138:	bf0c      	ite	eq
 800113a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800113c:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 800113e:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 8001140:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001142:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8001144:	bf54      	ite	pl
 8001146:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001148:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 800114a:	60d6      	str	r6, [r2, #12]
    position++;
 800114c:	3301      	adds	r3, #1
 800114e:	e760      	b.n	8001012 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001150:	2600      	movs	r6, #0
 8001152:	e7da      	b.n	800110a <HAL_GPIO_Init+0x10e>
 8001154:	2601      	movs	r6, #1
 8001156:	e7d8      	b.n	800110a <HAL_GPIO_Init+0x10e>
 8001158:	40010400 	.word	0x40010400
 800115c:	48000400 	.word	0x48000400
 8001160:	40021000 	.word	0x40021000

08001164 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001164:	b10a      	cbz	r2, 800116a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001166:	6181      	str	r1, [r0, #24]
 8001168:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800116a:	6281      	str	r1, [r0, #40]	; 0x28
 800116c:	4770      	bx	lr

0800116e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800116e:	6803      	ldr	r3, [r0, #0]
 8001170:	699a      	ldr	r2, [r3, #24]
 8001172:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8001174:	bf44      	itt	mi
 8001176:	2200      	movmi	r2, #0
 8001178:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800117a:	699a      	ldr	r2, [r3, #24]
 800117c:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800117e:	bf5e      	ittt	pl
 8001180:	699a      	ldrpl	r2, [r3, #24]
 8001182:	f042 0201 	orrpl.w	r2, r2, #1
 8001186:	619a      	strpl	r2, [r3, #24]
 8001188:	4770      	bx	lr

0800118a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800118a:	b530      	push	{r4, r5, lr}
 800118c:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800118e:	6805      	ldr	r5, [r0, #0]
 8001190:	4323      	orrs	r3, r4
 8001192:	0d64      	lsrs	r4, r4, #21
 8001194:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001198:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800119c:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80011a0:	6868      	ldr	r0, [r5, #4]
 80011a2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80011a6:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80011aa:	4319      	orrs	r1, r3
 80011ac:	f044 0403 	orr.w	r4, r4, #3
 80011b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80011b4:	ea20 0404 	bic.w	r4, r0, r4
 80011b8:	4321      	orrs	r1, r4
 80011ba:	6069      	str	r1, [r5, #4]
 80011bc:	bd30      	pop	{r4, r5, pc}

080011be <I2C_WaitOnFlagUntilTimeout>:
{
 80011be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011c2:	9f06      	ldr	r7, [sp, #24]
 80011c4:	4604      	mov	r4, r0
 80011c6:	4688      	mov	r8, r1
 80011c8:	4616      	mov	r6, r2
 80011ca:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011cc:	6822      	ldr	r2, [r4, #0]
 80011ce:	6993      	ldr	r3, [r2, #24]
 80011d0:	ea38 0303 	bics.w	r3, r8, r3
 80011d4:	bf0c      	ite	eq
 80011d6:	2301      	moveq	r3, #1
 80011d8:	2300      	movne	r3, #0
 80011da:	42b3      	cmp	r3, r6
 80011dc:	d002      	beq.n	80011e4 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80011de:	2000      	movs	r0, #0
}
 80011e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80011e4:	1c6b      	adds	r3, r5, #1
 80011e6:	d0f2      	beq.n	80011ce <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011e8:	f7ff fa02 	bl	80005f0 <HAL_GetTick>
 80011ec:	1bc0      	subs	r0, r0, r7
 80011ee:	4285      	cmp	r5, r0
 80011f0:	d301      	bcc.n	80011f6 <I2C_WaitOnFlagUntilTimeout+0x38>
 80011f2:	2d00      	cmp	r5, #0
 80011f4:	d1ea      	bne.n	80011cc <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011f8:	f043 0320 	orr.w	r3, r3, #32
 80011fc:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80011fe:	2320      	movs	r3, #32
 8001200:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001204:	2300      	movs	r3, #0
 8001206:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800120a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800120e:	2001      	movs	r0, #1
 8001210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001214 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001214:	6803      	ldr	r3, [r0, #0]
{
 8001216:	b570      	push	{r4, r5, r6, lr}
 8001218:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800121a:	6998      	ldr	r0, [r3, #24]
 800121c:	f010 0010 	ands.w	r0, r0, #16
{
 8001220:	460d      	mov	r5, r1
 8001222:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001224:	d116      	bne.n	8001254 <I2C_IsAcknowledgeFailed+0x40>
 8001226:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8001228:	1c69      	adds	r1, r5, #1
 800122a:	d014      	beq.n	8001256 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800122c:	f7ff f9e0 	bl	80005f0 <HAL_GetTick>
 8001230:	1b80      	subs	r0, r0, r6
 8001232:	4285      	cmp	r5, r0
 8001234:	d300      	bcc.n	8001238 <I2C_IsAcknowledgeFailed+0x24>
 8001236:	b96d      	cbnz	r5, 8001254 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001238:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800123a:	f043 0320 	orr.w	r3, r3, #32
 800123e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001240:	2320      	movs	r3, #32
 8001242:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001246:	2300      	movs	r3, #0
 8001248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800124c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8001250:	2001      	movs	r0, #1
}
 8001252:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001254:	6823      	ldr	r3, [r4, #0]
 8001256:	6999      	ldr	r1, [r3, #24]
 8001258:	068a      	lsls	r2, r1, #26
 800125a:	d5e5      	bpl.n	8001228 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800125c:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800125e:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001260:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001262:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001264:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001266:	f7ff ff82 	bl	800116e <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800126a:	6822      	ldr	r2, [r4, #0]
 800126c:	6853      	ldr	r3, [r2, #4]
 800126e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001272:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001276:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800127a:	f023 0301 	bic.w	r3, r3, #1
 800127e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001280:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001288:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 800128c:	e7db      	b.n	8001246 <I2C_IsAcknowledgeFailed+0x32>

0800128e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800128e:	b570      	push	{r4, r5, r6, lr}
 8001290:	4604      	mov	r4, r0
 8001292:	460d      	mov	r5, r1
 8001294:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001296:	6823      	ldr	r3, [r4, #0]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	079b      	lsls	r3, r3, #30
 800129c:	d501      	bpl.n	80012a2 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800129e:	2000      	movs	r0, #0
 80012a0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80012a2:	4632      	mov	r2, r6
 80012a4:	4629      	mov	r1, r5
 80012a6:	4620      	mov	r0, r4
 80012a8:	f7ff ffb4 	bl	8001214 <I2C_IsAcknowledgeFailed>
 80012ac:	b9a0      	cbnz	r0, 80012d8 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80012ae:	1c6a      	adds	r2, r5, #1
 80012b0:	d0f1      	beq.n	8001296 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012b2:	f7ff f99d 	bl	80005f0 <HAL_GetTick>
 80012b6:	1b80      	subs	r0, r0, r6
 80012b8:	4285      	cmp	r5, r0
 80012ba:	d301      	bcc.n	80012c0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80012bc:	2d00      	cmp	r5, #0
 80012be:	d1ea      	bne.n	8001296 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012c2:	f043 0320 	orr.w	r3, r3, #32
 80012c6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80012c8:	2320      	movs	r3, #32
 80012ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80012d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80012d8:	2001      	movs	r0, #1
}
 80012da:	bd70      	pop	{r4, r5, r6, pc}

080012dc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80012dc:	b570      	push	{r4, r5, r6, lr}
 80012de:	4604      	mov	r4, r0
 80012e0:	460d      	mov	r5, r1
 80012e2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012e4:	6823      	ldr	r3, [r4, #0]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	069b      	lsls	r3, r3, #26
 80012ea:	d501      	bpl.n	80012f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80012ec:	2000      	movs	r0, #0
 80012ee:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80012f0:	4632      	mov	r2, r6
 80012f2:	4629      	mov	r1, r5
 80012f4:	4620      	mov	r0, r4
 80012f6:	f7ff ff8d 	bl	8001214 <I2C_IsAcknowledgeFailed>
 80012fa:	b990      	cbnz	r0, 8001322 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012fc:	f7ff f978 	bl	80005f0 <HAL_GetTick>
 8001300:	1b80      	subs	r0, r0, r6
 8001302:	4285      	cmp	r5, r0
 8001304:	d301      	bcc.n	800130a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8001306:	2d00      	cmp	r5, #0
 8001308:	d1ec      	bne.n	80012e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800130a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800130c:	f043 0320 	orr.w	r3, r3, #32
 8001310:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001312:	2320      	movs	r3, #32
 8001314:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001318:	2300      	movs	r3, #0
 800131a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800131e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001322:	2001      	movs	r0, #1
}
 8001324:	bd70      	pop	{r4, r5, r6, pc}

08001326 <HAL_I2C_Init>:
{
 8001326:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001328:	4604      	mov	r4, r0
 800132a:	2800      	cmp	r0, #0
 800132c:	d04a      	beq.n	80013c4 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800132e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001332:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001336:	b91b      	cbnz	r3, 8001340 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001338:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800133c:	f001 fd4c 	bl	8002dd8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001340:	2324      	movs	r3, #36	; 0x24
 8001342:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001346:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001348:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	f022 0201 	bic.w	r2, r2, #1
 8001350:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001352:	6862      	ldr	r2, [r4, #4]
 8001354:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001358:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800135a:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800135c:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800135e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001366:	d124      	bne.n	80013b2 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001368:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800136c:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800136e:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001370:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001372:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001376:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800137a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800137c:	68da      	ldr	r2, [r3, #12]
 800137e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001382:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001384:	6922      	ldr	r2, [r4, #16]
 8001386:	430a      	orrs	r2, r1
 8001388:	69a1      	ldr	r1, [r4, #24]
 800138a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800138e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001390:	6a21      	ldr	r1, [r4, #32]
 8001392:	69e2      	ldr	r2, [r4, #28]
 8001394:	430a      	orrs	r2, r1
 8001396:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	f042 0201 	orr.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013a0:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80013a2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013a4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013aa:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ac:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 80013b0:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013b6:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013b8:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013ba:	bf04      	itt	eq
 80013bc:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80013c0:	605a      	streq	r2, [r3, #4]
 80013c2:	e7d4      	b.n	800136e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80013c4:	2001      	movs	r0, #1
}
 80013c6:	bd10      	pop	{r4, pc}

080013c8 <HAL_I2C_Master_Transmit>:
{
 80013c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80013cc:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80013d2:	2b20      	cmp	r3, #32
{
 80013d4:	4604      	mov	r4, r0
 80013d6:	460e      	mov	r6, r1
 80013d8:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80013da:	f040 8084 	bne.w	80014e6 <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 80013de:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d07f      	beq.n	80014e6 <HAL_I2C_Master_Transmit+0x11e>
 80013e6:	2701      	movs	r7, #1
 80013e8:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80013ec:	f7ff f900 	bl	80005f0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013f0:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80013f2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013f4:	9000      	str	r0, [sp, #0]
 80013f6:	463a      	mov	r2, r7
 80013f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013fc:	4620      	mov	r0, r4
 80013fe:	f7ff fede 	bl	80011be <I2C_WaitOnFlagUntilTimeout>
 8001402:	b118      	cbz	r0, 800140c <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8001404:	2001      	movs	r0, #1
}
 8001406:	b003      	add	sp, #12
 8001408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800140c:	2321      	movs	r3, #33	; 0x21
 800140e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001412:	2310      	movs	r3, #16
 8001414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001418:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800141a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800141e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8001420:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001424:	b29b      	uxth	r3, r3
 8001426:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8001428:	6360      	str	r0, [r4, #52]	; 0x34
 800142a:	4b30      	ldr	r3, [pc, #192]	; (80014ec <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800142c:	d926      	bls.n	800147c <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800142e:	22ff      	movs	r2, #255	; 0xff
 8001430:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001432:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001438:	4631      	mov	r1, r6
 800143a:	4620      	mov	r0, r4
 800143c:	f7ff fea5 	bl	800118a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001440:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001442:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8001444:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001446:	462a      	mov	r2, r5
 8001448:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800144a:	b9fb      	cbnz	r3, 800148c <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800144c:	f7ff ff46 	bl	80012dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001450:	2800      	cmp	r0, #0
 8001452:	d1d7      	bne.n	8001404 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	2120      	movs	r1, #32
 8001458:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001460:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001464:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001468:	f022 0201 	bic.w	r2, r2, #1
 800146c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800146e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001472:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001476:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800147a:	e7c4      	b.n	8001406 <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 800147c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800147e:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001480:	b292      	uxth	r2, r2
 8001482:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001484:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	e7d5      	b.n	8001438 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800148c:	f7ff feff 	bl	800128e <I2C_WaitOnTXISFlagUntilTimeout>
 8001490:	2800      	cmp	r0, #0
 8001492:	d1b7      	bne.n	8001404 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001494:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001496:	6822      	ldr	r2, [r4, #0]
 8001498:	f813 1b01 	ldrb.w	r1, [r3], #1
 800149c:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800149e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80014a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80014a2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80014a4:	3b01      	subs	r3, #1
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80014ac:	3a01      	subs	r2, #1
 80014ae:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014b0:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80014b2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0c3      	beq.n	8001440 <HAL_I2C_Master_Transmit+0x78>
 80014b8:	2a00      	cmp	r2, #0
 80014ba:	d1c1      	bne.n	8001440 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014bc:	9500      	str	r5, [sp, #0]
 80014be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014c0:	2180      	movs	r1, #128	; 0x80
 80014c2:	4620      	mov	r0, r4
 80014c4:	f7ff fe7b 	bl	80011be <I2C_WaitOnFlagUntilTimeout>
 80014c8:	2800      	cmp	r0, #0
 80014ca:	d19b      	bne.n	8001404 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	2bff      	cmp	r3, #255	; 0xff
 80014d2:	d903      	bls.n	80014dc <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014d4:	22ff      	movs	r2, #255	; 0xff
 80014d6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014d8:	9000      	str	r0, [sp, #0]
 80014da:	e7ab      	b.n	8001434 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 80014dc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014de:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80014e0:	b292      	uxth	r2, r2
 80014e2:	8522      	strh	r2, [r4, #40]	; 0x28
 80014e4:	e7ce      	b.n	8001484 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 80014e6:	2002      	movs	r0, #2
 80014e8:	e78d      	b.n	8001406 <HAL_I2C_Master_Transmit+0x3e>
 80014ea:	bf00      	nop
 80014ec:	80002000 	.word	0x80002000

080014f0 <HAL_I2C_IsDeviceReady>:
{
 80014f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80014f4:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80014fa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80014fe:	2b20      	cmp	r3, #32
{
 8001500:	4604      	mov	r4, r0
 8001502:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001504:	d17d      	bne.n	8001602 <HAL_I2C_IsDeviceReady+0x112>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001506:	6803      	ldr	r3, [r0, #0]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 800150e:	d178      	bne.n	8001602 <HAL_I2C_IsDeviceReady+0x112>
    __HAL_LOCK(hi2c);
 8001510:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8001514:	2a01      	cmp	r2, #1
 8001516:	d074      	beq.n	8001602 <HAL_I2C_IsDeviceReady+0x112>
 8001518:	2201      	movs	r2, #1
 800151a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 800151e:	f3c1 0609 	ubfx	r6, r1, #0, #10
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001522:	2224      	movs	r2, #36	; 0x24
 8001524:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001528:	f446 5920 	orr.w	r9, r6, #10240	; 0x2800
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800152c:	6443      	str	r3, [r0, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800152e:	68e3      	ldr	r3, [r4, #12]
 8001530:	6822      	ldr	r2, [r4, #0]
 8001532:	2b01      	cmp	r3, #1
 8001534:	bf06      	itte	eq
 8001536:	f046 7300 	orreq.w	r3, r6, #33554432	; 0x2000000
 800153a:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
 800153e:	464b      	movne	r3, r9
 8001540:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8001542:	f7ff f855 	bl	80005f0 <HAL_GetTick>
 8001546:	4607      	mov	r7, r0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	699a      	ldr	r2, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800154c:	699b      	ldr	r3, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800154e:	f3c2 1240 	ubfx	r2, r2, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001552:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001556:	b902      	cbnz	r2, 800155a <HAL_I2C_IsDeviceReady+0x6a>
 8001558:	b16b      	cbz	r3, 8001576 <HAL_I2C_IsDeviceReady+0x86>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800155a:	6823      	ldr	r3, [r4, #0]
 800155c:	699a      	ldr	r2, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800155e:	9700      	str	r7, [sp, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001560:	f012 0210 	ands.w	r2, r2, #16
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001564:	462b      	mov	r3, r5
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001566:	d124      	bne.n	80015b2 <HAL_I2C_IsDeviceReady+0xc2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001568:	2120      	movs	r1, #32
 800156a:	4620      	mov	r0, r4
 800156c:	f7ff fe27 	bl	80011be <I2C_WaitOnFlagUntilTimeout>
 8001570:	b1a8      	cbz	r0, 800159e <HAL_I2C_IsDeviceReady+0xae>
    return HAL_ERROR;
 8001572:	2001      	movs	r0, #1
 8001574:	e01a      	b.n	80015ac <HAL_I2C_IsDeviceReady+0xbc>
        if (Timeout != HAL_MAX_DELAY)
 8001576:	1c6b      	adds	r3, r5, #1
 8001578:	d0e6      	beq.n	8001548 <HAL_I2C_IsDeviceReady+0x58>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800157a:	f7ff f839 	bl	80005f0 <HAL_GetTick>
 800157e:	1bc0      	subs	r0, r0, r7
 8001580:	4285      	cmp	r5, r0
 8001582:	d301      	bcc.n	8001588 <HAL_I2C_IsDeviceReady+0x98>
 8001584:	2d00      	cmp	r5, #0
 8001586:	d1df      	bne.n	8001548 <HAL_I2C_IsDeviceReady+0x58>
    hi2c->State = HAL_I2C_STATE_READY;
 8001588:	2320      	movs	r3, #32
 800158a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800158e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001590:	f043 0320 	orr.w	r3, r3, #32
 8001594:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8001596:	2300      	movs	r3, #0
 8001598:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800159c:	e7e9      	b.n	8001572 <HAL_I2C_IsDeviceReady+0x82>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800159e:	6822      	ldr	r2, [r4, #0]
 80015a0:	2320      	movs	r3, #32
 80015a2:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 80015a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 80015a8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80015ac:	b004      	add	sp, #16
 80015ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015b2:	2200      	movs	r2, #0
 80015b4:	2120      	movs	r1, #32
 80015b6:	4620      	mov	r0, r4
 80015b8:	f7ff fe01 	bl	80011be <I2C_WaitOnFlagUntilTimeout>
 80015bc:	4602      	mov	r2, r0
 80015be:	2800      	cmp	r0, #0
 80015c0:	d1d7      	bne.n	8001572 <HAL_I2C_IsDeviceReady+0x82>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015c2:	6823      	ldr	r3, [r4, #0]
 80015c4:	2110      	movs	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015c6:	f04f 0a20 	mov.w	sl, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015ca:	61d9      	str	r1, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015cc:	f8c3 a01c 	str.w	sl, [r3, #28]
      if (I2C_Trials == Trials)
 80015d0:	9903      	ldr	r1, [sp, #12]
 80015d2:	4541      	cmp	r1, r8
 80015d4:	d10e      	bne.n	80015f4 <HAL_I2C_IsDeviceReady+0x104>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80015dc:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015de:	4620      	mov	r0, r4
 80015e0:	9700      	str	r7, [sp, #0]
 80015e2:	462b      	mov	r3, r5
 80015e4:	4651      	mov	r1, sl
 80015e6:	f7ff fdea 	bl	80011be <I2C_WaitOnFlagUntilTimeout>
 80015ea:	2800      	cmp	r0, #0
 80015ec:	d1c1      	bne.n	8001572 <HAL_I2C_IsDeviceReady+0x82>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	f8c3 a01c 	str.w	sl, [r3, #28]
      I2C_Trials++;
 80015f4:	9b03      	ldr	r3, [sp, #12]
 80015f6:	3301      	adds	r3, #1
 80015f8:	9303      	str	r3, [sp, #12]
    while (I2C_Trials < Trials);
 80015fa:	9b03      	ldr	r3, [sp, #12]
 80015fc:	4598      	cmp	r8, r3
 80015fe:	d896      	bhi.n	800152e <HAL_I2C_IsDeviceReady+0x3e>
 8001600:	e7c2      	b.n	8001588 <HAL_I2C_IsDeviceReady+0x98>
    return HAL_BUSY;
 8001602:	2002      	movs	r0, #2
 8001604:	e7d2      	b.n	80015ac <HAL_I2C_IsDeviceReady+0xbc>

08001606 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001606:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	2a20      	cmp	r2, #32
{
 800160e:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001610:	d11d      	bne.n	800164e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001612:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001616:	2b01      	cmp	r3, #1
 8001618:	d019      	beq.n	800164e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800161a:	2324      	movs	r3, #36	; 0x24
 800161c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001620:	6803      	ldr	r3, [r0, #0]
 8001622:	681c      	ldr	r4, [r3, #0]
 8001624:	f024 0401 	bic.w	r4, r4, #1
 8001628:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800162a:	681c      	ldr	r4, [r3, #0]
 800162c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001630:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001632:	681c      	ldr	r4, [r3, #0]
 8001634:	4321      	orrs	r1, r4
 8001636:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001638:	6819      	ldr	r1, [r3, #0]
 800163a:	f041 0101 	orr.w	r1, r1, #1
 800163e:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001640:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001642:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001646:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800164a:	4618      	mov	r0, r3
 800164c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800164e:	2002      	movs	r0, #2
  }
}
 8001650:	bd10      	pop	{r4, pc}

08001652 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001652:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001654:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001658:	b2e4      	uxtb	r4, r4
 800165a:	2c20      	cmp	r4, #32
 800165c:	d11c      	bne.n	8001698 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800165e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001662:	2b01      	cmp	r3, #1
 8001664:	d018      	beq.n	8001698 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001666:	2324      	movs	r3, #36	; 0x24
 8001668:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800166c:	6803      	ldr	r3, [r0, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	f022 0201 	bic.w	r2, r2, #1
 8001674:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001676:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001678:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800167c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001680:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	f042 0201 	orr.w	r2, r2, #1
 8001688:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800168a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800168c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001690:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001694:	4618      	mov	r0, r3
 8001696:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001698:	2002      	movs	r0, #2
  }
}
 800169a:	bd10      	pop	{r4, pc}

0800169c <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800169c:	4a02      	ldr	r2, [pc, #8]	; (80016a8 <HAL_PWR_EnableBkUpAccess+0xc>)
 800169e:	6813      	ldr	r3, [r2, #0]
 80016a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4770      	bx	lr
 80016a8:	40007000 	.word	0x40007000

080016ac <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016ac:	4b02      	ldr	r3, [pc, #8]	; (80016b8 <HAL_PWREx_GetVoltageRange+0xc>)
 80016ae:	6818      	ldr	r0, [r3, #0]
#endif
}
 80016b0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40007000 	.word	0x40007000

080016bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016be:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016c0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016c4:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016c8:	d11c      	bne.n	8001704 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ca:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80016ce:	d015      	beq.n	80016fc <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80016d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016da:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016dc:	4a10      	ldr	r2, [pc, #64]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80016de:	6811      	ldr	r1, [r2, #0]
 80016e0:	2232      	movs	r2, #50	; 0x32
 80016e2:	434a      	muls	r2, r1
 80016e4:	490f      	ldr	r1, [pc, #60]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x68>)
 80016e6:	fbb2 f2f1 	udiv	r2, r2, r1
 80016ea:	4619      	mov	r1, r3
 80016ec:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ee:	6958      	ldr	r0, [r3, #20]
 80016f0:	0540      	lsls	r0, r0, #21
 80016f2:	d500      	bpl.n	80016f6 <HAL_PWREx_ControlVoltageScaling+0x3a>
 80016f4:	b922      	cbnz	r2, 8001700 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016f6:	694b      	ldr	r3, [r1, #20]
 80016f8:	055b      	lsls	r3, r3, #21
 80016fa:	d40d      	bmi.n	8001718 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016fc:	2000      	movs	r0, #0
 80016fe:	4770      	bx	lr
        wait_loop_index--;
 8001700:	3a01      	subs	r2, #1
 8001702:	e7f4      	b.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001704:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001708:	bf1f      	itttt	ne
 800170a:	681a      	ldrne	r2, [r3, #0]
 800170c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001710:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001714:	601a      	strne	r2, [r3, #0]
 8001716:	e7f1      	b.n	80016fc <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8001718:	2003      	movs	r0, #3
}
 800171a:	4770      	bx	lr
 800171c:	40007000 	.word	0x40007000
 8001720:	20000000 	.word	0x20000000
 8001724:	000f4240 	.word	0x000f4240

08001728 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001728:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800172a:	4d1e      	ldr	r5, [pc, #120]	; (80017a4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800172c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800172e:	00da      	lsls	r2, r3, #3
{
 8001730:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001732:	d518      	bpl.n	8001766 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001734:	f7ff ffba 	bl	80016ac <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001738:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800173c:	d123      	bne.n	8001786 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800173e:	2c80      	cmp	r4, #128	; 0x80
 8001740:	d929      	bls.n	8001796 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001742:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001744:	bf8c      	ite	hi
 8001746:	2002      	movhi	r0, #2
 8001748:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800174a:	4a17      	ldr	r2, [pc, #92]	; (80017a8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800174c:	6813      	ldr	r3, [r2, #0]
 800174e:	f023 0307 	bic.w	r3, r3, #7
 8001752:	4303      	orrs	r3, r0
 8001754:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001756:	6813      	ldr	r3, [r2, #0]
 8001758:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800175c:	1a18      	subs	r0, r3, r0
 800175e:	bf18      	it	ne
 8001760:	2001      	movne	r0, #1
 8001762:	b003      	add	sp, #12
 8001764:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176c:	65ab      	str	r3, [r5, #88]	; 0x58
 800176e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001778:	f7ff ff98 	bl	80016ac <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800177c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800177e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001782:	65ab      	str	r3, [r5, #88]	; 0x58
 8001784:	e7d8      	b.n	8001738 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001786:	2c80      	cmp	r4, #128	; 0x80
 8001788:	d807      	bhi.n	800179a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800178a:	d008      	beq.n	800179e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 800178c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001790:	4258      	negs	r0, r3
 8001792:	4158      	adcs	r0, r3
 8001794:	e7d9      	b.n	800174a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001796:	2000      	movs	r0, #0
 8001798:	e7d7      	b.n	800174a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800179a:	2003      	movs	r0, #3
 800179c:	e7d5      	b.n	800174a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800179e:	2002      	movs	r0, #2
 80017a0:	e7d3      	b.n	800174a <RCC_SetFlashLatencyFromMSIRange+0x22>
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40022000 	.word	0x40022000

080017ac <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ac:	4b25      	ldr	r3, [pc, #148]	; (8001844 <HAL_RCC_GetSysClockFreq+0x98>)
 80017ae:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017b0:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017b2:	f012 020c 	ands.w	r2, r2, #12
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0x18>
 80017b8:	2a0c      	cmp	r2, #12
 80017ba:	d115      	bne.n	80017e8 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017bc:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017c0:	2901      	cmp	r1, #1
 80017c2:	d118      	bne.n	80017f6 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017c4:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80017c6:	4820      	ldr	r0, [pc, #128]	; (8001848 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017c8:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017ca:	bf55      	itete	pl
 80017cc:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017d0:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017d2:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017d6:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80017da:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017de:	b382      	cbz	r2, 8001842 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017e0:	2a0c      	cmp	r2, #12
 80017e2:	d009      	beq.n	80017f8 <HAL_RCC_GetSysClockFreq+0x4c>
 80017e4:	2000      	movs	r0, #0
  return sysclockfreq;
 80017e6:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017e8:	2a04      	cmp	r2, #4
 80017ea:	d029      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0x94>
 80017ec:	2a08      	cmp	r2, #8
 80017ee:	4817      	ldr	r0, [pc, #92]	; (800184c <HAL_RCC_GetSysClockFreq+0xa0>)
 80017f0:	bf18      	it	ne
 80017f2:	2000      	movne	r0, #0
 80017f4:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017f6:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017f8:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017fa:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017fc:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001800:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8001804:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001806:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 800180a:	d005      	beq.n	8001818 <HAL_RCC_GetSysClockFreq+0x6c>
 800180c:	2903      	cmp	r1, #3
 800180e:	d012      	beq.n	8001836 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001810:	68d9      	ldr	r1, [r3, #12]
 8001812:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001816:	e003      	b.n	8001820 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001818:	68d9      	ldr	r1, [r3, #12]
 800181a:	480d      	ldr	r0, [pc, #52]	; (8001850 <HAL_RCC_GetSysClockFreq+0xa4>)
 800181c:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001820:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001822:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001826:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800182a:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800182c:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800182e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001830:	fbb0 f0f3 	udiv	r0, r0, r3
 8001834:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001836:	68d9      	ldr	r1, [r3, #12]
 8001838:	4804      	ldr	r0, [pc, #16]	; (800184c <HAL_RCC_GetSysClockFreq+0xa0>)
 800183a:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800183e:	e7ef      	b.n	8001820 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8001840:	4803      	ldr	r0, [pc, #12]	; (8001850 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8001842:	4770      	bx	lr
 8001844:	40021000 	.word	0x40021000
 8001848:	080040dc 	.word	0x080040dc
 800184c:	007a1200 	.word	0x007a1200
 8001850:	00f42400 	.word	0x00f42400

08001854 <HAL_RCC_OscConfig>:
{
 8001854:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001858:	4605      	mov	r5, r0
 800185a:	b908      	cbnz	r0, 8001860 <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 800185c:	2001      	movs	r0, #1
 800185e:	e046      	b.n	80018ee <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001860:	4ca8      	ldr	r4, [pc, #672]	; (8001b04 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001862:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001864:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001866:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001868:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800186a:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800186e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001872:	d572      	bpl.n	800195a <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001874:	b11e      	cbz	r6, 800187e <HAL_RCC_OscConfig+0x2a>
 8001876:	2e0c      	cmp	r6, #12
 8001878:	d151      	bne.n	800191e <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800187a:	2f01      	cmp	r7, #1
 800187c:	d14f      	bne.n	800191e <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	0798      	lsls	r0, r3, #30
 8001882:	d502      	bpl.n	800188a <HAL_RCC_OscConfig+0x36>
 8001884:	69ab      	ldr	r3, [r5, #24]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0e8      	beq.n	800185c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	6a28      	ldr	r0, [r5, #32]
 800188e:	0719      	lsls	r1, r3, #28
 8001890:	bf56      	itet	pl
 8001892:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001896:	6823      	ldrmi	r3, [r4, #0]
 8001898:	091b      	lsrpl	r3, r3, #4
 800189a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800189e:	4283      	cmp	r3, r0
 80018a0:	d228      	bcs.n	80018f4 <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018a2:	f7ff ff41 	bl	8001728 <RCC_SetFlashLatencyFromMSIRange>
 80018a6:	2800      	cmp	r0, #0
 80018a8:	d1d8      	bne.n	800185c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018aa:	6823      	ldr	r3, [r4, #0]
 80018ac:	f043 0308 	orr.w	r3, r3, #8
 80018b0:	6023      	str	r3, [r4, #0]
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	6a2a      	ldr	r2, [r5, #32]
 80018b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018ba:	4313      	orrs	r3, r2
 80018bc:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018be:	6863      	ldr	r3, [r4, #4]
 80018c0:	69ea      	ldr	r2, [r5, #28]
 80018c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80018c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80018ca:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018cc:	f7ff ff6e 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 80018d0:	68a3      	ldr	r3, [r4, #8]
 80018d2:	4a8d      	ldr	r2, [pc, #564]	; (8001b08 <HAL_RCC_OscConfig+0x2b4>)
 80018d4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018d8:	5cd3      	ldrb	r3, [r2, r3]
 80018da:	f003 031f 	and.w	r3, r3, #31
 80018de:	40d8      	lsrs	r0, r3
 80018e0:	4b8a      	ldr	r3, [pc, #552]	; (8001b0c <HAL_RCC_OscConfig+0x2b8>)
 80018e2:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80018e4:	2000      	movs	r0, #0
 80018e6:	f7fe fe53 	bl	8000590 <HAL_InitTick>
        if(status != HAL_OK)
 80018ea:	2800      	cmp	r0, #0
 80018ec:	d035      	beq.n	800195a <HAL_RCC_OscConfig+0x106>
}
 80018ee:	b003      	add	sp, #12
 80018f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	f043 0308 	orr.w	r3, r3, #8
 80018fa:	6023      	str	r3, [r4, #0]
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001902:	4303      	orrs	r3, r0
 8001904:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001906:	6863      	ldr	r3, [r4, #4]
 8001908:	69ea      	ldr	r2, [r5, #28]
 800190a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800190e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001912:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001914:	f7ff ff08 	bl	8001728 <RCC_SetFlashLatencyFromMSIRange>
 8001918:	2800      	cmp	r0, #0
 800191a:	d0d7      	beq.n	80018cc <HAL_RCC_OscConfig+0x78>
 800191c:	e79e      	b.n	800185c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800191e:	69ab      	ldr	r3, [r5, #24]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d03a      	beq.n	800199a <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800192c:	f7fe fe60 	bl	80005f0 <HAL_GetTick>
 8001930:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	079a      	lsls	r2, r3, #30
 8001936:	d528      	bpl.n	800198a <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	f043 0308 	orr.w	r3, r3, #8
 800193e:	6023      	str	r3, [r4, #0]
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	6a2a      	ldr	r2, [r5, #32]
 8001944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001948:	4313      	orrs	r3, r2
 800194a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800194c:	6863      	ldr	r3, [r4, #4]
 800194e:	69ea      	ldr	r2, [r5, #28]
 8001950:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001954:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001958:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195a:	682b      	ldr	r3, [r5, #0]
 800195c:	07d8      	lsls	r0, r3, #31
 800195e:	d42d      	bmi.n	80019bc <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001960:	682b      	ldr	r3, [r5, #0]
 8001962:	0799      	lsls	r1, r3, #30
 8001964:	d46b      	bmi.n	8001a3e <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001966:	682b      	ldr	r3, [r5, #0]
 8001968:	0718      	lsls	r0, r3, #28
 800196a:	f100 80a0 	bmi.w	8001aae <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196e:	682b      	ldr	r3, [r5, #0]
 8001970:	0759      	lsls	r1, r3, #29
 8001972:	f100 80cd 	bmi.w	8001b10 <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001976:	682b      	ldr	r3, [r5, #0]
 8001978:	0699      	lsls	r1, r3, #26
 800197a:	f100 8136 	bmi.w	8001bea <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800197e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001980:	2b00      	cmp	r3, #0
 8001982:	f040 815c 	bne.w	8001c3e <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8001986:	2000      	movs	r0, #0
 8001988:	e7b1      	b.n	80018ee <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800198a:	f7fe fe31 	bl	80005f0 <HAL_GetTick>
 800198e:	eba0 0008 	sub.w	r0, r0, r8
 8001992:	2802      	cmp	r0, #2
 8001994:	d9cd      	bls.n	8001932 <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 8001996:	2003      	movs	r0, #3
 8001998:	e7a9      	b.n	80018ee <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	f023 0301 	bic.w	r3, r3, #1
 80019a0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019a2:	f7fe fe25 	bl	80005f0 <HAL_GetTick>
 80019a6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	079b      	lsls	r3, r3, #30
 80019ac:	d5d5      	bpl.n	800195a <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019ae:	f7fe fe1f 	bl	80005f0 <HAL_GetTick>
 80019b2:	eba0 0008 	sub.w	r0, r0, r8
 80019b6:	2802      	cmp	r0, #2
 80019b8:	d9f6      	bls.n	80019a8 <HAL_RCC_OscConfig+0x154>
 80019ba:	e7ec      	b.n	8001996 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019bc:	2e08      	cmp	r6, #8
 80019be:	d003      	beq.n	80019c8 <HAL_RCC_OscConfig+0x174>
 80019c0:	2e0c      	cmp	r6, #12
 80019c2:	d108      	bne.n	80019d6 <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 80019c4:	2f03      	cmp	r7, #3
 80019c6:	d106      	bne.n	80019d6 <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c8:	6823      	ldr	r3, [r4, #0]
 80019ca:	039a      	lsls	r2, r3, #14
 80019cc:	d5c8      	bpl.n	8001960 <HAL_RCC_OscConfig+0x10c>
 80019ce:	686b      	ldr	r3, [r5, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1c5      	bne.n	8001960 <HAL_RCC_OscConfig+0x10c>
 80019d4:	e742      	b.n	800185c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d6:	686b      	ldr	r3, [r5, #4]
 80019d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019dc:	d110      	bne.n	8001a00 <HAL_RCC_OscConfig+0x1ac>
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019e6:	f7fe fe03 	bl	80005f0 <HAL_GetTick>
 80019ea:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	039b      	lsls	r3, r3, #14
 80019f0:	d4b6      	bmi.n	8001960 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f2:	f7fe fdfd 	bl	80005f0 <HAL_GetTick>
 80019f6:	eba0 0008 	sub.w	r0, r0, r8
 80019fa:	2864      	cmp	r0, #100	; 0x64
 80019fc:	d9f6      	bls.n	80019ec <HAL_RCC_OscConfig+0x198>
 80019fe:	e7ca      	b.n	8001996 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a04:	d104      	bne.n	8001a10 <HAL_RCC_OscConfig+0x1bc>
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a0c:	6023      	str	r3, [r4, #0]
 8001a0e:	e7e6      	b.n	80019de <HAL_RCC_OscConfig+0x18a>
 8001a10:	6822      	ldr	r2, [r4, #0]
 8001a12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a16:	6022      	str	r2, [r4, #0]
 8001a18:	6822      	ldr	r2, [r4, #0]
 8001a1a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a1e:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1e0      	bne.n	80019e6 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8001a24:	f7fe fde4 	bl	80005f0 <HAL_GetTick>
 8001a28:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a2a:	6823      	ldr	r3, [r4, #0]
 8001a2c:	0398      	lsls	r0, r3, #14
 8001a2e:	d597      	bpl.n	8001960 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a30:	f7fe fdde 	bl	80005f0 <HAL_GetTick>
 8001a34:	eba0 0008 	sub.w	r0, r0, r8
 8001a38:	2864      	cmp	r0, #100	; 0x64
 8001a3a:	d9f6      	bls.n	8001a2a <HAL_RCC_OscConfig+0x1d6>
 8001a3c:	e7ab      	b.n	8001996 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a3e:	2e04      	cmp	r6, #4
 8001a40:	d003      	beq.n	8001a4a <HAL_RCC_OscConfig+0x1f6>
 8001a42:	2e0c      	cmp	r6, #12
 8001a44:	d110      	bne.n	8001a68 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8001a46:	2f02      	cmp	r7, #2
 8001a48:	d10e      	bne.n	8001a68 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	0559      	lsls	r1, r3, #21
 8001a4e:	d503      	bpl.n	8001a58 <HAL_RCC_OscConfig+0x204>
 8001a50:	68eb      	ldr	r3, [r5, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f43f af02 	beq.w	800185c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a58:	6863      	ldr	r3, [r4, #4]
 8001a5a:	692a      	ldr	r2, [r5, #16]
 8001a5c:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001a60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a64:	6063      	str	r3, [r4, #4]
 8001a66:	e77e      	b.n	8001966 <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a68:	68eb      	ldr	r3, [r5, #12]
 8001a6a:	b17b      	cbz	r3, 8001a8c <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8001a6c:	6823      	ldr	r3, [r4, #0]
 8001a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a72:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a74:	f7fe fdbc 	bl	80005f0 <HAL_GetTick>
 8001a78:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	055a      	lsls	r2, r3, #21
 8001a7e:	d4eb      	bmi.n	8001a58 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a80:	f7fe fdb6 	bl	80005f0 <HAL_GetTick>
 8001a84:	1bc0      	subs	r0, r0, r7
 8001a86:	2802      	cmp	r0, #2
 8001a88:	d9f7      	bls.n	8001a7a <HAL_RCC_OscConfig+0x226>
 8001a8a:	e784      	b.n	8001996 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a92:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a94:	f7fe fdac 	bl	80005f0 <HAL_GetTick>
 8001a98:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a9a:	6823      	ldr	r3, [r4, #0]
 8001a9c:	055b      	lsls	r3, r3, #21
 8001a9e:	f57f af62 	bpl.w	8001966 <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa2:	f7fe fda5 	bl	80005f0 <HAL_GetTick>
 8001aa6:	1bc0      	subs	r0, r0, r7
 8001aa8:	2802      	cmp	r0, #2
 8001aaa:	d9f6      	bls.n	8001a9a <HAL_RCC_OscConfig+0x246>
 8001aac:	e773      	b.n	8001996 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aae:	696b      	ldr	r3, [r5, #20]
 8001ab0:	b19b      	cbz	r3, 8001ada <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8001ab2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001abe:	f7fe fd97 	bl	80005f0 <HAL_GetTick>
 8001ac2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ac4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001ac8:	079a      	lsls	r2, r3, #30
 8001aca:	f53f af50 	bmi.w	800196e <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ace:	f7fe fd8f 	bl	80005f0 <HAL_GetTick>
 8001ad2:	1bc0      	subs	r0, r0, r7
 8001ad4:	2802      	cmp	r0, #2
 8001ad6:	d9f5      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x270>
 8001ad8:	e75d      	b.n	8001996 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 8001ada:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001ade:	f023 0301 	bic.w	r3, r3, #1
 8001ae2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001ae6:	f7fe fd83 	bl	80005f0 <HAL_GetTick>
 8001aea:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aec:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001af0:	079b      	lsls	r3, r3, #30
 8001af2:	f57f af3c 	bpl.w	800196e <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af6:	f7fe fd7b 	bl	80005f0 <HAL_GetTick>
 8001afa:	1bc0      	subs	r0, r0, r7
 8001afc:	2802      	cmp	r0, #2
 8001afe:	d9f5      	bls.n	8001aec <HAL_RCC_OscConfig+0x298>
 8001b00:	e749      	b.n	8001996 <HAL_RCC_OscConfig+0x142>
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	080040c3 	.word	0x080040c3
 8001b0c:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b12:	00d8      	lsls	r0, r3, #3
 8001b14:	d429      	bmi.n	8001b6a <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	65a3      	str	r3, [r4, #88]	; 0x58
 8001b1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b28:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b2c:	4f71      	ldr	r7, [pc, #452]	; (8001cf4 <HAL_RCC_OscConfig+0x4a0>)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	05d9      	lsls	r1, r3, #23
 8001b32:	d51d      	bpl.n	8001b70 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b34:	68ab      	ldr	r3, [r5, #8]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d12b      	bne.n	8001b92 <HAL_RCC_OscConfig+0x33e>
 8001b3a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001b46:	f7fe fd53 	bl	80005f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b4e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b50:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001b54:	079b      	lsls	r3, r3, #30
 8001b56:	d542      	bpl.n	8001bde <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8001b58:	f1b8 0f00 	cmp.w	r8, #0
 8001b5c:	f43f af0b 	beq.w	8001976 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b66:	65a3      	str	r3, [r4, #88]	; 0x58
 8001b68:	e705      	b.n	8001976 <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 8001b6a:	f04f 0800 	mov.w	r8, #0
 8001b6e:	e7dd      	b.n	8001b2c <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b76:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001b78:	f7fe fd3a 	bl	80005f0 <HAL_GetTick>
 8001b7c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	05da      	lsls	r2, r3, #23
 8001b82:	d4d7      	bmi.n	8001b34 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b84:	f7fe fd34 	bl	80005f0 <HAL_GetTick>
 8001b88:	eba0 0009 	sub.w	r0, r0, r9
 8001b8c:	2802      	cmp	r0, #2
 8001b8e:	d9f6      	bls.n	8001b7e <HAL_RCC_OscConfig+0x32a>
 8001b90:	e701      	b.n	8001996 <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b92:	2b05      	cmp	r3, #5
 8001b94:	d106      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x350>
 8001b96:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001ba2:	e7ca      	b.n	8001b3a <HAL_RCC_OscConfig+0x2e6>
 8001ba4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001ba8:	f022 0201 	bic.w	r2, r2, #1
 8001bac:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001bb0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001bb4:	f022 0204 	bic.w	r2, r2, #4
 8001bb8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1c2      	bne.n	8001b46 <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 8001bc0:	f7fe fd16 	bl	80005f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc4:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001bc8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001bce:	0798      	lsls	r0, r3, #30
 8001bd0:	d5c2      	bpl.n	8001b58 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd2:	f7fe fd0d 	bl	80005f0 <HAL_GetTick>
 8001bd6:	1bc0      	subs	r0, r0, r7
 8001bd8:	4548      	cmp	r0, r9
 8001bda:	d9f6      	bls.n	8001bca <HAL_RCC_OscConfig+0x376>
 8001bdc:	e6db      	b.n	8001996 <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bde:	f7fe fd07 	bl	80005f0 <HAL_GetTick>
 8001be2:	1bc0      	subs	r0, r0, r7
 8001be4:	4548      	cmp	r0, r9
 8001be6:	d9b3      	bls.n	8001b50 <HAL_RCC_OscConfig+0x2fc>
 8001be8:	e6d5      	b.n	8001996 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001bec:	b19b      	cbz	r3, 8001c16 <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 8001bee:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001bfa:	f7fe fcf9 	bl	80005f0 <HAL_GetTick>
 8001bfe:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c00:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001c04:	079a      	lsls	r2, r3, #30
 8001c06:	f53f aeba 	bmi.w	800197e <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c0a:	f7fe fcf1 	bl	80005f0 <HAL_GetTick>
 8001c0e:	1bc0      	subs	r0, r0, r7
 8001c10:	2802      	cmp	r0, #2
 8001c12:	d9f5      	bls.n	8001c00 <HAL_RCC_OscConfig+0x3ac>
 8001c14:	e6bf      	b.n	8001996 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 8001c16:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001c1a:	f023 0301 	bic.w	r3, r3, #1
 8001c1e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001c22:	f7fe fce5 	bl	80005f0 <HAL_GetTick>
 8001c26:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c28:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001c2c:	079b      	lsls	r3, r3, #30
 8001c2e:	f57f aea6 	bpl.w	800197e <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c32:	f7fe fcdd 	bl	80005f0 <HAL_GetTick>
 8001c36:	1bc0      	subs	r0, r0, r7
 8001c38:	2802      	cmp	r0, #2
 8001c3a:	d9f5      	bls.n	8001c28 <HAL_RCC_OscConfig+0x3d4>
 8001c3c:	e6ab      	b.n	8001996 <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c3e:	2e0c      	cmp	r6, #12
 8001c40:	f43f ae0c 	beq.w	800185c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c44:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c4c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c4e:	d136      	bne.n	8001cbe <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 8001c50:	f7fe fcce 	bl	80005f0 <HAL_GetTick>
 8001c54:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	0198      	lsls	r0, r3, #6
 8001c5a:	d42a      	bmi.n	8001cb2 <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c5c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001c5e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001c60:	06db      	lsls	r3, r3, #27
 8001c62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001c66:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001c6c:	3a01      	subs	r2, #1
 8001c6e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001c72:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001c74:	0852      	lsrs	r2, r2, #1
 8001c76:	3a01      	subs	r2, #1
 8001c78:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001c7c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001c7e:	0852      	lsrs	r2, r2, #1
 8001c80:	3a01      	subs	r2, #1
 8001c82:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001c86:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c90:	68e3      	ldr	r3, [r4, #12]
 8001c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c96:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001c98:	f7fe fcaa 	bl	80005f0 <HAL_GetTick>
 8001c9c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9e:	6823      	ldr	r3, [r4, #0]
 8001ca0:	0199      	lsls	r1, r3, #6
 8001ca2:	f53f ae70 	bmi.w	8001986 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca6:	f7fe fca3 	bl	80005f0 <HAL_GetTick>
 8001caa:	1b40      	subs	r0, r0, r5
 8001cac:	2802      	cmp	r0, #2
 8001cae:	d9f6      	bls.n	8001c9e <HAL_RCC_OscConfig+0x44a>
 8001cb0:	e671      	b.n	8001996 <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb2:	f7fe fc9d 	bl	80005f0 <HAL_GetTick>
 8001cb6:	1b80      	subs	r0, r0, r6
 8001cb8:	2802      	cmp	r0, #2
 8001cba:	d9cc      	bls.n	8001c56 <HAL_RCC_OscConfig+0x402>
 8001cbc:	e66b      	b.n	8001996 <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001cbe:	6823      	ldr	r3, [r4, #0]
 8001cc0:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001cc2:	bf5e      	ittt	pl
 8001cc4:	68e3      	ldrpl	r3, [r4, #12]
 8001cc6:	f023 0303 	bicpl.w	r3, r3, #3
 8001cca:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001ccc:	68e3      	ldr	r3, [r4, #12]
 8001cce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd6:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001cd8:	f7fe fc8a 	bl	80005f0 <HAL_GetTick>
 8001cdc:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	019b      	lsls	r3, r3, #6
 8001ce2:	f57f ae50 	bpl.w	8001986 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce6:	f7fe fc83 	bl	80005f0 <HAL_GetTick>
 8001cea:	1b40      	subs	r0, r0, r5
 8001cec:	2802      	cmp	r0, #2
 8001cee:	d9f6      	bls.n	8001cde <HAL_RCC_OscConfig+0x48a>
 8001cf0:	e651      	b.n	8001996 <HAL_RCC_OscConfig+0x142>
 8001cf2:	bf00      	nop
 8001cf4:	40007000 	.word	0x40007000

08001cf8 <HAL_RCC_ClockConfig>:
{
 8001cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cfc:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001cfe:	4604      	mov	r4, r0
 8001d00:	b910      	cbnz	r0, 8001d08 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001d02:	2001      	movs	r0, #1
 8001d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d08:	4a40      	ldr	r2, [pc, #256]	; (8001e0c <HAL_RCC_ClockConfig+0x114>)
 8001d0a:	6813      	ldr	r3, [r2, #0]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	428b      	cmp	r3, r1
 8001d12:	d329      	bcc.n	8001d68 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d14:	6823      	ldr	r3, [r4, #0]
 8001d16:	07d9      	lsls	r1, r3, #31
 8001d18:	d431      	bmi.n	8001d7e <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d1a:	6821      	ldr	r1, [r4, #0]
 8001d1c:	078a      	lsls	r2, r1, #30
 8001d1e:	d45b      	bmi.n	8001dd8 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d20:	4a3a      	ldr	r2, [pc, #232]	; (8001e0c <HAL_RCC_ClockConfig+0x114>)
 8001d22:	6813      	ldr	r3, [r2, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d35d      	bcc.n	8001de8 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2c:	f011 0f04 	tst.w	r1, #4
 8001d30:	4d37      	ldr	r5, [pc, #220]	; (8001e10 <HAL_RCC_ClockConfig+0x118>)
 8001d32:	d164      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d34:	070b      	lsls	r3, r1, #28
 8001d36:	d506      	bpl.n	8001d46 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d38:	68ab      	ldr	r3, [r5, #8]
 8001d3a:	6922      	ldr	r2, [r4, #16]
 8001d3c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001d40:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001d44:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d46:	f7ff fd31 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 8001d4a:	68ab      	ldr	r3, [r5, #8]
 8001d4c:	4a31      	ldr	r2, [pc, #196]	; (8001e14 <HAL_RCC_ClockConfig+0x11c>)
 8001d4e:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d56:	5cd3      	ldrb	r3, [r2, r3]
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	40d8      	lsrs	r0, r3
 8001d5e:	4b2e      	ldr	r3, [pc, #184]	; (8001e18 <HAL_RCC_ClockConfig+0x120>)
 8001d60:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8001d62:	2000      	movs	r0, #0
 8001d64:	f7fe bc14 	b.w	8000590 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d68:	6813      	ldr	r3, [r2, #0]
 8001d6a:	f023 0307 	bic.w	r3, r3, #7
 8001d6e:	430b      	orrs	r3, r1
 8001d70:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	6813      	ldr	r3, [r2, #0]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	4299      	cmp	r1, r3
 8001d7a:	d1c2      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xa>
 8001d7c:	e7ca      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d7e:	6862      	ldr	r2, [r4, #4]
 8001d80:	4d23      	ldr	r5, [pc, #140]	; (8001e10 <HAL_RCC_ClockConfig+0x118>)
 8001d82:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d84:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d86:	d11b      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d88:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d8c:	d0b9      	beq.n	8001d02 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d8e:	68ab      	ldr	r3, [r5, #8]
 8001d90:	f023 0303 	bic.w	r3, r3, #3
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001d98:	f7fe fc2a 	bl	80005f0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001da0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da2:	68ab      	ldr	r3, [r5, #8]
 8001da4:	6862      	ldr	r2, [r4, #4]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001dae:	d0b4      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db0:	f7fe fc1e 	bl	80005f0 <HAL_GetTick>
 8001db4:	1bc0      	subs	r0, r0, r7
 8001db6:	4540      	cmp	r0, r8
 8001db8:	d9f3      	bls.n	8001da2 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8001dba:	2003      	movs	r0, #3
}
 8001dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc0:	2a02      	cmp	r2, #2
 8001dc2:	d102      	bne.n	8001dca <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dc4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001dc8:	e7e0      	b.n	8001d8c <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dca:	b912      	cbnz	r2, 8001dd2 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dcc:	f013 0f02 	tst.w	r3, #2
 8001dd0:	e7dc      	b.n	8001d8c <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001dd6:	e7d9      	b.n	8001d8c <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <HAL_RCC_ClockConfig+0x118>)
 8001dda:	68a0      	ldr	r0, [r4, #8]
 8001ddc:	6893      	ldr	r3, [r2, #8]
 8001dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001de2:	4303      	orrs	r3, r0
 8001de4:	6093      	str	r3, [r2, #8]
 8001de6:	e79b      	b.n	8001d20 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de8:	6813      	ldr	r3, [r2, #0]
 8001dea:	f023 0307 	bic.w	r3, r3, #7
 8001dee:	4333      	orrs	r3, r6
 8001df0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df2:	6813      	ldr	r3, [r2, #0]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	429e      	cmp	r6, r3
 8001dfa:	d182      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xa>
 8001dfc:	e796      	b.n	8001d2c <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dfe:	68ab      	ldr	r3, [r5, #8]
 8001e00:	68e2      	ldr	r2, [r4, #12]
 8001e02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e06:	4313      	orrs	r3, r2
 8001e08:	60ab      	str	r3, [r5, #8]
 8001e0a:	e793      	b.n	8001d34 <HAL_RCC_ClockConfig+0x3c>
 8001e0c:	40022000 	.word	0x40022000
 8001e10:	40021000 	.word	0x40021000
 8001e14:	080040c3 	.word	0x080040c3
 8001e18:	20000000 	.word	0x20000000

08001e1c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001e1e:	4a06      	ldr	r2, [pc, #24]	; (8001e38 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001e26:	5cd3      	ldrb	r3, [r2, r3]
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e2a:	6810      	ldr	r0, [r2, #0]
 8001e2c:	f003 031f 	and.w	r3, r3, #31
}
 8001e30:	40d8      	lsrs	r0, r3
 8001e32:	4770      	bx	lr
 8001e34:	40021000 	.word	0x40021000
 8001e38:	080040d3 	.word	0x080040d3
 8001e3c:	20000000 	.word	0x20000000

08001e40 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001e42:	4a06      	ldr	r2, [pc, #24]	; (8001e5c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001e4a:	5cd3      	ldrb	r3, [r2, r3]
 8001e4c:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e4e:	6810      	ldr	r0, [r2, #0]
 8001e50:	f003 031f 	and.w	r3, r3, #31
}
 8001e54:	40d8      	lsrs	r0, r3
 8001e56:	4770      	bx	lr
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	080040d3 	.word	0x080040d3
 8001e60:	20000000 	.word	0x20000000

08001e64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001e66:	4b44      	ldr	r3, [pc, #272]	; (8001f78 <RCCEx_PLLSAI1_Config+0x114>)
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	f012 0f03 	tst.w	r2, #3
{
 8001e6e:	4605      	mov	r5, r0
 8001e70:	460e      	mov	r6, r1
 8001e72:	461c      	mov	r4, r3
 8001e74:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001e76:	d039      	beq.n	8001eec <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	f002 0203 	and.w	r2, r2, #3
 8001e7e:	4282      	cmp	r2, r0
 8001e80:	d14b      	bne.n	8001f1a <RCCEx_PLLSAI1_Config+0xb6>
       ||
 8001e82:	2a00      	cmp	r2, #0
 8001e84:	d049      	beq.n	8001f1a <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001e86:	68db      	ldr	r3, [r3, #12]
       ||
 8001e88:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001e8a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001e8e:	3301      	adds	r3, #1
       ||
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d142      	bne.n	8001f1a <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001e94:	6823      	ldr	r3, [r4, #0]
 8001e96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e9a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e9c:	f7fe fba8 	bl	80005f0 <HAL_GetTick>
 8001ea0:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001ea2:	6823      	ldr	r3, [r4, #0]
 8001ea4:	011a      	lsls	r2, r3, #4
 8001ea6:	d441      	bmi.n	8001f2c <RCCEx_PLLSAI1_Config+0xc8>
 8001ea8:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001eaa:	2e00      	cmp	r6, #0
 8001eac:	d045      	beq.n	8001f3a <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001eae:	2e01      	cmp	r6, #1
 8001eb0:	d14f      	bne.n	8001f52 <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001eb2:	6922      	ldr	r2, [r4, #16]
 8001eb4:	6928      	ldr	r0, [r5, #16]
 8001eb6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001eba:	0840      	lsrs	r0, r0, #1
 8001ebc:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001ec0:	3801      	subs	r0, #1
 8001ec2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001ec6:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001eca:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001ecc:	6823      	ldr	r3, [r4, #0]
 8001ece:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ed2:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed4:	f7fe fb8c 	bl	80005f0 <HAL_GetTick>
 8001ed8:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	d545      	bpl.n	8001f6c <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001ee0:	6923      	ldr	r3, [r4, #16]
 8001ee2:	69aa      	ldr	r2, [r5, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	6123      	str	r3, [r4, #16]
 8001ee8:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8001eec:	2802      	cmp	r0, #2
 8001eee:	d010      	beq.n	8001f12 <RCCEx_PLLSAI1_Config+0xae>
 8001ef0:	2803      	cmp	r0, #3
 8001ef2:	d014      	beq.n	8001f1e <RCCEx_PLLSAI1_Config+0xba>
 8001ef4:	2801      	cmp	r0, #1
 8001ef6:	d110      	bne.n	8001f1a <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	079f      	lsls	r7, r3, #30
 8001efc:	d5f5      	bpl.n	8001eea <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001efe:	68e3      	ldr	r3, [r4, #12]
 8001f00:	686a      	ldr	r2, [r5, #4]
 8001f02:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001f06:	3a01      	subs	r2, #1
 8001f08:	4318      	orrs	r0, r3
 8001f0a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001f0e:	60e0      	str	r0, [r4, #12]
 8001f10:	e7c0      	b.n	8001e94 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001f18:	d1f1      	bne.n	8001efe <RCCEx_PLLSAI1_Config+0x9a>
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	0391      	lsls	r1, r2, #14
 8001f22:	d4ec      	bmi.n	8001efe <RCCEx_PLLSAI1_Config+0x9a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001f2a:	e7f5      	b.n	8001f18 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f2c:	f7fe fb60 	bl	80005f0 <HAL_GetTick>
 8001f30:	1bc0      	subs	r0, r0, r7
 8001f32:	2802      	cmp	r0, #2
 8001f34:	d9b5      	bls.n	8001ea2 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001f36:	2003      	movs	r0, #3
 8001f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f3a:	6922      	ldr	r2, [r4, #16]
 8001f3c:	68e9      	ldr	r1, [r5, #12]
 8001f3e:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8001f42:	06c9      	lsls	r1, r1, #27
 8001f44:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8001f48:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001f4c:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f4e:	6123      	str	r3, [r4, #16]
 8001f50:	e7bc      	b.n	8001ecc <RCCEx_PLLSAI1_Config+0x68>
 8001f52:	6923      	ldr	r3, [r4, #16]
 8001f54:	6968      	ldr	r0, [r5, #20]
 8001f56:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001f5a:	0840      	lsrs	r0, r0, #1
 8001f5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001f60:	3801      	subs	r0, #1
 8001f62:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001f66:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001f6a:	e7f0      	b.n	8001f4e <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f6c:	f7fe fb40 	bl	80005f0 <HAL_GetTick>
 8001f70:	1b80      	subs	r0, r0, r6
 8001f72:	2802      	cmp	r0, #2
 8001f74:	d9b1      	bls.n	8001eda <RCCEx_PLLSAI1_Config+0x76>
 8001f76:	e7de      	b.n	8001f36 <RCCEx_PLLSAI1_Config+0xd2>
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCCEx_PeriphCLKConfig>:
{
 8001f7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f80:	6805      	ldr	r5, [r0, #0]
 8001f82:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8001f86:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f88:	d00e      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001f8a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001f8c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001f90:	d053      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001f92:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001f96:	d055      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8001f98:	2900      	cmp	r1, #0
 8001f9a:	d15e      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0xde>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f9c:	3004      	adds	r0, #4
 8001f9e:	f7ff ff61 	bl	8001e64 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8001fa2:	4605      	mov	r5, r0
 8001fa4:	2800      	cmp	r0, #0
 8001fa6:	d04d      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fa8:	6823      	ldr	r3, [r4, #0]
 8001faa:	039e      	lsls	r6, r3, #14
 8001fac:	d563      	bpl.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fae:	4e93      	ldr	r6, [pc, #588]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fb0:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001fb2:	00d8      	lsls	r0, r3, #3
 8001fb4:	f140 8116 	bpl.w	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    FlagStatus       pwrclkchanged = RESET;
 8001fb8:	2700      	movs	r7, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fba:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8002200 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8001fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8001fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc6:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8001fca:	f7fe fb11 	bl	80005f0 <HAL_GetTick>
 8001fce:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8001fd4:	05d9      	lsls	r1, r3, #23
 8001fd6:	d542      	bpl.n	800205e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    if(ret == HAL_OK)
 8001fd8:	2d00      	cmp	r5, #0
 8001fda:	d147      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0xf0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fdc:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fe0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001fe4:	d014      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8001fe6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d011      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x94>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fec:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ff0:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001ff4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ff8:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ffc:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002004:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002008:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800200c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002010:	07da      	lsls	r2, r3, #31
 8002012:	d509      	bpl.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xac>
        tickstart = HAL_GetTick();
 8002014:	f7fe faec 	bl	80005f0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002018:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800201c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800201e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002022:	079b      	lsls	r3, r3, #30
 8002024:	f140 80c0 	bpl.w	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002028:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800202c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800202e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8002038:	e018      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800203a:	4a70      	ldr	r2, [pc, #448]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800203c:	68d3      	ldr	r3, [r2, #12]
 800203e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002042:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002044:	4a6d      	ldr	r2, [pc, #436]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002046:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002048:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800204c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002050:	430b      	orrs	r3, r1
 8002052:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002056:	2500      	movs	r5, #0
 8002058:	e7a6      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 800205a:	2501      	movs	r5, #1
 800205c:	e7a4      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205e:	f7fe fac7 	bl	80005f0 <HAL_GetTick>
 8002062:	eba0 0009 	sub.w	r0, r0, r9
 8002066:	2802      	cmp	r0, #2
 8002068:	d9b2      	bls.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x54>
        ret = HAL_TIMEOUT;
 800206a:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800206c:	b11f      	cbz	r7, 8002076 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
 800206e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002074:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002076:	6823      	ldr	r3, [r4, #0]
 8002078:	07df      	lsls	r7, r3, #31
 800207a:	d508      	bpl.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800207c:	495f      	ldr	r1, [pc, #380]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800207e:	6a20      	ldr	r0, [r4, #32]
 8002080:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002084:	f022 0203 	bic.w	r2, r2, #3
 8002088:	4302      	orrs	r2, r0
 800208a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800208e:	079e      	lsls	r6, r3, #30
 8002090:	d508      	bpl.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002092:	495a      	ldr	r1, [pc, #360]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002094:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002096:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800209a:	f022 020c 	bic.w	r2, r2, #12
 800209e:	4302      	orrs	r2, r0
 80020a0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020a4:	0698      	lsls	r0, r3, #26
 80020a6:	d508      	bpl.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020a8:	4954      	ldr	r1, [pc, #336]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80020ac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80020b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80020b4:	4302      	orrs	r2, r0
 80020b6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020ba:	0599      	lsls	r1, r3, #22
 80020bc:	d508      	bpl.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020be:	494f      	ldr	r1, [pc, #316]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020c0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80020c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80020c6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80020ca:	4302      	orrs	r2, r0
 80020cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020d0:	055a      	lsls	r2, r3, #21
 80020d2:	d508      	bpl.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020d4:	4949      	ldr	r1, [pc, #292]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80020d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80020dc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80020e0:	4302      	orrs	r2, r0
 80020e2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020e6:	065f      	lsls	r7, r3, #25
 80020e8:	d508      	bpl.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ea:	4944      	ldr	r1, [pc, #272]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020ec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80020ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80020f2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80020f6:	4302      	orrs	r2, r0
 80020f8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020fc:	05de      	lsls	r6, r3, #23
 80020fe:	d508      	bpl.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002100:	493e      	ldr	r1, [pc, #248]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002102:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002104:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002108:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800210c:	4302      	orrs	r2, r0
 800210e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002112:	0498      	lsls	r0, r3, #18
 8002114:	d50f      	bpl.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002116:	4a39      	ldr	r2, [pc, #228]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002118:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800211a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800211e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002122:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002124:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800212c:	d144      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800212e:	68d3      	ldr	r3, [r2, #12]
 8002130:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002134:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	0359      	lsls	r1, r3, #13
 800213a:	d50f      	bpl.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800213c:	4a2f      	ldr	r2, [pc, #188]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800213e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002140:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002144:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002148:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800214a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800214e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002152:	d13c      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002154:	68d3      	ldr	r3, [r2, #12]
 8002156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800215a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800215c:	6823      	ldr	r3, [r4, #0]
 800215e:	045a      	lsls	r2, r3, #17
 8002160:	d512      	bpl.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002162:	4926      	ldr	r1, [pc, #152]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002164:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002166:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800216a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800216e:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002170:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002178:	d106      	bne.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800217a:	2102      	movs	r1, #2
 800217c:	1d20      	adds	r0, r4, #4
 800217e:	f7ff fe71 	bl	8001e64 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002182:	2800      	cmp	r0, #0
 8002184:	bf18      	it	ne
 8002186:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	041b      	lsls	r3, r3, #16
 800218c:	d508      	bpl.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800218e:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002190:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002192:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002196:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800219a:	430b      	orrs	r3, r1
 800219c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80021a0:	4628      	mov	r0, r5
 80021a2:	b003      	add	sp, #12
 80021a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a8:	f7fe fa22 	bl	80005f0 <HAL_GetTick>
 80021ac:	eba0 0008 	sub.w	r0, r0, r8
 80021b0:	4548      	cmp	r0, r9
 80021b2:	f67f af34 	bls.w	800201e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80021b6:	e758      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0xee>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021b8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80021bc:	d1bb      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021be:	2101      	movs	r1, #1
 80021c0:	1d20      	adds	r0, r4, #4
 80021c2:	f7ff fe4f 	bl	8001e64 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80021c6:	2800      	cmp	r0, #0
 80021c8:	bf18      	it	ne
 80021ca:	4605      	movne	r5, r0
 80021cc:	e7b3      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80021ce:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80021d2:	d1c3      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021d4:	2101      	movs	r1, #1
 80021d6:	1d20      	adds	r0, r4, #4
 80021d8:	f7ff fe44 	bl	8001e64 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80021dc:	2800      	cmp	r0, #0
 80021de:	bf18      	it	ne
 80021e0:	4605      	movne	r5, r0
 80021e2:	e7bb      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e4:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80021e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ea:	65b3      	str	r3, [r6, #88]	; 0x58
 80021ec:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021f6:	2701      	movs	r7, #1
 80021f8:	e6df      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x3e>
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000
 8002200:	40007000 	.word	0x40007000

08002204 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002204:	4a02      	ldr	r2, [pc, #8]	; (8002210 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8002206:	6813      	ldr	r3, [r2, #0]
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4770      	bx	lr
 8002210:	40021000 	.word	0x40021000

08002214 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002214:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002216:	69c1      	ldr	r1, [r0, #28]
{
 8002218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800221c:	6883      	ldr	r3, [r0, #8]
 800221e:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002220:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002222:	4303      	orrs	r3, r0
 8002224:	6960      	ldr	r0, [r4, #20]
 8002226:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002228:	4882      	ldr	r0, [pc, #520]	; (8002434 <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800222a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800222c:	4028      	ands	r0, r5
 800222e:	4303      	orrs	r3, r0
 8002230:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002232:	6853      	ldr	r3, [r2, #4]
 8002234:	68e0      	ldr	r0, [r4, #12]
 8002236:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800223a:	4303      	orrs	r3, r0
 800223c:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800223e:	4b7e      	ldr	r3, [pc, #504]	; (8002438 <UART_SetConfig+0x224>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002240:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002242:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002244:	bf1c      	itt	ne
 8002246:	6a23      	ldrne	r3, [r4, #32]
 8002248:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800224a:	6893      	ldr	r3, [r2, #8]
 800224c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002250:	4303      	orrs	r3, r0
 8002252:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002254:	4b79      	ldr	r3, [pc, #484]	; (800243c <UART_SetConfig+0x228>)
 8002256:	429a      	cmp	r2, r3
 8002258:	d114      	bne.n	8002284 <UART_SetConfig+0x70>
 800225a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800225e:	4a78      	ldr	r2, [pc, #480]	; (8002440 <UART_SetConfig+0x22c>)
 8002260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002264:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002268:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800226c:	5cd3      	ldrb	r3, [r2, r3]
 800226e:	f040 80aa 	bne.w	80023c6 <UART_SetConfig+0x1b2>
  {
    switch (clocksource)
 8002272:	2b08      	cmp	r3, #8
 8002274:	d820      	bhi.n	80022b8 <UART_SetConfig+0xa4>
 8002276:	e8df f003 	tbb	[pc, r3]
 800227a:	8f77      	.short	0x8f77
 800227c:	1f9b1f92 	.word	0x1f9b1f92
 8002280:	1f1f      	.short	0x1f1f
 8002282:	9e          	.byte	0x9e
 8002283:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002284:	4b6f      	ldr	r3, [pc, #444]	; (8002444 <UART_SetConfig+0x230>)
 8002286:	429a      	cmp	r2, r3
 8002288:	d107      	bne.n	800229a <UART_SetConfig+0x86>
 800228a:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800228e:	4a6e      	ldr	r2, [pc, #440]	; (8002448 <UART_SetConfig+0x234>)
 8002290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	e7e6      	b.n	8002268 <UART_SetConfig+0x54>
 800229a:	4b67      	ldr	r3, [pc, #412]	; (8002438 <UART_SetConfig+0x224>)
 800229c:	429a      	cmp	r2, r3
 800229e:	f040 80c2 	bne.w	8002426 <UART_SetConfig+0x212>
 80022a2:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 80022a6:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80022aa:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 80022ae:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80022b2:	d02a      	beq.n	800230a <UART_SetConfig+0xf6>
 80022b4:	d806      	bhi.n	80022c4 <UART_SetConfig+0xb0>
 80022b6:	b315      	cbz	r5, 80022fe <UART_SetConfig+0xea>
        ret = HAL_ERROR;
 80022b8:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80022be:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80022c0:	4610      	mov	r0, r2
 80022c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022c4:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80022c8:	d006      	beq.n	80022d8 <UART_SetConfig+0xc4>
 80022ca:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 80022ce:	d1f3      	bne.n	80022b8 <UART_SetConfig+0xa4>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80022d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022d4:	2508      	movs	r5, #8
 80022d6:	e001      	b.n	80022dc <UART_SetConfig+0xc8>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80022d8:	485c      	ldr	r0, [pc, #368]	; (800244c <UART_SetConfig+0x238>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022da:	2502      	movs	r5, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80022dc:	6862      	ldr	r2, [r4, #4]
 80022de:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80022e2:	4283      	cmp	r3, r0
 80022e4:	d8e8      	bhi.n	80022b8 <UART_SetConfig+0xa4>
 80022e6:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80022ea:	d8e5      	bhi.n	80022b8 <UART_SetConfig+0xa4>
        switch (clocksource)
 80022ec:	2d08      	cmp	r5, #8
 80022ee:	d838      	bhi.n	8002362 <UART_SetConfig+0x14e>
 80022f0:	e8df f005 	tbb	[pc, r5]
 80022f4:	3726370f 	.word	0x3726370f
 80022f8:	3737372e 	.word	0x3737372e
 80022fc:	31          	.byte	0x31
 80022fd:	00          	.byte	0x00
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80022fe:	f7ff fd8d 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 8002302:	2800      	cmp	r0, #0
 8002304:	d1ea      	bne.n	80022dc <UART_SetConfig+0xc8>
 8002306:	4602      	mov	r2, r0
 8002308:	e7d7      	b.n	80022ba <UART_SetConfig+0xa6>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800230a:	f7ff fa4f 	bl	80017ac <HAL_RCC_GetSysClockFreq>
        break;
 800230e:	2504      	movs	r5, #4
 8002310:	e7f7      	b.n	8002302 <UART_SetConfig+0xee>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002312:	f7ff fd83 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002316:	6862      	ldr	r2, [r4, #4]
 8002318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800231c:	0856      	lsrs	r6, r2, #1
 800231e:	2700      	movs	r7, #0
 8002320:	fbe1 6700 	umlal	r6, r7, r1, r0
 8002324:	2300      	movs	r3, #0
 8002326:	4630      	mov	r0, r6
 8002328:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800232a:	f7fd ffa9 	bl	8000280 <__aeabi_uldivmod>
            break;
 800232e:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002330:	4b47      	ldr	r3, [pc, #284]	; (8002450 <UART_SetConfig+0x23c>)
 8002332:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002336:	4299      	cmp	r1, r3
 8002338:	d8be      	bhi.n	80022b8 <UART_SetConfig+0xa4>
          huart->Instance->BRR = usartdiv;
 800233a:	6823      	ldr	r3, [r4, #0]
 800233c:	60d8      	str	r0, [r3, #12]
 800233e:	e7bc      	b.n	80022ba <UART_SetConfig+0xa6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002340:	4844      	ldr	r0, [pc, #272]	; (8002454 <UART_SetConfig+0x240>)
 8002342:	0855      	lsrs	r5, r2, #1
 8002344:	2300      	movs	r3, #0
 8002346:	2100      	movs	r1, #0
 8002348:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800234a:	f141 0100 	adc.w	r1, r1, #0
 800234e:	e7ec      	b.n	800232a <UART_SetConfig+0x116>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002350:	f7ff fa2c 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 8002354:	e7df      	b.n	8002316 <UART_SetConfig+0x102>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002356:	0850      	lsrs	r0, r2, #1
 8002358:	2100      	movs	r1, #0
 800235a:	2300      	movs	r3, #0
 800235c:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002360:	e7f3      	b.n	800234a <UART_SetConfig+0x136>
            ret = HAL_ERROR;
 8002362:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002364:	2000      	movs	r0, #0
 8002366:	e7e3      	b.n	8002330 <UART_SetConfig+0x11c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002368:	f7ff fd58 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800236c:	6861      	ldr	r1, [r4, #4]
 800236e:	084a      	lsrs	r2, r1, #1
 8002370:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002374:	fbb3 f3f1 	udiv	r3, r3, r1
 8002378:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800237a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800237c:	f1a3 0010 	sub.w	r0, r3, #16
 8002380:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002384:	4288      	cmp	r0, r1
 8002386:	d897      	bhi.n	80022b8 <UART_SetConfig+0xa4>
      brrtemp = usartdiv & 0xFFF0U;
 8002388:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 800238c:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800238e:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002392:	430b      	orrs	r3, r1
 8002394:	60c3      	str	r3, [r0, #12]
 8002396:	e790      	b.n	80022ba <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002398:	f7ff fd52 	bl	8001e40 <HAL_RCC_GetPCLK2Freq>
 800239c:	e7e6      	b.n	800236c <UART_SetConfig+0x158>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800239e:	6860      	ldr	r0, [r4, #4]
 80023a0:	0843      	lsrs	r3, r0, #1
 80023a2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80023a6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80023aa:	fbb3 f3f0 	udiv	r3, r3, r0
 80023ae:	e7e3      	b.n	8002378 <UART_SetConfig+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80023b0:	f7ff f9fc 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 80023b4:	e7da      	b.n	800236c <UART_SetConfig+0x158>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80023b6:	6860      	ldr	r0, [r4, #4]
 80023b8:	0843      	lsrs	r3, r0, #1
 80023ba:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80023be:	e7f4      	b.n	80023aa <UART_SetConfig+0x196>
        ret = HAL_ERROR;
 80023c0:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e7da      	b.n	800237c <UART_SetConfig+0x168>
    switch (clocksource)
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d830      	bhi.n	800242c <UART_SetConfig+0x218>
 80023ca:	e8df f003 	tbb	[pc, r3]
 80023ce:	1805      	.short	0x1805
 80023d0:	2f242f1b 	.word	0x2f242f1b
 80023d4:	2f2f      	.short	0x2f2f
 80023d6:	27          	.byte	0x27
 80023d7:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80023d8:	f7ff fd20 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80023dc:	6862      	ldr	r2, [r4, #4]
 80023de:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80023e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80023e6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80023e8:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023ea:	f1a3 0010 	sub.w	r0, r3, #16
 80023ee:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80023f2:	4288      	cmp	r0, r1
 80023f4:	f63f af60 	bhi.w	80022b8 <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 80023f8:	6821      	ldr	r1, [r4, #0]
 80023fa:	60cb      	str	r3, [r1, #12]
 80023fc:	e75d      	b.n	80022ba <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80023fe:	f7ff fd1f 	bl	8001e40 <HAL_RCC_GetPCLK2Freq>
 8002402:	e7eb      	b.n	80023dc <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002404:	6860      	ldr	r0, [r4, #4]
 8002406:	0843      	lsrs	r3, r0, #1
 8002408:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800240c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002410:	fbb3 f3f0 	udiv	r3, r3, r0
 8002414:	e7e7      	b.n	80023e6 <UART_SetConfig+0x1d2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002416:	f7ff f9c9 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 800241a:	e7df      	b.n	80023dc <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800241c:	6860      	ldr	r0, [r4, #4]
 800241e:	0843      	lsrs	r3, r0, #1
 8002420:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002424:	e7f4      	b.n	8002410 <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002426:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800242a:	d0c9      	beq.n	80023c0 <UART_SetConfig+0x1ac>
        ret = HAL_ERROR;
 800242c:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800242e:	2300      	movs	r3, #0
 8002430:	e7db      	b.n	80023ea <UART_SetConfig+0x1d6>
 8002432:	bf00      	nop
 8002434:	efff69f3 	.word	0xefff69f3
 8002438:	40008000 	.word	0x40008000
 800243c:	40013800 	.word	0x40013800
 8002440:	08003f1c 	.word	0x08003f1c
 8002444:	40004400 	.word	0x40004400
 8002448:	08003f20 	.word	0x08003f20
 800244c:	00f42400 	.word	0x00f42400
 8002450:	000ffcff 	.word	0x000ffcff
 8002454:	f4240000 	.word	0xf4240000

08002458 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002458:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800245a:	07da      	lsls	r2, r3, #31
{
 800245c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800245e:	d506      	bpl.n	800246e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002460:	6801      	ldr	r1, [r0, #0]
 8002462:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002464:	684a      	ldr	r2, [r1, #4]
 8002466:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800246a:	4322      	orrs	r2, r4
 800246c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800246e:	079c      	lsls	r4, r3, #30
 8002470:	d506      	bpl.n	8002480 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002472:	6801      	ldr	r1, [r0, #0]
 8002474:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002476:	684a      	ldr	r2, [r1, #4]
 8002478:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800247c:	4322      	orrs	r2, r4
 800247e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002480:	0759      	lsls	r1, r3, #29
 8002482:	d506      	bpl.n	8002492 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002484:	6801      	ldr	r1, [r0, #0]
 8002486:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002488:	684a      	ldr	r2, [r1, #4]
 800248a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800248e:	4322      	orrs	r2, r4
 8002490:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002492:	071a      	lsls	r2, r3, #28
 8002494:	d506      	bpl.n	80024a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002496:	6801      	ldr	r1, [r0, #0]
 8002498:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800249a:	684a      	ldr	r2, [r1, #4]
 800249c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024a0:	4322      	orrs	r2, r4
 80024a2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024a4:	06dc      	lsls	r4, r3, #27
 80024a6:	d506      	bpl.n	80024b6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80024a8:	6801      	ldr	r1, [r0, #0]
 80024aa:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80024ac:	688a      	ldr	r2, [r1, #8]
 80024ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024b2:	4322      	orrs	r2, r4
 80024b4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80024b6:	0699      	lsls	r1, r3, #26
 80024b8:	d506      	bpl.n	80024c8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80024ba:	6801      	ldr	r1, [r0, #0]
 80024bc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80024be:	688a      	ldr	r2, [r1, #8]
 80024c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024c4:	4322      	orrs	r2, r4
 80024c6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80024c8:	065a      	lsls	r2, r3, #25
 80024ca:	d50f      	bpl.n	80024ec <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80024cc:	6801      	ldr	r1, [r0, #0]
 80024ce:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80024d0:	684a      	ldr	r2, [r1, #4]
 80024d2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80024d6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80024d8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80024dc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80024de:	d105      	bne.n	80024ec <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80024e0:	684a      	ldr	r2, [r1, #4]
 80024e2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80024e4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80024e8:	4322      	orrs	r2, r4
 80024ea:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80024ec:	061b      	lsls	r3, r3, #24
 80024ee:	d506      	bpl.n	80024fe <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024f0:	6802      	ldr	r2, [r0, #0]
 80024f2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80024f4:	6853      	ldr	r3, [r2, #4]
 80024f6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80024fa:	430b      	orrs	r3, r1
 80024fc:	6053      	str	r3, [r2, #4]
 80024fe:	bd10      	pop	{r4, pc}

08002500 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002504:	9d06      	ldr	r5, [sp, #24]
 8002506:	4604      	mov	r4, r0
 8002508:	460f      	mov	r7, r1
 800250a:	4616      	mov	r6, r2
 800250c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800250e:	6821      	ldr	r1, [r4, #0]
 8002510:	69ca      	ldr	r2, [r1, #28]
 8002512:	ea37 0302 	bics.w	r3, r7, r2
 8002516:	bf0c      	ite	eq
 8002518:	2201      	moveq	r2, #1
 800251a:	2200      	movne	r2, #0
 800251c:	42b2      	cmp	r2, r6
 800251e:	d002      	beq.n	8002526 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002520:	2000      	movs	r0, #0
}
 8002522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002526:	1c6b      	adds	r3, r5, #1
 8002528:	d0f2      	beq.n	8002510 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800252a:	b99d      	cbnz	r5, 8002554 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800252c:	6823      	ldr	r3, [r4, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002534:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	f022 0201 	bic.w	r2, r2, #1
 800253c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800253e:	2320      	movs	r3, #32
 8002540:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8002544:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8002548:	2300      	movs	r3, #0
 800254a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800254e:	2003      	movs	r0, #3
 8002550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002554:	f7fe f84c 	bl	80005f0 <HAL_GetTick>
 8002558:	eba0 0008 	sub.w	r0, r0, r8
 800255c:	4285      	cmp	r5, r0
 800255e:	d2d6      	bcs.n	800250e <UART_WaitOnFlagUntilTimeout+0xe>
 8002560:	e7e4      	b.n	800252c <UART_WaitOnFlagUntilTimeout+0x2c>

08002562 <HAL_UART_Transmit>:
{
 8002562:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002566:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002568:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800256c:	2b20      	cmp	r3, #32
{
 800256e:	4604      	mov	r4, r0
 8002570:	460d      	mov	r5, r1
 8002572:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002574:	d14a      	bne.n	800260c <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8002576:	2900      	cmp	r1, #0
 8002578:	d046      	beq.n	8002608 <HAL_UART_Transmit+0xa6>
 800257a:	2a00      	cmp	r2, #0
 800257c:	d044      	beq.n	8002608 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 800257e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002582:	2b01      	cmp	r3, #1
 8002584:	d042      	beq.n	800260c <HAL_UART_Transmit+0xaa>
 8002586:	2301      	movs	r3, #1
 8002588:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258c:	2300      	movs	r3, #0
 800258e:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002590:	2321      	movs	r3, #33	; 0x21
 8002592:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8002596:	f7fe f82b 	bl	80005f0 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800259a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800259e:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80025a0:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80025a4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025a8:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 80025aa:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025ac:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 80025ae:	b952      	cbnz	r2, 80025c6 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025b0:	2140      	movs	r1, #64	; 0x40
 80025b2:	4620      	mov	r0, r4
 80025b4:	f7ff ffa4 	bl	8002500 <UART_WaitOnFlagUntilTimeout>
 80025b8:	b958      	cbnz	r0, 80025d2 <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 80025ba:	2320      	movs	r3, #32
 80025bc:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 80025c0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 80025c4:	e006      	b.n	80025d4 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025c6:	2200      	movs	r2, #0
 80025c8:	2180      	movs	r1, #128	; 0x80
 80025ca:	4620      	mov	r0, r4
 80025cc:	f7ff ff98 	bl	8002500 <UART_WaitOnFlagUntilTimeout>
 80025d0:	b118      	cbz	r0, 80025da <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 80025d2:	2003      	movs	r0, #3
}
 80025d4:	b002      	add	sp, #8
 80025d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025da:	68a3      	ldr	r3, [r4, #8]
 80025dc:	6822      	ldr	r2, [r4, #0]
 80025de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e2:	d10d      	bne.n	8002600 <HAL_UART_Transmit+0x9e>
 80025e4:	6923      	ldr	r3, [r4, #16]
 80025e6:	b95b      	cbnz	r3, 8002600 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80025e8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80025ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f0:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80025f2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80025fe:	e7d1      	b.n	80025a4 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002600:	782b      	ldrb	r3, [r5, #0]
 8002602:	8513      	strh	r3, [r2, #40]	; 0x28
 8002604:	3501      	adds	r5, #1
 8002606:	e7f4      	b.n	80025f2 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002608:	2001      	movs	r0, #1
 800260a:	e7e3      	b.n	80025d4 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 800260c:	2002      	movs	r0, #2
 800260e:	e7e1      	b.n	80025d4 <HAL_UART_Transmit+0x72>

08002610 <HAL_UART_Receive>:
{
 8002610:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002614:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002616:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 800261a:	2b20      	cmp	r3, #32
{
 800261c:	4604      	mov	r4, r0
 800261e:	460d      	mov	r5, r1
 8002620:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002622:	d160      	bne.n	80026e6 <HAL_UART_Receive+0xd6>
    if ((pData == NULL) || (Size == 0U))
 8002624:	2900      	cmp	r1, #0
 8002626:	d05c      	beq.n	80026e2 <HAL_UART_Receive+0xd2>
 8002628:	2a00      	cmp	r2, #0
 800262a:	d05a      	beq.n	80026e2 <HAL_UART_Receive+0xd2>
    __HAL_LOCK(huart);
 800262c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002630:	2b01      	cmp	r3, #1
 8002632:	d058      	beq.n	80026e6 <HAL_UART_Receive+0xd6>
 8002634:	2301      	movs	r3, #1
 8002636:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263a:	2300      	movs	r3, #0
 800263c:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800263e:	2322      	movs	r3, #34	; 0x22
 8002640:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    tickstart = HAL_GetTick();
 8002644:	f7fd ffd4 	bl	80005f0 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8002648:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 800264a:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 800264e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002652:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 8002654:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002658:	d115      	bne.n	8002686 <HAL_UART_Receive+0x76>
 800265a:	6923      	ldr	r3, [r4, #16]
 800265c:	b98b      	cbnz	r3, 8002682 <HAL_UART_Receive+0x72>
 800265e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002662:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8002666:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while (huart->RxXferCount > 0U)
 800266a:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800266e:	b280      	uxth	r0, r0
 8002670:	b9b8      	cbnz	r0, 80026a2 <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8002672:	2320      	movs	r3, #32
 8002674:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    __HAL_UNLOCK(huart);
 8002678:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 800267c:	b002      	add	sp, #8
 800267e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8002682:	23ff      	movs	r3, #255	; 0xff
 8002684:	e7ed      	b.n	8002662 <HAL_UART_Receive+0x52>
 8002686:	b923      	cbnz	r3, 8002692 <HAL_UART_Receive+0x82>
 8002688:	6923      	ldr	r3, [r4, #16]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f9      	beq.n	8002682 <HAL_UART_Receive+0x72>
 800268e:	237f      	movs	r3, #127	; 0x7f
 8002690:	e7e7      	b.n	8002662 <HAL_UART_Receive+0x52>
 8002692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002696:	d1e6      	bne.n	8002666 <HAL_UART_Receive+0x56>
 8002698:	6923      	ldr	r3, [r4, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f7      	beq.n	800268e <HAL_UART_Receive+0x7e>
 800269e:	233f      	movs	r3, #63	; 0x3f
 80026a0:	e7df      	b.n	8002662 <HAL_UART_Receive+0x52>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026a2:	f8cd 8000 	str.w	r8, [sp]
 80026a6:	463b      	mov	r3, r7
 80026a8:	2200      	movs	r2, #0
 80026aa:	2120      	movs	r1, #32
 80026ac:	4620      	mov	r0, r4
 80026ae:	f7ff ff27 	bl	8002500 <UART_WaitOnFlagUntilTimeout>
 80026b2:	b9d0      	cbnz	r0, 80026ea <HAL_UART_Receive+0xda>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026b4:	68a3      	ldr	r3, [r4, #8]
 80026b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ba:	6823      	ldr	r3, [r4, #0]
 80026bc:	d10c      	bne.n	80026d8 <HAL_UART_Receive+0xc8>
 80026be:	6922      	ldr	r2, [r4, #16]
 80026c0:	b952      	cbnz	r2, 80026d8 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80026c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80026c4:	4033      	ands	r3, r6
 80026c6:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 80026ca:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80026d6:	e7c8      	b.n	800266a <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80026d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80026da:	4033      	ands	r3, r6
 80026dc:	702b      	strb	r3, [r5, #0]
 80026de:	3501      	adds	r5, #1
 80026e0:	e7f3      	b.n	80026ca <HAL_UART_Receive+0xba>
      return  HAL_ERROR;
 80026e2:	2001      	movs	r0, #1
 80026e4:	e7ca      	b.n	800267c <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 80026e6:	2002      	movs	r0, #2
 80026e8:	e7c8      	b.n	800267c <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 80026ea:	2003      	movs	r0, #3
 80026ec:	e7c6      	b.n	800267c <HAL_UART_Receive+0x6c>

080026ee <UART_CheckIdleState>:
{
 80026ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80026f0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f2:	2600      	movs	r6, #0
 80026f4:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 80026f6:	f7fd ff7b 	bl	80005f0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002700:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002702:	d417      	bmi.n	8002734 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	075b      	lsls	r3, r3, #29
 800270a:	d50a      	bpl.n	8002722 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800270c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	2200      	movs	r2, #0
 8002714:	462b      	mov	r3, r5
 8002716:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800271a:	4620      	mov	r0, r4
 800271c:	f7ff fef0 	bl	8002500 <UART_WaitOnFlagUntilTimeout>
 8002720:	b9a0      	cbnz	r0, 800274c <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8002722:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002724:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002726:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800272a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800272e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8002732:	e00c      	b.n	800274e <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	4632      	mov	r2, r6
 800273c:	4603      	mov	r3, r0
 800273e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002742:	4620      	mov	r0, r4
 8002744:	f7ff fedc 	bl	8002500 <UART_WaitOnFlagUntilTimeout>
 8002748:	2800      	cmp	r0, #0
 800274a:	d0db      	beq.n	8002704 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800274c:	2003      	movs	r0, #3
}
 800274e:	b002      	add	sp, #8
 8002750:	bd70      	pop	{r4, r5, r6, pc}

08002752 <HAL_UART_Init>:
{
 8002752:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002754:	4604      	mov	r4, r0
 8002756:	b360      	cbz	r0, 80027b2 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002758:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800275c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002760:	b91b      	cbnz	r3, 800276a <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002762:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002766:	f000 fb6d 	bl	8002e44 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800276a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800276c:	2324      	movs	r3, #36	; 0x24
 800276e:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8002772:	6813      	ldr	r3, [r2, #0]
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800277a:	4620      	mov	r0, r4
 800277c:	f7ff fd4a 	bl	8002214 <UART_SetConfig>
 8002780:	2801      	cmp	r0, #1
 8002782:	d016      	beq.n	80027b2 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002786:	b113      	cbz	r3, 800278e <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002788:	4620      	mov	r0, r4
 800278a:	f7ff fe65 	bl	8002458 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002796:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800279e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80027a6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80027a8:	601a      	str	r2, [r3, #0]
}
 80027aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80027ae:	f7ff bf9e 	b.w	80026ee <UART_CheckIdleState>
}
 80027b2:	2001      	movs	r0, #1
 80027b4:	bd10      	pop	{r4, pc}
	...

080027b8 <ScreenSend>:
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);

void ScreenSend(uint8_t * pData) {
 80027b8:	b513      	push	{r0, r1, r4, lr}
 80027ba:	4604      	mov	r4, r0
	int length = strlen((char*) pData);	//Calculate string length
 80027bc:	f7fd fd08 	bl	80001d0 <strlen>
	HAL_I2C_Master_Transmit(&hi2c1, 0x72 << 1, pData, length, 10);//Address 0x72
 80027c0:	230a      	movs	r3, #10
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	4622      	mov	r2, r4
 80027c6:	b283      	uxth	r3, r0
 80027c8:	21e4      	movs	r1, #228	; 0xe4
 80027ca:	4802      	ldr	r0, [pc, #8]	; (80027d4 <ScreenSend+0x1c>)
 80027cc:	f7fe fdfc 	bl	80013c8 <HAL_I2C_Master_Transmit>
}
 80027d0:	b002      	add	sp, #8
 80027d2:	bd10      	pop	{r4, pc}
 80027d4:	200000a0 	.word	0x200000a0

080027d8 <thumbFinger>:
void indexFinger(uint16_t angle);
void middleFinger(uint16_t angle);
void ringFinger(uint16_t angle);
void littleFinger(uint16_t angle);

void thumbFinger(uint16_t angle) {
 80027d8:	b508      	push	{r3, lr}
	if (angle >= 30 && angle <= 40) {
 80027da:	f1a0 031e 	sub.w	r3, r0, #30
 80027de:	2b0a      	cmp	r3, #10
 80027e0:	d80a      	bhi.n	80027f8 <thumbFinger+0x20>
		printf("Finger Bend at 35.\r\n");
 80027e2:	480e      	ldr	r0, [pc, #56]	; (800281c <thumbFinger+0x44>)
 80027e4:	f000 fc98 	bl	8003118 <puts>
		ScreenSend((uint8_t *) "|-I need water");
 80027e8:	480d      	ldr	r0, [pc, #52]	; (8002820 <thumbFinger+0x48>)
		ScreenSend((uint8_t *) "|-I need food");
	}

	else if (angle >= 105 && angle <= 115) {
		printf("Finger Bend at 120.\r\n");
		ScreenSend((uint8_t *) "|-I need medicine");
 80027ea:	f7ff ffe5 	bl	80027b8 <ScreenSend>
	}
	HAL_Delay(100);
 80027ee:	2064      	movs	r0, #100	; 0x64
}
 80027f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(100);
 80027f4:	f7fd bf02 	b.w	80005fc <HAL_Delay>
	else if (angle >= 85 && angle <= 95) {
 80027f8:	f1a0 0355 	sub.w	r3, r0, #85	; 0x55
 80027fc:	2b0a      	cmp	r3, #10
 80027fe:	d804      	bhi.n	800280a <thumbFinger+0x32>
		printf("Finger Bend at 90.\r\n");
 8002800:	4808      	ldr	r0, [pc, #32]	; (8002824 <thumbFinger+0x4c>)
 8002802:	f000 fc89 	bl	8003118 <puts>
		ScreenSend((uint8_t *) "|-I need food");
 8002806:	4808      	ldr	r0, [pc, #32]	; (8002828 <thumbFinger+0x50>)
 8002808:	e7ef      	b.n	80027ea <thumbFinger+0x12>
	else if (angle >= 105 && angle <= 115) {
 800280a:	3869      	subs	r0, #105	; 0x69
 800280c:	280a      	cmp	r0, #10
 800280e:	d8ee      	bhi.n	80027ee <thumbFinger+0x16>
		printf("Finger Bend at 120.\r\n");
 8002810:	4806      	ldr	r0, [pc, #24]	; (800282c <thumbFinger+0x54>)
 8002812:	f000 fc81 	bl	8003118 <puts>
		ScreenSend((uint8_t *) "|-I need medicine");
 8002816:	4806      	ldr	r0, [pc, #24]	; (8002830 <thumbFinger+0x58>)
 8002818:	e7e7      	b.n	80027ea <thumbFinger+0x12>
 800281a:	bf00      	nop
 800281c:	08004057 	.word	0x08004057
 8002820:	0800406b 	.word	0x0800406b
 8002824:	0800407a 	.word	0x0800407a
 8002828:	0800408e 	.word	0x0800408e
 800282c:	0800409c 	.word	0x0800409c
 8002830:	080040b1 	.word	0x080040b1

08002834 <indexFinger>:

void indexFinger(uint16_t angle) {
 8002834:	b508      	push	{r3, lr}
	if (angle >= 30 && angle <= 40) {
 8002836:	f1a0 031e 	sub.w	r3, r0, #30
 800283a:	2b0a      	cmp	r3, #10
 800283c:	d80a      	bhi.n	8002854 <indexFinger+0x20>
		printf("Finger Bend at 35.\r\n");
 800283e:	480e      	ldr	r0, [pc, #56]	; (8002878 <indexFinger+0x44>)
 8002840:	f000 fc6a 	bl	8003118 <puts>
		ScreenSend((uint8_t *) "|-Hello, I'm Aman!");
 8002844:	480d      	ldr	r0, [pc, #52]	; (800287c <indexFinger+0x48>)
		ScreenSend((uint8_t *) "|-I'm good");
	}

	else if (angle >= 105 && angle <= 115) {
		printf("Finger Bend at 120.\r\n");
		ScreenSend((uint8_t *) "|-How are you?");
 8002846:	f7ff ffb7 	bl	80027b8 <ScreenSend>
	}
	HAL_Delay(100);
 800284a:	2064      	movs	r0, #100	; 0x64
}
 800284c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(100);
 8002850:	f7fd bed4 	b.w	80005fc <HAL_Delay>
	else if (angle >= 85 && angle <= 95) {
 8002854:	f1a0 0355 	sub.w	r3, r0, #85	; 0x55
 8002858:	2b0a      	cmp	r3, #10
 800285a:	d804      	bhi.n	8002866 <indexFinger+0x32>
		printf("Finger Bend at 90.\r\n");
 800285c:	4808      	ldr	r0, [pc, #32]	; (8002880 <indexFinger+0x4c>)
 800285e:	f000 fc5b 	bl	8003118 <puts>
		ScreenSend((uint8_t *) "|-I'm good");
 8002862:	4808      	ldr	r0, [pc, #32]	; (8002884 <indexFinger+0x50>)
 8002864:	e7ef      	b.n	8002846 <indexFinger+0x12>
	else if (angle >= 105 && angle <= 115) {
 8002866:	3869      	subs	r0, #105	; 0x69
 8002868:	280a      	cmp	r0, #10
 800286a:	d8ee      	bhi.n	800284a <indexFinger+0x16>
		printf("Finger Bend at 120.\r\n");
 800286c:	4806      	ldr	r0, [pc, #24]	; (8002888 <indexFinger+0x54>)
 800286e:	f000 fc53 	bl	8003118 <puts>
		ScreenSend((uint8_t *) "|-How are you?");
 8002872:	4806      	ldr	r0, [pc, #24]	; (800288c <indexFinger+0x58>)
 8002874:	e7e7      	b.n	8002846 <indexFinger+0x12>
 8002876:	bf00      	nop
 8002878:	08004057 	.word	0x08004057
 800287c:	08003f2d 	.word	0x08003f2d
 8002880:	0800407a 	.word	0x0800407a
 8002884:	08003f40 	.word	0x08003f40
 8002888:	0800409c 	.word	0x0800409c
 800288c:	08003f4b 	.word	0x08003f4b

08002890 <middleFinger>:

void middleFinger(uint16_t angle) {
 8002890:	b508      	push	{r3, lr}
	if (angle >= 30 && angle <= 40) {
 8002892:	f1a0 031e 	sub.w	r3, r0, #30
 8002896:	2b0a      	cmp	r3, #10
 8002898:	d80a      	bhi.n	80028b0 <middleFinger+0x20>
		printf("Finger Bend at 35.\r\n");
 800289a:	480e      	ldr	r0, [pc, #56]	; (80028d4 <middleFinger+0x44>)
 800289c:	f000 fc3c 	bl	8003118 <puts>
		ScreenSend((uint8_t *) "|-I need wheelchair");
 80028a0:	480d      	ldr	r0, [pc, #52]	; (80028d8 <middleFinger+0x48>)
		ScreenSend((uint8_t *) "|-I'm tired");
	}

	else if (angle >= 105 && angle <= 115) {
		printf("Finger Bend at 120.\r\n");
		ScreenSend((uint8_t *) "|-I'm sleepy");
 80028a2:	f7ff ff89 	bl	80027b8 <ScreenSend>
	}
	HAL_Delay(100);
 80028a6:	2064      	movs	r0, #100	; 0x64
}
 80028a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(100);
 80028ac:	f7fd bea6 	b.w	80005fc <HAL_Delay>
	else if (angle >= 85 && angle <= 95) {
 80028b0:	f1a0 0355 	sub.w	r3, r0, #85	; 0x55
 80028b4:	2b0a      	cmp	r3, #10
 80028b6:	d804      	bhi.n	80028c2 <middleFinger+0x32>
		printf("Finger Bend at 90.\r\n");
 80028b8:	4808      	ldr	r0, [pc, #32]	; (80028dc <middleFinger+0x4c>)
 80028ba:	f000 fc2d 	bl	8003118 <puts>
		ScreenSend((uint8_t *) "|-I'm tired");
 80028be:	4808      	ldr	r0, [pc, #32]	; (80028e0 <middleFinger+0x50>)
 80028c0:	e7ef      	b.n	80028a2 <middleFinger+0x12>
	else if (angle >= 105 && angle <= 115) {
 80028c2:	3869      	subs	r0, #105	; 0x69
 80028c4:	280a      	cmp	r0, #10
 80028c6:	d8ee      	bhi.n	80028a6 <middleFinger+0x16>
		printf("Finger Bend at 120.\r\n");
 80028c8:	4806      	ldr	r0, [pc, #24]	; (80028e4 <middleFinger+0x54>)
 80028ca:	f000 fc25 	bl	8003118 <puts>
		ScreenSend((uint8_t *) "|-I'm sleepy");
 80028ce:	4806      	ldr	r0, [pc, #24]	; (80028e8 <middleFinger+0x58>)
 80028d0:	e7e7      	b.n	80028a2 <middleFinger+0x12>
 80028d2:	bf00      	nop
 80028d4:	08004057 	.word	0x08004057
 80028d8:	08003fec 	.word	0x08003fec
 80028dc:	0800407a 	.word	0x0800407a
 80028e0:	08004000 	.word	0x08004000
 80028e4:	0800409c 	.word	0x0800409c
 80028e8:	0800400c 	.word	0x0800400c

080028ec <ringFinger>:

void ringFinger(uint16_t angle) {
 80028ec:	b508      	push	{r3, lr}
	if (angle >= 30 && angle <= 40) {
 80028ee:	f1a0 031e 	sub.w	r3, r0, #30
 80028f2:	2b0a      	cmp	r3, #10
 80028f4:	d80a      	bhi.n	800290c <ringFinger+0x20>
		printf("Finger Bend at 35.\r\n");
 80028f6:	480e      	ldr	r0, [pc, #56]	; (8002930 <ringFinger+0x44>)
 80028f8:	f000 fc0e 	bl	8003118 <puts>
		ScreenSend((uint8_t *) "|-Where's my phone?");
 80028fc:	480d      	ldr	r0, [pc, #52]	; (8002934 <ringFinger+0x48>)
		ScreenSend((uint8_t *) "|-Call on this number.");
	}

	else if (angle >= 105 && angle <= 115) {
		printf("Finger Bend at 120.\r\n");
		ScreenSend((uint8_t *) "|-Tell my address.");
 80028fe:	f7ff ff5b 	bl	80027b8 <ScreenSend>
	}
	HAL_Delay(100);
 8002902:	2064      	movs	r0, #100	; 0x64
}
 8002904:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(100);
 8002908:	f7fd be78 	b.w	80005fc <HAL_Delay>
	else if (angle >= 85 && angle <= 95) {
 800290c:	f1a0 0355 	sub.w	r3, r0, #85	; 0x55
 8002910:	2b0a      	cmp	r3, #10
 8002912:	d804      	bhi.n	800291e <ringFinger+0x32>
		printf("Finger Bend at 90.\r\n");
 8002914:	4808      	ldr	r0, [pc, #32]	; (8002938 <ringFinger+0x4c>)
 8002916:	f000 fbff 	bl	8003118 <puts>
		ScreenSend((uint8_t *) "|-Call on this number.");
 800291a:	4808      	ldr	r0, [pc, #32]	; (800293c <ringFinger+0x50>)
 800291c:	e7ef      	b.n	80028fe <ringFinger+0x12>
	else if (angle >= 105 && angle <= 115) {
 800291e:	3869      	subs	r0, #105	; 0x69
 8002920:	280a      	cmp	r0, #10
 8002922:	d8ee      	bhi.n	8002902 <ringFinger+0x16>
		printf("Finger Bend at 120.\r\n");
 8002924:	4806      	ldr	r0, [pc, #24]	; (8002940 <ringFinger+0x54>)
 8002926:	f000 fbf7 	bl	8003118 <puts>
		ScreenSend((uint8_t *) "|-Tell my address.");
 800292a:	4806      	ldr	r0, [pc, #24]	; (8002944 <ringFinger+0x58>)
 800292c:	e7e7      	b.n	80028fe <ringFinger+0x12>
 800292e:	bf00      	nop
 8002930:	08004057 	.word	0x08004057
 8002934:	08004019 	.word	0x08004019
 8002938:	0800407a 	.word	0x0800407a
 800293c:	0800402d 	.word	0x0800402d
 8002940:	0800409c 	.word	0x0800409c
 8002944:	08004044 	.word	0x08004044

08002948 <littleFinger>:

void littleFinger(uint16_t angle) {
 8002948:	b508      	push	{r3, lr}
	if (angle >= 30 && angle <= 40) {
 800294a:	f1a0 031e 	sub.w	r3, r0, #30
 800294e:	2b0a      	cmp	r3, #10
 8002950:	d80a      	bhi.n	8002968 <littleFinger+0x20>
		printf("Finger Bend at 35.\r\n");
 8002952:	480e      	ldr	r0, [pc, #56]	; (800298c <littleFinger+0x44>)
 8002954:	f000 fbe0 	bl	8003118 <puts>
		ScreenSend((uint8_t *) "|-Thank you!");
 8002958:	480d      	ldr	r0, [pc, #52]	; (8002990 <littleFinger+0x48>)
		ScreenSend((uint8_t *) "|-Nice to meet you.");
	}

	else if (angle >= 105 && angle <= 115) {
		printf("Finger Bend at 120.\r\n");
		ScreenSend((uint8_t *) "|-Goodbye");
 800295a:	f7ff ff2d 	bl	80027b8 <ScreenSend>
	}
	HAL_Delay(100);
 800295e:	2064      	movs	r0, #100	; 0x64
}
 8002960:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(100);
 8002964:	f7fd be4a 	b.w	80005fc <HAL_Delay>
	else if (angle >= 85 && angle <= 95) {
 8002968:	f1a0 0355 	sub.w	r3, r0, #85	; 0x55
 800296c:	2b0a      	cmp	r3, #10
 800296e:	d804      	bhi.n	800297a <littleFinger+0x32>
		printf("Finger Bend at 90.\r\n");
 8002970:	4808      	ldr	r0, [pc, #32]	; (8002994 <littleFinger+0x4c>)
 8002972:	f000 fbd1 	bl	8003118 <puts>
		ScreenSend((uint8_t *) "|-Nice to meet you.");
 8002976:	4808      	ldr	r0, [pc, #32]	; (8002998 <littleFinger+0x50>)
 8002978:	e7ef      	b.n	800295a <littleFinger+0x12>
	else if (angle >= 105 && angle <= 115) {
 800297a:	3869      	subs	r0, #105	; 0x69
 800297c:	280a      	cmp	r0, #10
 800297e:	d8ee      	bhi.n	800295e <littleFinger+0x16>
		printf("Finger Bend at 120.\r\n");
 8002980:	4806      	ldr	r0, [pc, #24]	; (800299c <littleFinger+0x54>)
 8002982:	f000 fbc9 	bl	8003118 <puts>
		ScreenSend((uint8_t *) "|-Goodbye");
 8002986:	4806      	ldr	r0, [pc, #24]	; (80029a0 <littleFinger+0x58>)
 8002988:	e7e7      	b.n	800295a <littleFinger+0x12>
 800298a:	bf00      	nop
 800298c:	08004057 	.word	0x08004057
 8002990:	08003f5a 	.word	0x08003f5a
 8002994:	0800407a 	.word	0x0800407a
 8002998:	08003f67 	.word	0x08003f67
 800299c:	0800409c 	.word	0x0800409c
 80029a0:	08003f7b 	.word	0x08003f7b

080029a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80029a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029a8:	b0ac      	sub	sp, #176	; 0xb0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80029aa:	2414      	movs	r4, #20
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80029ac:	2244      	movs	r2, #68	; 0x44
 80029ae:	2100      	movs	r1, #0
 80029b0:	a806      	add	r0, sp, #24
 80029b2:	f000 fb35 	bl	8003020 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80029b6:	4622      	mov	r2, r4
 80029b8:	2100      	movs	r1, #0
 80029ba:	a801      	add	r0, sp, #4
 80029bc:	f000 fb30 	bl	8003020 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80029c0:	2100      	movs	r1, #0
 80029c2:	2254      	movs	r2, #84	; 0x54
 80029c4:	a817      	add	r0, sp, #92	; 0x5c
 80029c6:	f000 fb2b 	bl	8003020 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80029ca:	f7fe fe67 	bl	800169c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80029ce:	4a23      	ldr	r2, [pc, #140]	; (8002a5c <SystemClock_Config+0xb8>)
 80029d0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80029d4:	f023 0318 	bic.w	r3, r3, #24
 80029d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80029dc:	2500      	movs	r5, #0
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029de:	2602      	movs	r6, #2
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 80029e0:	9406      	str	r4, [sp, #24]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80029e2:	2360      	movs	r3, #96	; 0x60
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029e4:	2401      	movs	r4, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
	RCC_OscInitStruct.PLL.PLLM = 1;
	RCC_OscInitStruct.PLL.PLLN = 16;
 80029e6:	f04f 0810 	mov.w	r8, #16
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80029ea:	2707      	movs	r7, #7
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80029ec:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80029ee:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029f0:	9408      	str	r4, [sp, #32]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80029f2:	940c      	str	r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80029f4:	950d      	str	r5, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029f6:	9610      	str	r6, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80029f8:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 80029fa:	9412      	str	r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 16;
 80029fc:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002a00:	9714      	str	r7, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002a02:	9615      	str	r6, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002a04:	9616      	str	r6, [sp, #88]	; 0x58
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002a06:	f7fe ff25 	bl	8001854 <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002a0a:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002a0c:	4621      	mov	r1, r4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002a0e:	9301      	str	r3, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002a10:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a12:	2303      	movs	r3, #3
 8002a14:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a16:	9503      	str	r5, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a18:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a1a:	9505      	str	r5, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002a1c:	f7ff f96c 	bl	8001cf8 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8002a20:	f244 0342 	movw	r3, #16450	; 0x4042
 8002a24:	9317      	str	r3, [sp, #92]	; 0x5c
			| RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002a26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002a2a:	9329      	str	r3, [sp, #164]	; 0xa4
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002a2c:	a817      	add	r0, sp, #92	; 0x5c
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002a2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a32:	931e      	str	r3, [sp, #120]	; 0x78
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a34:	9520      	str	r5, [sp, #128]	; 0x80
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a36:	9522      	str	r5, [sp, #136]	; 0x88
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002a38:	9418      	str	r4, [sp, #96]	; 0x60
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002a3a:	9419      	str	r4, [sp, #100]	; 0x64
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002a3c:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002a40:	971b      	str	r7, [sp, #108]	; 0x6c
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002a42:	961c      	str	r6, [sp, #112]	; 0x70
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002a44:	961d      	str	r6, [sp, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002a46:	f7ff fa99 	bl	8001f7c <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a4a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a4e:	f7fe fe35 	bl	80016bc <HAL_PWREx_ControlVoltageScaling>
			!= HAL_OK) {
		Error_Handler();
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8002a52:	f7ff fbd7 	bl	8002204 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002a56:	b02c      	add	sp, #176	; 0xb0
 8002a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a5c:	40021000 	.word	0x40021000

08002a60 <main>:
int main(void) {
 8002a60:	b580      	push	{r7, lr}
 */
static void MX_GPIO_Init(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002a62:	4d96      	ldr	r5, [pc, #600]	; (8002cbc <main+0x25c>)
int main(void) {
 8002a64:	b08c      	sub	sp, #48	; 0x30
	HAL_Init();
 8002a66:	f7fd fdab 	bl	80005c0 <HAL_Init>
	SystemClock_Config();
 8002a6a:	f7ff ff9b 	bl	80029a4 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002a6e:	2214      	movs	r2, #20
 8002a70:	2100      	movs	r1, #0
 8002a72:	a806      	add	r0, sp, #24
 8002a74:	f000 fad4 	bl	8003020 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002a78:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002a7a:	4891      	ldr	r0, [pc, #580]	; (8002cc0 <main+0x260>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002a7c:	f043 0304 	orr.w	r3, r3, #4
 8002a80:	64eb      	str	r3, [r5, #76]	; 0x4c
 8002a82:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	9303      	str	r3, [sp, #12]
 8002a8a:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8002a8c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	64eb      	str	r3, [r5, #76]	; 0x4c
 8002a94:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	9304      	str	r3, [sp, #16]
 8002a9c:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002a9e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002aa0:	f043 0302 	orr.w	r3, r3, #2
 8002aa4:	64eb      	str	r3, [r5, #76]	; 0x4c
 8002aa6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002aa8:	f003 0302 	and.w	r3, r3, #2
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002aac:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002aae:	9305      	str	r3, [sp, #20]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002ab0:	2108      	movs	r1, #8

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2400      	movs	r4, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab4:	2701      	movs	r7, #1
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002ab6:	9b05      	ldr	r3, [sp, #20]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002ab8:	f7fe fb54 	bl	8001164 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = LD3_Pin;
 8002abc:	2308      	movs	r3, #8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002abe:	a906      	add	r1, sp, #24
 8002ac0:	487f      	ldr	r0, [pc, #508]	; (8002cc0 <main+0x260>)
	GPIO_InitStruct.Pin = LD3_Pin;
 8002ac2:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac4:	9707      	str	r7, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac8:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002aca:	f7fe fa97 	bl	8000ffc <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE()
 8002ace:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8002ad0:	433b      	orrs	r3, r7
 8002ad2:	64ab      	str	r3, [r5, #72]	; 0x48
 8002ad4:	6cab      	ldr	r3, [r5, #72]	; 0x48
	hadc1.Instance = ADC1;
 8002ad6:	4d7b      	ldr	r5, [pc, #492]	; (8002cc4 <main+0x264>)
	__HAL_RCC_DMA1_CLK_ENABLE()
 8002ad8:	403b      	ands	r3, r7
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002ada:	4622      	mov	r2, r4
 8002adc:	4621      	mov	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE()
 8002ade:	9302      	str	r3, [sp, #8]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002ae0:	200b      	movs	r0, #11
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002ae2:	f04f 0918 	mov.w	r9, #24
	__HAL_RCC_DMA1_CLK_ENABLE()
 8002ae6:	9b02      	ldr	r3, [sp, #8]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002ae8:	f7fe f946 	bl	8000d78 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002aec:	200b      	movs	r0, #11
 8002aee:	f7fe f977 	bl	8000de0 <HAL_NVIC_EnableIRQ>
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002af2:	4621      	mov	r1, r4
 8002af4:	464a      	mov	r2, r9
 8002af6:	eb0d 0009 	add.w	r0, sp, r9
 8002afa:	f000 fa91 	bl	8003020 <memset>
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002afe:	4a72      	ldr	r2, [pc, #456]	; (8002cc8 <main+0x268>)
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b00:	60ac      	str	r4, [r5, #8]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b02:	f44f 3340 	mov.w	r3, #196608	; 0x30000
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b06:	2604      	movs	r6, #4
	hadc1.Init.NbrOfConversion = 5;
 8002b08:	f04f 0805 	mov.w	r8, #5
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002b0c:	4628      	mov	r0, r5
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b0e:	e885 000c 	stmia.w	r5, {r2, r3}
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b12:	616e      	str	r6, [r5, #20]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b14:	60ec      	str	r4, [r5, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b16:	612f      	str	r7, [r5, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8002b18:	762c      	strb	r4, [r5, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8002b1a:	766f      	strb	r7, [r5, #25]
	hadc1.Init.NbrOfConversion = 5;
 8002b1c:	f8c5 801c 	str.w	r8, [r5, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b20:	f885 4020 	strb.w	r4, [r5, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b24:	62ac      	str	r4, [r5, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b26:	62ec      	str	r4, [r5, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8002b28:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002b2c:	636c      	str	r4, [r5, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8002b2e:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002b32:	f7fd fd87 	bl	8000644 <HAL_ADC_Init>
	sConfig.Channel = ADC_CHANNEL_8;
 8002b36:	4b65      	ldr	r3, [pc, #404]	; (8002ccc <main+0x26c>)
 8002b38:	9306      	str	r3, [sp, #24]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b3a:	2306      	movs	r3, #6
 8002b3c:	9307      	str	r3, [sp, #28]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b3e:	eb0d 0109 	add.w	r1, sp, r9
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002b42:	237f      	movs	r3, #127	; 0x7f
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b44:	4628      	mov	r0, r5
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002b46:	9309      	str	r3, [sp, #36]	; 0x24
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002b48:	960a      	str	r6, [sp, #40]	; 0x28
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002b4a:	9408      	str	r4, [sp, #32]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8002b4c:	260c      	movs	r6, #12
	sConfig.Offset = 0;
 8002b4e:	940b      	str	r4, [sp, #44]	; 0x2c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b50:	f7fd fe92 	bl	8000878 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_9;
 8002b54:	4b5e      	ldr	r3, [pc, #376]	; (8002cd0 <main+0x270>)
 8002b56:	9306      	str	r3, [sp, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b58:	eb0d 0109 	add.w	r1, sp, r9
 8002b5c:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8002b5e:	9607      	str	r6, [sp, #28]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b60:	f7fd fe8a 	bl	8000878 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_10;
 8002b64:	4b5b      	ldr	r3, [pc, #364]	; (8002cd4 <main+0x274>)
 8002b66:	9306      	str	r3, [sp, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b68:	eb0d 0109 	add.w	r1, sp, r9
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8002b6c:	2312      	movs	r3, #18
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b6e:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8002b70:	9307      	str	r3, [sp, #28]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b72:	f7fd fe81 	bl	8000878 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_11;
 8002b76:	4b58      	ldr	r3, [pc, #352]	; (8002cd8 <main+0x278>)
 8002b78:	9306      	str	r3, [sp, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b7a:	eb0d 0109 	add.w	r1, sp, r9
 8002b7e:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8002b80:	f8cd 901c 	str.w	r9, [sp, #28]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b84:	f7fd fe78 	bl	8000878 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_12;
 8002b88:	4b54      	ldr	r3, [pc, #336]	; (8002cdc <main+0x27c>)
 8002b8a:	9306      	str	r3, [sp, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b8c:	eb0d 0109 	add.w	r1, sp, r9
	sConfig.Rank = ADC_REGULAR_RANK_5;
 8002b90:	f44f 7380 	mov.w	r3, #256	; 0x100
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b94:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_5;
 8002b96:	9307      	str	r3, [sp, #28]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b98:	f7fd fe6e 	bl	8000878 <HAL_ADC_ConfigChannel>
	huart2.Instance = USART2;
 8002b9c:	4850      	ldr	r0, [pc, #320]	; (8002ce0 <main+0x280>)
	huart2.Init.BaudRate = 115200;
 8002b9e:	4951      	ldr	r1, [pc, #324]	; (8002ce4 <main+0x284>)
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002ba0:	6146      	str	r6, [r0, #20]
	huart2.Init.BaudRate = 115200;
 8002ba2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	hi2c1.Instance = I2C1;
 8002ba6:	4e50      	ldr	r6, [pc, #320]	; (8002ce8 <main+0x288>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ba8:	6084      	str	r4, [r0, #8]
	huart2.Init.BaudRate = 115200;
 8002baa:	e880 000a 	stmia.w	r0, {r1, r3}
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002bae:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002bb0:	6104      	str	r4, [r0, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bb2:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bb4:	61c4      	str	r4, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bb6:	6204      	str	r4, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bb8:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002bba:	f7ff fdca 	bl	8002752 <HAL_UART_Init>
	hi2c1.Init.Timing = 0x00707CBB;
 8002bbe:	4b4b      	ldr	r3, [pc, #300]	; (8002cec <main+0x28c>)
 8002bc0:	484b      	ldr	r0, [pc, #300]	; (8002cf0 <main+0x290>)
	hi2c1.Init.OwnAddress1 = 0;
 8002bc2:	60b4      	str	r4, [r6, #8]
	hi2c1.Init.Timing = 0x00707CBB;
 8002bc4:	e886 0009 	stmia.w	r6, {r0, r3}
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002bc8:	4630      	mov	r0, r6
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bca:	60f7      	str	r7, [r6, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bcc:	6134      	str	r4, [r6, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8002bce:	6174      	str	r4, [r6, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bd0:	61b4      	str	r4, [r6, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bd2:	61f4      	str	r4, [r6, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bd4:	6234      	str	r4, [r6, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002bd6:	f7fe fba6 	bl	8001326 <HAL_I2C_Init>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8002bda:	4621      	mov	r1, r4
 8002bdc:	4630      	mov	r0, r6
 8002bde:	f7fe fd12 	bl	8001606 <HAL_I2CEx_ConfigAnalogFilter>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8002be2:	4621      	mov	r1, r4
 8002be4:	4630      	mov	r0, r6
 8002be6:	f7fe fd34 	bl	8001652 <HAL_I2CEx_ConfigDigitalFilter>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuffer, 5); // Start ADC in DMA
 8002bea:	4642      	mov	r2, r8
 8002bec:	4941      	ldr	r1, [pc, #260]	; (8002cf4 <main+0x294>)
 8002bee:	4628      	mov	r0, r5
 8002bf0:	f7fe f85a 	bl	8000ca8 <HAL_ADC_Start_DMA>
	while (HAL_I2C_IsDeviceReady(&hi2c1, 0x72 << 1, 2, 10) != HAL_OK) {
 8002bf4:	230a      	movs	r3, #10
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	21e4      	movs	r1, #228	; 0xe4
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	f7fe fc78 	bl	80014f0 <HAL_I2C_IsDeviceReady>
 8002c00:	2800      	cmp	r0, #0
 8002c02:	d1f7      	bne.n	8002bf4 <main+0x194>
	ScreenSend((uint8_t *) "|-Smart Glove");	//Boot message
 8002c04:	483c      	ldr	r0, [pc, #240]	; (8002cf8 <main+0x298>)
				adcBuffer[1], adcBuffer[2], adcBuffer[3], adcBuffer[4]);
 8002c06:	4e3b      	ldr	r6, [pc, #236]	; (8002cf4 <main+0x294>)
		printf("ADC > 1: %d  2: %d  3: %d  4: %d  5: %d \r\n", adcBuffer[0],
 8002c08:	4f3c      	ldr	r7, [pc, #240]	; (8002cfc <main+0x29c>)
		angle[0] = map(adcBuffer[0], 2840, 3670, 0, 180);
 8002c0a:	4c3d      	ldr	r4, [pc, #244]	; (8002d00 <main+0x2a0>)
	ScreenSend((uint8_t *) "|-Smart Glove");	//Boot message
 8002c0c:	f7ff fdd4 	bl	80027b8 <ScreenSend>
	HAL_Delay(500);
 8002c10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c14:	f7fd fcf2 	bl	80005fc <HAL_Delay>
		printf("ADC > 1: %d  2: %d  3: %d  4: %d  5: %d \r\n", adcBuffer[0],
 8002c18:	8930      	ldrh	r0, [r6, #8]
 8002c1a:	88b3      	ldrh	r3, [r6, #4]
 8002c1c:	8872      	ldrh	r2, [r6, #2]
 8002c1e:	8831      	ldrh	r1, [r6, #0]
 8002c20:	9001      	str	r0, [sp, #4]
 8002c22:	88f0      	ldrh	r0, [r6, #6]
 8002c24:	9000      	str	r0, [sp, #0]
 8002c26:	4638      	mov	r0, r7
 8002c28:	f000 fa02 	bl	8003030 <iprintf>
		angle[0] = map(adcBuffer[0], 2840, 3670, 0, 180);
 8002c2c:	8831      	ldrh	r1, [r6, #0]
		angle[1] = map(adcBuffer[1], 2900, 3670, 0, 180);
 8002c2e:	8872      	ldrh	r2, [r6, #2]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002c30:	20b4      	movs	r0, #180	; 0xb4
 8002c32:	f6a1 3118 	subw	r1, r1, #2840	; 0xb18
 8002c36:	4341      	muls	r1, r0
 8002c38:	f240 333e 	movw	r3, #830	; 0x33e
 8002c3c:	fb91 f1f3 	sdiv	r1, r1, r3
		angle[2] = map(adcBuffer[2], 2860, 3670, 0, 180);
 8002c40:	88b3      	ldrh	r3, [r6, #4]
		angle[0] = map(adcBuffer[0], 2840, 3670, 0, 180);
 8002c42:	8021      	strh	r1, [r4, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002c44:	f6a3 332c 	subw	r3, r3, #2860	; 0xb2c
 8002c48:	4343      	muls	r3, r0
 8002c4a:	f240 352a 	movw	r5, #810	; 0x32a
 8002c4e:	fb93 f3f5 	sdiv	r3, r3, r5
		angle[3] = map(adcBuffer[3], 2900, 3670, 0, 180);
 8002c52:	88f5      	ldrh	r5, [r6, #6]
		angle[2] = map(adcBuffer[2], 2860, 3670, 0, 180);
 8002c54:	80a3      	strh	r3, [r4, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002c56:	f6a2 3254 	subw	r2, r2, #2900	; 0xb54
 8002c5a:	f6a5 3554 	subw	r5, r5, #2900	; 0xb54
 8002c5e:	f240 3e02 	movw	lr, #770	; 0x302
 8002c62:	4342      	muls	r2, r0
 8002c64:	4345      	muls	r5, r0
 8002c66:	fb92 f2fe 	sdiv	r2, r2, lr
 8002c6a:	fb95 f5fe 	sdiv	r5, r5, lr
		angle[4] = map(adcBuffer[4], 3000, 3670, 0, 180);
 8002c6e:	f8b6 e008 	ldrh.w	lr, [r6, #8]
		angle[3] = map(adcBuffer[3], 2900, 3670, 0, 180);
 8002c72:	80e5      	strh	r5, [r4, #6]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002c74:	f6ae 3eb8 	subw	lr, lr, #3000	; 0xbb8
 8002c78:	fb00 f00e 	mul.w	r0, r0, lr
		printf("Angle > 1: %d  2: %d  3: %d  4: %d  5: %d \r\n\n", angle[0],
 8002c7c:	b2ad      	uxth	r5, r5
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002c7e:	f240 2e9e 	movw	lr, #670	; 0x29e
 8002c82:	fb90 f0fe 	sdiv	r0, r0, lr
		angle[4] = map(adcBuffer[4], 3000, 3670, 0, 180);
 8002c86:	8120      	strh	r0, [r4, #8]
		printf("Angle > 1: %d  2: %d  3: %d  4: %d  5: %d \r\n\n", angle[0],
 8002c88:	b280      	uxth	r0, r0
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	b289      	uxth	r1, r1
		angle[1] = map(adcBuffer[1], 2900, 3670, 0, 180);
 8002c8e:	8062      	strh	r2, [r4, #2]
		printf("Angle > 1: %d  2: %d  3: %d  4: %d  5: %d \r\n\n", angle[0],
 8002c90:	b292      	uxth	r2, r2
 8002c92:	9001      	str	r0, [sp, #4]
 8002c94:	9500      	str	r5, [sp, #0]
 8002c96:	481b      	ldr	r0, [pc, #108]	; (8002d04 <main+0x2a4>)
 8002c98:	f000 f9ca 	bl	8003030 <iprintf>
		thumbFinger(angle[0]);
 8002c9c:	8820      	ldrh	r0, [r4, #0]
 8002c9e:	f7ff fd9b 	bl	80027d8 <thumbFinger>
		indexFinger(angle[1]);
 8002ca2:	8860      	ldrh	r0, [r4, #2]
 8002ca4:	f7ff fdc6 	bl	8002834 <indexFinger>
		middleFinger(angle[2]);
 8002ca8:	88a0      	ldrh	r0, [r4, #4]
 8002caa:	f7ff fdf1 	bl	8002890 <middleFinger>
		ringFinger(angle[3]);
 8002cae:	88e0      	ldrh	r0, [r4, #6]
 8002cb0:	f7ff fe1c 	bl	80028ec <ringFinger>
		littleFinger(angle[4]);
 8002cb4:	8920      	ldrh	r0, [r4, #8]
 8002cb6:	f7ff fe47 	bl	8002948 <littleFinger>
 8002cba:	e7ad      	b.n	8002c18 <main+0x1b8>
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	48000400 	.word	0x48000400
 8002cc4:	200000ec 	.word	0x200000ec
 8002cc8:	50040000 	.word	0x50040000
 8002ccc:	21800100 	.word	0x21800100
 8002cd0:	25b00200 	.word	0x25b00200
 8002cd4:	2a000400 	.word	0x2a000400
 8002cd8:	2e300800 	.word	0x2e300800
 8002cdc:	32601000 	.word	0x32601000
 8002ce0:	200001a4 	.word	0x200001a4
 8002ce4:	40004400 	.word	0x40004400
 8002ce8:	200000a0 	.word	0x200000a0
 8002cec:	00707cbb 	.word	0x00707cbb
 8002cf0:	40005400 	.word	0x40005400
 8002cf4:	20000094 	.word	0x20000094
 8002cf8:	08003f85 	.word	0x08003f85
 8002cfc:	08003f93 	.word	0x08003f93
 8002d00:	20000150 	.word	0x20000150
 8002d04:	08003fbe 	.word	0x08003fbe

08002d08 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002d08:	4770      	bx	lr
	...

08002d0c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <HAL_MspInit+0x2c>)
 8002d0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d10:	f042 0201 	orr.w	r2, r2, #1
 8002d14:	661a      	str	r2, [r3, #96]	; 0x60
 8002d16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8002d18:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1a:	f002 0201 	and.w	r2, r2, #1
 8002d1e:	9200      	str	r2, [sp, #0]
 8002d20:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d28:	659a      	str	r2, [r3, #88]	; 0x58
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d30:	9301      	str	r3, [sp, #4]
 8002d32:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d34:	b002      	add	sp, #8
 8002d36:	4770      	bx	lr
 8002d38:	40021000 	.word	0x40021000

08002d3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d3c:	b530      	push	{r4, r5, lr}
 8002d3e:	4605      	mov	r5, r0
 8002d40:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d42:	2214      	movs	r2, #20
 8002d44:	2100      	movs	r1, #0
 8002d46:	a803      	add	r0, sp, #12
 8002d48:	f000 f96a 	bl	8003020 <memset>
  if(hadc->Instance==ADC1)
 8002d4c:	682a      	ldr	r2, [r5, #0]
 8002d4e:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <HAL_ADC_MspInit+0x90>)
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d138      	bne.n	8002dc6 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002d54:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8002d58:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002d5c:	4c1c      	ldr	r4, [pc, #112]	; (8002dd0 <HAL_ADC_MspInit+0x94>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8002d5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d64:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d68:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d6c:	9201      	str	r2, [sp, #4]
 8002d6e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	9302      	str	r3, [sp, #8]
 8002d80:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8002d82:	23f8      	movs	r3, #248	; 0xf8
 8002d84:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002d8a:	230b      	movs	r3, #11
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002d8e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d90:	f7fe f934 	bl	8000ffc <HAL_GPIO_Init>
    hdma_adc1.Init.Request = DMA_REQUEST_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d94:	2280      	movs	r2, #128	; 0x80
 8002d96:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d98:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Instance = DMA1_Channel1;
 8002d9c:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <HAL_ADC_MspInit+0x98>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d9e:	6162      	str	r2, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002da0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Instance = DMA1_Channel1;
 8002da4:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002da6:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002da8:	2300      	movs	r3, #0
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002daa:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002dac:	4620      	mov	r0, r4
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002dae:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002db0:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002db2:	60e3      	str	r3, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002db4:	61e2      	str	r2, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002db6:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002db8:	f7fe f834 	bl	8000e24 <HAL_DMA_Init>
 8002dbc:	b108      	cbz	r0, 8002dc2 <HAL_ADC_MspInit+0x86>
    {
      Error_Handler();
 8002dbe:	f7ff ffa3 	bl	8002d08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002dc2:	64ec      	str	r4, [r5, #76]	; 0x4c
 8002dc4:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002dc6:	b009      	add	sp, #36	; 0x24
 8002dc8:	bd30      	pop	{r4, r5, pc}
 8002dca:	bf00      	nop
 8002dcc:	50040000 	.word	0x50040000
 8002dd0:	2000015c 	.word	0x2000015c
 8002dd4:	40020008 	.word	0x40020008

08002dd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002dd8:	b510      	push	{r4, lr}
 8002dda:	4604      	mov	r4, r0
 8002ddc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dde:	2214      	movs	r2, #20
 8002de0:	2100      	movs	r1, #0
 8002de2:	a803      	add	r0, sp, #12
 8002de4:	f000 f91c 	bl	8003020 <memset>
  if(hi2c->Instance==I2C1)
 8002de8:	6822      	ldr	r2, [r4, #0]
 8002dea:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <HAL_I2C_MspInit+0x64>)
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d122      	bne.n	8002e36 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df0:	4c13      	ldr	r4, [pc, #76]	; (8002e40 <HAL_I2C_MspInit+0x68>)
 8002df2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002dfa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	9b01      	ldr	r3, [sp, #4]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e04:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e08:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e0a:	2312      	movs	r3, #18
 8002e0c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e12:	2303      	movs	r3, #3
 8002e14:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e16:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e18:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e1e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e20:	f7fe f8ec 	bl	8000ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e2a:	65a3      	str	r3, [r4, #88]	; 0x58
 8002e2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e32:	9302      	str	r3, [sp, #8]
 8002e34:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e36:	b008      	add	sp, #32
 8002e38:	bd10      	pop	{r4, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40005400 	.word	0x40005400
 8002e40:	40021000 	.word	0x40021000

08002e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e44:	b530      	push	{r4, r5, lr}
 8002e46:	4604      	mov	r4, r0
 8002e48:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4a:	2214      	movs	r2, #20
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	a803      	add	r0, sp, #12
 8002e50:	f000 f8e6 	bl	8003020 <memset>
  if(huart->Instance==USART2)
 8002e54:	6822      	ldr	r2, [r4, #0]
 8002e56:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <HAL_UART_MspInit+0x78>)
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d12d      	bne.n	8002eb8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e5c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e60:	2403      	movs	r4, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e64:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002e68:	659a      	str	r2, [r3, #88]	; 0x58
 8002e6a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e6c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002e70:	9201      	str	r2, [sp, #4]
 8002e72:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	64da      	str	r2, [r3, #76]	; 0x4c
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7e:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	9302      	str	r3, [sp, #8]
 8002e86:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002e88:	2304      	movs	r3, #4
 8002e8a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8c:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e8e:	2307      	movs	r3, #7
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002e90:	a903      	add	r1, sp, #12
 8002e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e96:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e98:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002e9a:	f7fe f8af 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ea2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002ea4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	2300      	movs	r3, #0
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eac:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002eb2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002eb4:	f7fe f8a2 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002eb8:	b009      	add	sp, #36	; 0x24
 8002eba:	bd30      	pop	{r4, r5, pc}
 8002ebc:	40004400 	.word	0x40004400

08002ec0 <NMI_Handler>:
 8002ec0:	4770      	bx	lr

08002ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ec2:	e7fe      	b.n	8002ec2 <HardFault_Handler>

08002ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec4:	e7fe      	b.n	8002ec4 <MemManage_Handler>

08002ec6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ec6:	e7fe      	b.n	8002ec6 <BusFault_Handler>

08002ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ec8:	e7fe      	b.n	8002ec8 <UsageFault_Handler>

08002eca <SVC_Handler>:
 8002eca:	4770      	bx	lr

08002ecc <DebugMon_Handler>:
 8002ecc:	4770      	bx	lr

08002ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ece:	4770      	bx	lr

08002ed0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ed0:	f7fd bb86 	b.w	80005e0 <HAL_IncTick>

08002ed4 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ed4:	4801      	ldr	r0, [pc, #4]	; (8002edc <DMA1_Channel1_IRQHandler+0x8>)
 8002ed6:	f7fe b847 	b.w	8000f68 <HAL_DMA_IRQHandler>
 8002eda:	bf00      	nop
 8002edc:	2000015c 	.word	0x2000015c

08002ee0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8002ee0:	b508      	push	{r3, lr}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee8:	4804      	ldr	r0, [pc, #16]	; (8002efc <_read+0x1c>)
 8002eea:	f7ff fb91 	bl	8002610 <HAL_UART_Receive>
 8002eee:	2800      	cmp	r0, #0
		len = EOF;					// signal an issue with stream

	return len;
}
 8002ef0:	bf0c      	ite	eq
 8002ef2:	2001      	moveq	r0, #1
 8002ef4:	f04f 30ff 	movne.w	r0, #4294967295
 8002ef8:	bd08      	pop	{r3, pc}
 8002efa:	bf00      	nop
 8002efc:	200001a4 	.word	0x200001a4

08002f00 <_write>:

int _write(int file, char *ptr, int len)
{
 8002f00:	b510      	push	{r4, lr}

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8002f02:	f04f 33ff 	mov.w	r3, #4294967295
{
 8002f06:	4614      	mov	r4, r2
	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8002f08:	4805      	ldr	r0, [pc, #20]	; (8002f20 <_write+0x20>)
 8002f0a:	b292      	uxth	r2, r2
 8002f0c:	f7ff fb29 	bl	8002562 <HAL_UART_Transmit>
	if(result == HAL_ERROR || result == HAL_BUSY)
 8002f10:	3801      	subs	r0, #1
 8002f12:	b2c0      	uxtb	r0, r0
 8002f14:	2801      	cmp	r0, #1
 8002f16:	d801      	bhi.n	8002f1c <_write+0x1c>
	{
		Error_Handler();
 8002f18:	f7ff fef6 	bl	8002d08 <Error_Handler>
	}

	return len;
}
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	bd10      	pop	{r4, pc}
 8002f20:	200001a4 	.word	0x200001a4

08002f24 <_close>:


int _close(int file)
{
	return -1;
}
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	4770      	bx	lr

08002f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002f2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f2e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002f30:	2000      	movs	r0, #0
 8002f32:	4770      	bx	lr

08002f34 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002f34:	2001      	movs	r0, #1
 8002f36:	4770      	bx	lr

08002f38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002f38:	2000      	movs	r0, #0
 8002f3a:	4770      	bx	lr

08002f3c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f3c:	490f      	ldr	r1, [pc, #60]	; (8002f7c <SystemInit+0x40>)
 8002f3e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002f42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <SystemInit+0x44>)
 8002f4c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002f4e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002f50:	f042 0201 	orr.w	r2, r2, #1
 8002f54:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002f56:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002f5e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002f62:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002f64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f68:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f70:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002f72:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f78:	608b      	str	r3, [r1, #8]
 8002f7a:	4770      	bx	lr
 8002f7c:	e000ed00 	.word	0xe000ed00
 8002f80:	40021000 	.word	0x40021000

08002f84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fbc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002f88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f8a:	e003      	b.n	8002f94 <LoopCopyDataInit>

08002f8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002f8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f92:	3104      	adds	r1, #4

08002f94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002f94:	480b      	ldr	r0, [pc, #44]	; (8002fc4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002f96:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002f98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002f9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002f9c:	d3f6      	bcc.n	8002f8c <CopyDataInit>
	ldr	r2, =_sbss
 8002f9e:	4a0b      	ldr	r2, [pc, #44]	; (8002fcc <LoopForever+0x12>)
	b	LoopFillZerobss
 8002fa0:	e002      	b.n	8002fa8 <LoopFillZerobss>

08002fa2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002fa2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002fa4:	f842 3b04 	str.w	r3, [r2], #4

08002fa8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <LoopForever+0x16>)
	cmp	r2, r3
 8002faa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002fac:	d3f9      	bcc.n	8002fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002fae:	f7ff ffc5 	bl	8002f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fb2:	f000 f811 	bl	8002fd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fb6:	f7ff fd53 	bl	8002a60 <main>

08002fba <LoopForever>:

LoopForever:
    b LoopForever
 8002fba:	e7fe      	b.n	8002fba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002fbc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002fc0:	080041b4 	.word	0x080041b4
	ldr	r0, =_sdata
 8002fc4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002fc8:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8002fcc:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8002fd0:	20000220 	.word	0x20000220

08002fd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fd4:	e7fe      	b.n	8002fd4 <ADC1_IRQHandler>
	...

08002fd8 <__libc_init_array>:
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	4e0d      	ldr	r6, [pc, #52]	; (8003010 <__libc_init_array+0x38>)
 8002fdc:	4c0d      	ldr	r4, [pc, #52]	; (8003014 <__libc_init_array+0x3c>)
 8002fde:	1ba4      	subs	r4, r4, r6
 8002fe0:	10a4      	asrs	r4, r4, #2
 8002fe2:	2500      	movs	r5, #0
 8002fe4:	42a5      	cmp	r5, r4
 8002fe6:	d109      	bne.n	8002ffc <__libc_init_array+0x24>
 8002fe8:	4e0b      	ldr	r6, [pc, #44]	; (8003018 <__libc_init_array+0x40>)
 8002fea:	4c0c      	ldr	r4, [pc, #48]	; (800301c <__libc_init_array+0x44>)
 8002fec:	f000 ff8a 	bl	8003f04 <_init>
 8002ff0:	1ba4      	subs	r4, r4, r6
 8002ff2:	10a4      	asrs	r4, r4, #2
 8002ff4:	2500      	movs	r5, #0
 8002ff6:	42a5      	cmp	r5, r4
 8002ff8:	d105      	bne.n	8003006 <__libc_init_array+0x2e>
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
 8002ffc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003000:	4798      	blx	r3
 8003002:	3501      	adds	r5, #1
 8003004:	e7ee      	b.n	8002fe4 <__libc_init_array+0xc>
 8003006:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800300a:	4798      	blx	r3
 800300c:	3501      	adds	r5, #1
 800300e:	e7f2      	b.n	8002ff6 <__libc_init_array+0x1e>
 8003010:	080041ac 	.word	0x080041ac
 8003014:	080041ac 	.word	0x080041ac
 8003018:	080041ac 	.word	0x080041ac
 800301c:	080041b0 	.word	0x080041b0

08003020 <memset>:
 8003020:	4402      	add	r2, r0
 8003022:	4603      	mov	r3, r0
 8003024:	4293      	cmp	r3, r2
 8003026:	d100      	bne.n	800302a <memset+0xa>
 8003028:	4770      	bx	lr
 800302a:	f803 1b01 	strb.w	r1, [r3], #1
 800302e:	e7f9      	b.n	8003024 <memset+0x4>

08003030 <iprintf>:
 8003030:	b40f      	push	{r0, r1, r2, r3}
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <iprintf+0x2c>)
 8003034:	b513      	push	{r0, r1, r4, lr}
 8003036:	681c      	ldr	r4, [r3, #0]
 8003038:	b124      	cbz	r4, 8003044 <iprintf+0x14>
 800303a:	69a3      	ldr	r3, [r4, #24]
 800303c:	b913      	cbnz	r3, 8003044 <iprintf+0x14>
 800303e:	4620      	mov	r0, r4
 8003040:	f000 fa24 	bl	800348c <__sinit>
 8003044:	ab05      	add	r3, sp, #20
 8003046:	9a04      	ldr	r2, [sp, #16]
 8003048:	68a1      	ldr	r1, [r4, #8]
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	4620      	mov	r0, r4
 800304e:	f000 fbe1 	bl	8003814 <_vfiprintf_r>
 8003052:	b002      	add	sp, #8
 8003054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003058:	b004      	add	sp, #16
 800305a:	4770      	bx	lr
 800305c:	20000004 	.word	0x20000004

08003060 <_puts_r>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	460e      	mov	r6, r1
 8003064:	4605      	mov	r5, r0
 8003066:	b118      	cbz	r0, 8003070 <_puts_r+0x10>
 8003068:	6983      	ldr	r3, [r0, #24]
 800306a:	b90b      	cbnz	r3, 8003070 <_puts_r+0x10>
 800306c:	f000 fa0e 	bl	800348c <__sinit>
 8003070:	69ab      	ldr	r3, [r5, #24]
 8003072:	68ac      	ldr	r4, [r5, #8]
 8003074:	b913      	cbnz	r3, 800307c <_puts_r+0x1c>
 8003076:	4628      	mov	r0, r5
 8003078:	f000 fa08 	bl	800348c <__sinit>
 800307c:	4b23      	ldr	r3, [pc, #140]	; (800310c <_puts_r+0xac>)
 800307e:	429c      	cmp	r4, r3
 8003080:	d117      	bne.n	80030b2 <_puts_r+0x52>
 8003082:	686c      	ldr	r4, [r5, #4]
 8003084:	89a3      	ldrh	r3, [r4, #12]
 8003086:	071b      	lsls	r3, r3, #28
 8003088:	d51d      	bpl.n	80030c6 <_puts_r+0x66>
 800308a:	6923      	ldr	r3, [r4, #16]
 800308c:	b1db      	cbz	r3, 80030c6 <_puts_r+0x66>
 800308e:	3e01      	subs	r6, #1
 8003090:	68a3      	ldr	r3, [r4, #8]
 8003092:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003096:	3b01      	subs	r3, #1
 8003098:	60a3      	str	r3, [r4, #8]
 800309a:	b9e9      	cbnz	r1, 80030d8 <_puts_r+0x78>
 800309c:	2b00      	cmp	r3, #0
 800309e:	da2e      	bge.n	80030fe <_puts_r+0x9e>
 80030a0:	4622      	mov	r2, r4
 80030a2:	210a      	movs	r1, #10
 80030a4:	4628      	mov	r0, r5
 80030a6:	f000 f83f 	bl	8003128 <__swbuf_r>
 80030aa:	3001      	adds	r0, #1
 80030ac:	d011      	beq.n	80030d2 <_puts_r+0x72>
 80030ae:	200a      	movs	r0, #10
 80030b0:	bd70      	pop	{r4, r5, r6, pc}
 80030b2:	4b17      	ldr	r3, [pc, #92]	; (8003110 <_puts_r+0xb0>)
 80030b4:	429c      	cmp	r4, r3
 80030b6:	d101      	bne.n	80030bc <_puts_r+0x5c>
 80030b8:	68ac      	ldr	r4, [r5, #8]
 80030ba:	e7e3      	b.n	8003084 <_puts_r+0x24>
 80030bc:	4b15      	ldr	r3, [pc, #84]	; (8003114 <_puts_r+0xb4>)
 80030be:	429c      	cmp	r4, r3
 80030c0:	bf08      	it	eq
 80030c2:	68ec      	ldreq	r4, [r5, #12]
 80030c4:	e7de      	b.n	8003084 <_puts_r+0x24>
 80030c6:	4621      	mov	r1, r4
 80030c8:	4628      	mov	r0, r5
 80030ca:	f000 f87f 	bl	80031cc <__swsetup_r>
 80030ce:	2800      	cmp	r0, #0
 80030d0:	d0dd      	beq.n	800308e <_puts_r+0x2e>
 80030d2:	f04f 30ff 	mov.w	r0, #4294967295
 80030d6:	bd70      	pop	{r4, r5, r6, pc}
 80030d8:	2b00      	cmp	r3, #0
 80030da:	da04      	bge.n	80030e6 <_puts_r+0x86>
 80030dc:	69a2      	ldr	r2, [r4, #24]
 80030de:	4293      	cmp	r3, r2
 80030e0:	db06      	blt.n	80030f0 <_puts_r+0x90>
 80030e2:	290a      	cmp	r1, #10
 80030e4:	d004      	beq.n	80030f0 <_puts_r+0x90>
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	6022      	str	r2, [r4, #0]
 80030ec:	7019      	strb	r1, [r3, #0]
 80030ee:	e7cf      	b.n	8003090 <_puts_r+0x30>
 80030f0:	4622      	mov	r2, r4
 80030f2:	4628      	mov	r0, r5
 80030f4:	f000 f818 	bl	8003128 <__swbuf_r>
 80030f8:	3001      	adds	r0, #1
 80030fa:	d1c9      	bne.n	8003090 <_puts_r+0x30>
 80030fc:	e7e9      	b.n	80030d2 <_puts_r+0x72>
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	200a      	movs	r0, #10
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	6022      	str	r2, [r4, #0]
 8003106:	7018      	strb	r0, [r3, #0]
 8003108:	bd70      	pop	{r4, r5, r6, pc}
 800310a:	bf00      	nop
 800310c:	08004130 	.word	0x08004130
 8003110:	08004150 	.word	0x08004150
 8003114:	08004110 	.word	0x08004110

08003118 <puts>:
 8003118:	4b02      	ldr	r3, [pc, #8]	; (8003124 <puts+0xc>)
 800311a:	4601      	mov	r1, r0
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	f7ff bf9f 	b.w	8003060 <_puts_r>
 8003122:	bf00      	nop
 8003124:	20000004 	.word	0x20000004

08003128 <__swbuf_r>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	460e      	mov	r6, r1
 800312c:	4614      	mov	r4, r2
 800312e:	4605      	mov	r5, r0
 8003130:	b118      	cbz	r0, 800313a <__swbuf_r+0x12>
 8003132:	6983      	ldr	r3, [r0, #24]
 8003134:	b90b      	cbnz	r3, 800313a <__swbuf_r+0x12>
 8003136:	f000 f9a9 	bl	800348c <__sinit>
 800313a:	4b21      	ldr	r3, [pc, #132]	; (80031c0 <__swbuf_r+0x98>)
 800313c:	429c      	cmp	r4, r3
 800313e:	d12a      	bne.n	8003196 <__swbuf_r+0x6e>
 8003140:	686c      	ldr	r4, [r5, #4]
 8003142:	69a3      	ldr	r3, [r4, #24]
 8003144:	60a3      	str	r3, [r4, #8]
 8003146:	89a3      	ldrh	r3, [r4, #12]
 8003148:	071a      	lsls	r2, r3, #28
 800314a:	d52e      	bpl.n	80031aa <__swbuf_r+0x82>
 800314c:	6923      	ldr	r3, [r4, #16]
 800314e:	b363      	cbz	r3, 80031aa <__swbuf_r+0x82>
 8003150:	6923      	ldr	r3, [r4, #16]
 8003152:	6820      	ldr	r0, [r4, #0]
 8003154:	1ac0      	subs	r0, r0, r3
 8003156:	6963      	ldr	r3, [r4, #20]
 8003158:	b2f6      	uxtb	r6, r6
 800315a:	4298      	cmp	r0, r3
 800315c:	4637      	mov	r7, r6
 800315e:	db04      	blt.n	800316a <__swbuf_r+0x42>
 8003160:	4621      	mov	r1, r4
 8003162:	4628      	mov	r0, r5
 8003164:	f000 f928 	bl	80033b8 <_fflush_r>
 8003168:	bb28      	cbnz	r0, 80031b6 <__swbuf_r+0x8e>
 800316a:	68a3      	ldr	r3, [r4, #8]
 800316c:	3b01      	subs	r3, #1
 800316e:	60a3      	str	r3, [r4, #8]
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	6022      	str	r2, [r4, #0]
 8003176:	701e      	strb	r6, [r3, #0]
 8003178:	6963      	ldr	r3, [r4, #20]
 800317a:	3001      	adds	r0, #1
 800317c:	4298      	cmp	r0, r3
 800317e:	d004      	beq.n	800318a <__swbuf_r+0x62>
 8003180:	89a3      	ldrh	r3, [r4, #12]
 8003182:	07db      	lsls	r3, r3, #31
 8003184:	d519      	bpl.n	80031ba <__swbuf_r+0x92>
 8003186:	2e0a      	cmp	r6, #10
 8003188:	d117      	bne.n	80031ba <__swbuf_r+0x92>
 800318a:	4621      	mov	r1, r4
 800318c:	4628      	mov	r0, r5
 800318e:	f000 f913 	bl	80033b8 <_fflush_r>
 8003192:	b190      	cbz	r0, 80031ba <__swbuf_r+0x92>
 8003194:	e00f      	b.n	80031b6 <__swbuf_r+0x8e>
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <__swbuf_r+0x9c>)
 8003198:	429c      	cmp	r4, r3
 800319a:	d101      	bne.n	80031a0 <__swbuf_r+0x78>
 800319c:	68ac      	ldr	r4, [r5, #8]
 800319e:	e7d0      	b.n	8003142 <__swbuf_r+0x1a>
 80031a0:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <__swbuf_r+0xa0>)
 80031a2:	429c      	cmp	r4, r3
 80031a4:	bf08      	it	eq
 80031a6:	68ec      	ldreq	r4, [r5, #12]
 80031a8:	e7cb      	b.n	8003142 <__swbuf_r+0x1a>
 80031aa:	4621      	mov	r1, r4
 80031ac:	4628      	mov	r0, r5
 80031ae:	f000 f80d 	bl	80031cc <__swsetup_r>
 80031b2:	2800      	cmp	r0, #0
 80031b4:	d0cc      	beq.n	8003150 <__swbuf_r+0x28>
 80031b6:	f04f 37ff 	mov.w	r7, #4294967295
 80031ba:	4638      	mov	r0, r7
 80031bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031be:	bf00      	nop
 80031c0:	08004130 	.word	0x08004130
 80031c4:	08004150 	.word	0x08004150
 80031c8:	08004110 	.word	0x08004110

080031cc <__swsetup_r>:
 80031cc:	4b32      	ldr	r3, [pc, #200]	; (8003298 <__swsetup_r+0xcc>)
 80031ce:	b570      	push	{r4, r5, r6, lr}
 80031d0:	681d      	ldr	r5, [r3, #0]
 80031d2:	4606      	mov	r6, r0
 80031d4:	460c      	mov	r4, r1
 80031d6:	b125      	cbz	r5, 80031e2 <__swsetup_r+0x16>
 80031d8:	69ab      	ldr	r3, [r5, #24]
 80031da:	b913      	cbnz	r3, 80031e2 <__swsetup_r+0x16>
 80031dc:	4628      	mov	r0, r5
 80031de:	f000 f955 	bl	800348c <__sinit>
 80031e2:	4b2e      	ldr	r3, [pc, #184]	; (800329c <__swsetup_r+0xd0>)
 80031e4:	429c      	cmp	r4, r3
 80031e6:	d10f      	bne.n	8003208 <__swsetup_r+0x3c>
 80031e8:	686c      	ldr	r4, [r5, #4]
 80031ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	0715      	lsls	r5, r2, #28
 80031f2:	d42c      	bmi.n	800324e <__swsetup_r+0x82>
 80031f4:	06d0      	lsls	r0, r2, #27
 80031f6:	d411      	bmi.n	800321c <__swsetup_r+0x50>
 80031f8:	2209      	movs	r2, #9
 80031fa:	6032      	str	r2, [r6, #0]
 80031fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003200:	81a3      	strh	r3, [r4, #12]
 8003202:	f04f 30ff 	mov.w	r0, #4294967295
 8003206:	bd70      	pop	{r4, r5, r6, pc}
 8003208:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <__swsetup_r+0xd4>)
 800320a:	429c      	cmp	r4, r3
 800320c:	d101      	bne.n	8003212 <__swsetup_r+0x46>
 800320e:	68ac      	ldr	r4, [r5, #8]
 8003210:	e7eb      	b.n	80031ea <__swsetup_r+0x1e>
 8003212:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <__swsetup_r+0xd8>)
 8003214:	429c      	cmp	r4, r3
 8003216:	bf08      	it	eq
 8003218:	68ec      	ldreq	r4, [r5, #12]
 800321a:	e7e6      	b.n	80031ea <__swsetup_r+0x1e>
 800321c:	0751      	lsls	r1, r2, #29
 800321e:	d512      	bpl.n	8003246 <__swsetup_r+0x7a>
 8003220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003222:	b141      	cbz	r1, 8003236 <__swsetup_r+0x6a>
 8003224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003228:	4299      	cmp	r1, r3
 800322a:	d002      	beq.n	8003232 <__swsetup_r+0x66>
 800322c:	4630      	mov	r0, r6
 800322e:	f000 fa1b 	bl	8003668 <_free_r>
 8003232:	2300      	movs	r3, #0
 8003234:	6363      	str	r3, [r4, #52]	; 0x34
 8003236:	89a3      	ldrh	r3, [r4, #12]
 8003238:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800323c:	81a3      	strh	r3, [r4, #12]
 800323e:	2300      	movs	r3, #0
 8003240:	6063      	str	r3, [r4, #4]
 8003242:	6923      	ldr	r3, [r4, #16]
 8003244:	6023      	str	r3, [r4, #0]
 8003246:	89a3      	ldrh	r3, [r4, #12]
 8003248:	f043 0308 	orr.w	r3, r3, #8
 800324c:	81a3      	strh	r3, [r4, #12]
 800324e:	6923      	ldr	r3, [r4, #16]
 8003250:	b94b      	cbnz	r3, 8003266 <__swsetup_r+0x9a>
 8003252:	89a3      	ldrh	r3, [r4, #12]
 8003254:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800325c:	d003      	beq.n	8003266 <__swsetup_r+0x9a>
 800325e:	4621      	mov	r1, r4
 8003260:	4630      	mov	r0, r6
 8003262:	f000 f9c1 	bl	80035e8 <__smakebuf_r>
 8003266:	89a2      	ldrh	r2, [r4, #12]
 8003268:	f012 0301 	ands.w	r3, r2, #1
 800326c:	d00c      	beq.n	8003288 <__swsetup_r+0xbc>
 800326e:	2300      	movs	r3, #0
 8003270:	60a3      	str	r3, [r4, #8]
 8003272:	6963      	ldr	r3, [r4, #20]
 8003274:	425b      	negs	r3, r3
 8003276:	61a3      	str	r3, [r4, #24]
 8003278:	6923      	ldr	r3, [r4, #16]
 800327a:	b953      	cbnz	r3, 8003292 <__swsetup_r+0xc6>
 800327c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003280:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003284:	d1ba      	bne.n	80031fc <__swsetup_r+0x30>
 8003286:	bd70      	pop	{r4, r5, r6, pc}
 8003288:	0792      	lsls	r2, r2, #30
 800328a:	bf58      	it	pl
 800328c:	6963      	ldrpl	r3, [r4, #20]
 800328e:	60a3      	str	r3, [r4, #8]
 8003290:	e7f2      	b.n	8003278 <__swsetup_r+0xac>
 8003292:	2000      	movs	r0, #0
 8003294:	e7f7      	b.n	8003286 <__swsetup_r+0xba>
 8003296:	bf00      	nop
 8003298:	20000004 	.word	0x20000004
 800329c:	08004130 	.word	0x08004130
 80032a0:	08004150 	.word	0x08004150
 80032a4:	08004110 	.word	0x08004110

080032a8 <__sflush_r>:
 80032a8:	898a      	ldrh	r2, [r1, #12]
 80032aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ae:	4605      	mov	r5, r0
 80032b0:	0710      	lsls	r0, r2, #28
 80032b2:	460c      	mov	r4, r1
 80032b4:	d45a      	bmi.n	800336c <__sflush_r+0xc4>
 80032b6:	684b      	ldr	r3, [r1, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	dc05      	bgt.n	80032c8 <__sflush_r+0x20>
 80032bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	dc02      	bgt.n	80032c8 <__sflush_r+0x20>
 80032c2:	2000      	movs	r0, #0
 80032c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032ca:	2e00      	cmp	r6, #0
 80032cc:	d0f9      	beq.n	80032c2 <__sflush_r+0x1a>
 80032ce:	2300      	movs	r3, #0
 80032d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80032d4:	682f      	ldr	r7, [r5, #0]
 80032d6:	602b      	str	r3, [r5, #0]
 80032d8:	d033      	beq.n	8003342 <__sflush_r+0x9a>
 80032da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032dc:	89a3      	ldrh	r3, [r4, #12]
 80032de:	075a      	lsls	r2, r3, #29
 80032e0:	d505      	bpl.n	80032ee <__sflush_r+0x46>
 80032e2:	6863      	ldr	r3, [r4, #4]
 80032e4:	1ac0      	subs	r0, r0, r3
 80032e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032e8:	b10b      	cbz	r3, 80032ee <__sflush_r+0x46>
 80032ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032ec:	1ac0      	subs	r0, r0, r3
 80032ee:	2300      	movs	r3, #0
 80032f0:	4602      	mov	r2, r0
 80032f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032f4:	6a21      	ldr	r1, [r4, #32]
 80032f6:	4628      	mov	r0, r5
 80032f8:	47b0      	blx	r6
 80032fa:	1c43      	adds	r3, r0, #1
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	d106      	bne.n	800330e <__sflush_r+0x66>
 8003300:	6829      	ldr	r1, [r5, #0]
 8003302:	291d      	cmp	r1, #29
 8003304:	d84b      	bhi.n	800339e <__sflush_r+0xf6>
 8003306:	4a2b      	ldr	r2, [pc, #172]	; (80033b4 <__sflush_r+0x10c>)
 8003308:	40ca      	lsrs	r2, r1
 800330a:	07d6      	lsls	r6, r2, #31
 800330c:	d547      	bpl.n	800339e <__sflush_r+0xf6>
 800330e:	2200      	movs	r2, #0
 8003310:	6062      	str	r2, [r4, #4]
 8003312:	04d9      	lsls	r1, r3, #19
 8003314:	6922      	ldr	r2, [r4, #16]
 8003316:	6022      	str	r2, [r4, #0]
 8003318:	d504      	bpl.n	8003324 <__sflush_r+0x7c>
 800331a:	1c42      	adds	r2, r0, #1
 800331c:	d101      	bne.n	8003322 <__sflush_r+0x7a>
 800331e:	682b      	ldr	r3, [r5, #0]
 8003320:	b903      	cbnz	r3, 8003324 <__sflush_r+0x7c>
 8003322:	6560      	str	r0, [r4, #84]	; 0x54
 8003324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003326:	602f      	str	r7, [r5, #0]
 8003328:	2900      	cmp	r1, #0
 800332a:	d0ca      	beq.n	80032c2 <__sflush_r+0x1a>
 800332c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003330:	4299      	cmp	r1, r3
 8003332:	d002      	beq.n	800333a <__sflush_r+0x92>
 8003334:	4628      	mov	r0, r5
 8003336:	f000 f997 	bl	8003668 <_free_r>
 800333a:	2000      	movs	r0, #0
 800333c:	6360      	str	r0, [r4, #52]	; 0x34
 800333e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003342:	6a21      	ldr	r1, [r4, #32]
 8003344:	2301      	movs	r3, #1
 8003346:	4628      	mov	r0, r5
 8003348:	47b0      	blx	r6
 800334a:	1c41      	adds	r1, r0, #1
 800334c:	d1c6      	bne.n	80032dc <__sflush_r+0x34>
 800334e:	682b      	ldr	r3, [r5, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0c3      	beq.n	80032dc <__sflush_r+0x34>
 8003354:	2b1d      	cmp	r3, #29
 8003356:	d001      	beq.n	800335c <__sflush_r+0xb4>
 8003358:	2b16      	cmp	r3, #22
 800335a:	d101      	bne.n	8003360 <__sflush_r+0xb8>
 800335c:	602f      	str	r7, [r5, #0]
 800335e:	e7b0      	b.n	80032c2 <__sflush_r+0x1a>
 8003360:	89a3      	ldrh	r3, [r4, #12]
 8003362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003366:	81a3      	strh	r3, [r4, #12]
 8003368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800336c:	690f      	ldr	r7, [r1, #16]
 800336e:	2f00      	cmp	r7, #0
 8003370:	d0a7      	beq.n	80032c2 <__sflush_r+0x1a>
 8003372:	0793      	lsls	r3, r2, #30
 8003374:	680e      	ldr	r6, [r1, #0]
 8003376:	bf08      	it	eq
 8003378:	694b      	ldreq	r3, [r1, #20]
 800337a:	600f      	str	r7, [r1, #0]
 800337c:	bf18      	it	ne
 800337e:	2300      	movne	r3, #0
 8003380:	eba6 0807 	sub.w	r8, r6, r7
 8003384:	608b      	str	r3, [r1, #8]
 8003386:	f1b8 0f00 	cmp.w	r8, #0
 800338a:	dd9a      	ble.n	80032c2 <__sflush_r+0x1a>
 800338c:	4643      	mov	r3, r8
 800338e:	463a      	mov	r2, r7
 8003390:	6a21      	ldr	r1, [r4, #32]
 8003392:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003394:	4628      	mov	r0, r5
 8003396:	47b0      	blx	r6
 8003398:	2800      	cmp	r0, #0
 800339a:	dc07      	bgt.n	80033ac <__sflush_r+0x104>
 800339c:	89a3      	ldrh	r3, [r4, #12]
 800339e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033a2:	81a3      	strh	r3, [r4, #12]
 80033a4:	f04f 30ff 	mov.w	r0, #4294967295
 80033a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033ac:	4407      	add	r7, r0
 80033ae:	eba8 0800 	sub.w	r8, r8, r0
 80033b2:	e7e8      	b.n	8003386 <__sflush_r+0xde>
 80033b4:	20400001 	.word	0x20400001

080033b8 <_fflush_r>:
 80033b8:	b538      	push	{r3, r4, r5, lr}
 80033ba:	690b      	ldr	r3, [r1, #16]
 80033bc:	4605      	mov	r5, r0
 80033be:	460c      	mov	r4, r1
 80033c0:	b1db      	cbz	r3, 80033fa <_fflush_r+0x42>
 80033c2:	b118      	cbz	r0, 80033cc <_fflush_r+0x14>
 80033c4:	6983      	ldr	r3, [r0, #24]
 80033c6:	b90b      	cbnz	r3, 80033cc <_fflush_r+0x14>
 80033c8:	f000 f860 	bl	800348c <__sinit>
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <_fflush_r+0x48>)
 80033ce:	429c      	cmp	r4, r3
 80033d0:	d109      	bne.n	80033e6 <_fflush_r+0x2e>
 80033d2:	686c      	ldr	r4, [r5, #4]
 80033d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033d8:	b17b      	cbz	r3, 80033fa <_fflush_r+0x42>
 80033da:	4621      	mov	r1, r4
 80033dc:	4628      	mov	r0, r5
 80033de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033e2:	f7ff bf61 	b.w	80032a8 <__sflush_r>
 80033e6:	4b07      	ldr	r3, [pc, #28]	; (8003404 <_fflush_r+0x4c>)
 80033e8:	429c      	cmp	r4, r3
 80033ea:	d101      	bne.n	80033f0 <_fflush_r+0x38>
 80033ec:	68ac      	ldr	r4, [r5, #8]
 80033ee:	e7f1      	b.n	80033d4 <_fflush_r+0x1c>
 80033f0:	4b05      	ldr	r3, [pc, #20]	; (8003408 <_fflush_r+0x50>)
 80033f2:	429c      	cmp	r4, r3
 80033f4:	bf08      	it	eq
 80033f6:	68ec      	ldreq	r4, [r5, #12]
 80033f8:	e7ec      	b.n	80033d4 <_fflush_r+0x1c>
 80033fa:	2000      	movs	r0, #0
 80033fc:	bd38      	pop	{r3, r4, r5, pc}
 80033fe:	bf00      	nop
 8003400:	08004130 	.word	0x08004130
 8003404:	08004150 	.word	0x08004150
 8003408:	08004110 	.word	0x08004110

0800340c <_cleanup_r>:
 800340c:	4901      	ldr	r1, [pc, #4]	; (8003414 <_cleanup_r+0x8>)
 800340e:	f000 b8a9 	b.w	8003564 <_fwalk_reent>
 8003412:	bf00      	nop
 8003414:	080033b9 	.word	0x080033b9

08003418 <std.isra.0>:
 8003418:	2300      	movs	r3, #0
 800341a:	b510      	push	{r4, lr}
 800341c:	4604      	mov	r4, r0
 800341e:	6003      	str	r3, [r0, #0]
 8003420:	6043      	str	r3, [r0, #4]
 8003422:	6083      	str	r3, [r0, #8]
 8003424:	8181      	strh	r1, [r0, #12]
 8003426:	6643      	str	r3, [r0, #100]	; 0x64
 8003428:	81c2      	strh	r2, [r0, #14]
 800342a:	6103      	str	r3, [r0, #16]
 800342c:	6143      	str	r3, [r0, #20]
 800342e:	6183      	str	r3, [r0, #24]
 8003430:	4619      	mov	r1, r3
 8003432:	2208      	movs	r2, #8
 8003434:	305c      	adds	r0, #92	; 0x5c
 8003436:	f7ff fdf3 	bl	8003020 <memset>
 800343a:	4b05      	ldr	r3, [pc, #20]	; (8003450 <std.isra.0+0x38>)
 800343c:	6263      	str	r3, [r4, #36]	; 0x24
 800343e:	4b05      	ldr	r3, [pc, #20]	; (8003454 <std.isra.0+0x3c>)
 8003440:	62a3      	str	r3, [r4, #40]	; 0x28
 8003442:	4b05      	ldr	r3, [pc, #20]	; (8003458 <std.isra.0+0x40>)
 8003444:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003446:	4b05      	ldr	r3, [pc, #20]	; (800345c <std.isra.0+0x44>)
 8003448:	6224      	str	r4, [r4, #32]
 800344a:	6323      	str	r3, [r4, #48]	; 0x30
 800344c:	bd10      	pop	{r4, pc}
 800344e:	bf00      	nop
 8003450:	08003d8d 	.word	0x08003d8d
 8003454:	08003daf 	.word	0x08003daf
 8003458:	08003de7 	.word	0x08003de7
 800345c:	08003e0b 	.word	0x08003e0b

08003460 <__sfmoreglue>:
 8003460:	b570      	push	{r4, r5, r6, lr}
 8003462:	1e4a      	subs	r2, r1, #1
 8003464:	2568      	movs	r5, #104	; 0x68
 8003466:	4355      	muls	r5, r2
 8003468:	460e      	mov	r6, r1
 800346a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800346e:	f000 f949 	bl	8003704 <_malloc_r>
 8003472:	4604      	mov	r4, r0
 8003474:	b140      	cbz	r0, 8003488 <__sfmoreglue+0x28>
 8003476:	2100      	movs	r1, #0
 8003478:	e880 0042 	stmia.w	r0, {r1, r6}
 800347c:	300c      	adds	r0, #12
 800347e:	60a0      	str	r0, [r4, #8]
 8003480:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003484:	f7ff fdcc 	bl	8003020 <memset>
 8003488:	4620      	mov	r0, r4
 800348a:	bd70      	pop	{r4, r5, r6, pc}

0800348c <__sinit>:
 800348c:	6983      	ldr	r3, [r0, #24]
 800348e:	b510      	push	{r4, lr}
 8003490:	4604      	mov	r4, r0
 8003492:	bb33      	cbnz	r3, 80034e2 <__sinit+0x56>
 8003494:	6483      	str	r3, [r0, #72]	; 0x48
 8003496:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003498:	6503      	str	r3, [r0, #80]	; 0x50
 800349a:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <__sinit+0x58>)
 800349c:	4a12      	ldr	r2, [pc, #72]	; (80034e8 <__sinit+0x5c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6282      	str	r2, [r0, #40]	; 0x28
 80034a2:	4298      	cmp	r0, r3
 80034a4:	bf04      	itt	eq
 80034a6:	2301      	moveq	r3, #1
 80034a8:	6183      	streq	r3, [r0, #24]
 80034aa:	f000 f81f 	bl	80034ec <__sfp>
 80034ae:	6060      	str	r0, [r4, #4]
 80034b0:	4620      	mov	r0, r4
 80034b2:	f000 f81b 	bl	80034ec <__sfp>
 80034b6:	60a0      	str	r0, [r4, #8]
 80034b8:	4620      	mov	r0, r4
 80034ba:	f000 f817 	bl	80034ec <__sfp>
 80034be:	2200      	movs	r2, #0
 80034c0:	60e0      	str	r0, [r4, #12]
 80034c2:	2104      	movs	r1, #4
 80034c4:	6860      	ldr	r0, [r4, #4]
 80034c6:	f7ff ffa7 	bl	8003418 <std.isra.0>
 80034ca:	2201      	movs	r2, #1
 80034cc:	2109      	movs	r1, #9
 80034ce:	68a0      	ldr	r0, [r4, #8]
 80034d0:	f7ff ffa2 	bl	8003418 <std.isra.0>
 80034d4:	2202      	movs	r2, #2
 80034d6:	2112      	movs	r1, #18
 80034d8:	68e0      	ldr	r0, [r4, #12]
 80034da:	f7ff ff9d 	bl	8003418 <std.isra.0>
 80034de:	2301      	movs	r3, #1
 80034e0:	61a3      	str	r3, [r4, #24]
 80034e2:	bd10      	pop	{r4, pc}
 80034e4:	0800410c 	.word	0x0800410c
 80034e8:	0800340d 	.word	0x0800340d

080034ec <__sfp>:
 80034ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ee:	4b1c      	ldr	r3, [pc, #112]	; (8003560 <__sfp+0x74>)
 80034f0:	681e      	ldr	r6, [r3, #0]
 80034f2:	69b3      	ldr	r3, [r6, #24]
 80034f4:	4607      	mov	r7, r0
 80034f6:	b913      	cbnz	r3, 80034fe <__sfp+0x12>
 80034f8:	4630      	mov	r0, r6
 80034fa:	f7ff ffc7 	bl	800348c <__sinit>
 80034fe:	3648      	adds	r6, #72	; 0x48
 8003500:	68b4      	ldr	r4, [r6, #8]
 8003502:	6873      	ldr	r3, [r6, #4]
 8003504:	3b01      	subs	r3, #1
 8003506:	d503      	bpl.n	8003510 <__sfp+0x24>
 8003508:	6833      	ldr	r3, [r6, #0]
 800350a:	b133      	cbz	r3, 800351a <__sfp+0x2e>
 800350c:	6836      	ldr	r6, [r6, #0]
 800350e:	e7f7      	b.n	8003500 <__sfp+0x14>
 8003510:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003514:	b16d      	cbz	r5, 8003532 <__sfp+0x46>
 8003516:	3468      	adds	r4, #104	; 0x68
 8003518:	e7f4      	b.n	8003504 <__sfp+0x18>
 800351a:	2104      	movs	r1, #4
 800351c:	4638      	mov	r0, r7
 800351e:	f7ff ff9f 	bl	8003460 <__sfmoreglue>
 8003522:	6030      	str	r0, [r6, #0]
 8003524:	2800      	cmp	r0, #0
 8003526:	d1f1      	bne.n	800350c <__sfp+0x20>
 8003528:	230c      	movs	r3, #12
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	4604      	mov	r4, r0
 800352e:	4620      	mov	r0, r4
 8003530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003532:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003536:	81e3      	strh	r3, [r4, #14]
 8003538:	2301      	movs	r3, #1
 800353a:	81a3      	strh	r3, [r4, #12]
 800353c:	6665      	str	r5, [r4, #100]	; 0x64
 800353e:	6025      	str	r5, [r4, #0]
 8003540:	60a5      	str	r5, [r4, #8]
 8003542:	6065      	str	r5, [r4, #4]
 8003544:	6125      	str	r5, [r4, #16]
 8003546:	6165      	str	r5, [r4, #20]
 8003548:	61a5      	str	r5, [r4, #24]
 800354a:	2208      	movs	r2, #8
 800354c:	4629      	mov	r1, r5
 800354e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003552:	f7ff fd65 	bl	8003020 <memset>
 8003556:	6365      	str	r5, [r4, #52]	; 0x34
 8003558:	63a5      	str	r5, [r4, #56]	; 0x38
 800355a:	64a5      	str	r5, [r4, #72]	; 0x48
 800355c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800355e:	e7e6      	b.n	800352e <__sfp+0x42>
 8003560:	0800410c 	.word	0x0800410c

08003564 <_fwalk_reent>:
 8003564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003568:	4680      	mov	r8, r0
 800356a:	4689      	mov	r9, r1
 800356c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003570:	2600      	movs	r6, #0
 8003572:	b914      	cbnz	r4, 800357a <_fwalk_reent+0x16>
 8003574:	4630      	mov	r0, r6
 8003576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800357a:	68a5      	ldr	r5, [r4, #8]
 800357c:	6867      	ldr	r7, [r4, #4]
 800357e:	3f01      	subs	r7, #1
 8003580:	d501      	bpl.n	8003586 <_fwalk_reent+0x22>
 8003582:	6824      	ldr	r4, [r4, #0]
 8003584:	e7f5      	b.n	8003572 <_fwalk_reent+0xe>
 8003586:	89ab      	ldrh	r3, [r5, #12]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d907      	bls.n	800359c <_fwalk_reent+0x38>
 800358c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003590:	3301      	adds	r3, #1
 8003592:	d003      	beq.n	800359c <_fwalk_reent+0x38>
 8003594:	4629      	mov	r1, r5
 8003596:	4640      	mov	r0, r8
 8003598:	47c8      	blx	r9
 800359a:	4306      	orrs	r6, r0
 800359c:	3568      	adds	r5, #104	; 0x68
 800359e:	e7ee      	b.n	800357e <_fwalk_reent+0x1a>

080035a0 <__swhatbuf_r>:
 80035a0:	b570      	push	{r4, r5, r6, lr}
 80035a2:	460e      	mov	r6, r1
 80035a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035a8:	2900      	cmp	r1, #0
 80035aa:	b090      	sub	sp, #64	; 0x40
 80035ac:	4614      	mov	r4, r2
 80035ae:	461d      	mov	r5, r3
 80035b0:	da07      	bge.n	80035c2 <__swhatbuf_r+0x22>
 80035b2:	2300      	movs	r3, #0
 80035b4:	602b      	str	r3, [r5, #0]
 80035b6:	89b3      	ldrh	r3, [r6, #12]
 80035b8:	061a      	lsls	r2, r3, #24
 80035ba:	d410      	bmi.n	80035de <__swhatbuf_r+0x3e>
 80035bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035c0:	e00e      	b.n	80035e0 <__swhatbuf_r+0x40>
 80035c2:	aa01      	add	r2, sp, #4
 80035c4:	f000 fc48 	bl	8003e58 <_fstat_r>
 80035c8:	2800      	cmp	r0, #0
 80035ca:	dbf2      	blt.n	80035b2 <__swhatbuf_r+0x12>
 80035cc:	9a02      	ldr	r2, [sp, #8]
 80035ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80035d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80035d6:	425a      	negs	r2, r3
 80035d8:	415a      	adcs	r2, r3
 80035da:	602a      	str	r2, [r5, #0]
 80035dc:	e7ee      	b.n	80035bc <__swhatbuf_r+0x1c>
 80035de:	2340      	movs	r3, #64	; 0x40
 80035e0:	2000      	movs	r0, #0
 80035e2:	6023      	str	r3, [r4, #0]
 80035e4:	b010      	add	sp, #64	; 0x40
 80035e6:	bd70      	pop	{r4, r5, r6, pc}

080035e8 <__smakebuf_r>:
 80035e8:	898b      	ldrh	r3, [r1, #12]
 80035ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80035ec:	079d      	lsls	r5, r3, #30
 80035ee:	4606      	mov	r6, r0
 80035f0:	460c      	mov	r4, r1
 80035f2:	d507      	bpl.n	8003604 <__smakebuf_r+0x1c>
 80035f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80035f8:	6023      	str	r3, [r4, #0]
 80035fa:	6123      	str	r3, [r4, #16]
 80035fc:	2301      	movs	r3, #1
 80035fe:	6163      	str	r3, [r4, #20]
 8003600:	b002      	add	sp, #8
 8003602:	bd70      	pop	{r4, r5, r6, pc}
 8003604:	ab01      	add	r3, sp, #4
 8003606:	466a      	mov	r2, sp
 8003608:	f7ff ffca 	bl	80035a0 <__swhatbuf_r>
 800360c:	9900      	ldr	r1, [sp, #0]
 800360e:	4605      	mov	r5, r0
 8003610:	4630      	mov	r0, r6
 8003612:	f000 f877 	bl	8003704 <_malloc_r>
 8003616:	b948      	cbnz	r0, 800362c <__smakebuf_r+0x44>
 8003618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800361c:	059a      	lsls	r2, r3, #22
 800361e:	d4ef      	bmi.n	8003600 <__smakebuf_r+0x18>
 8003620:	f023 0303 	bic.w	r3, r3, #3
 8003624:	f043 0302 	orr.w	r3, r3, #2
 8003628:	81a3      	strh	r3, [r4, #12]
 800362a:	e7e3      	b.n	80035f4 <__smakebuf_r+0xc>
 800362c:	4b0d      	ldr	r3, [pc, #52]	; (8003664 <__smakebuf_r+0x7c>)
 800362e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003630:	89a3      	ldrh	r3, [r4, #12]
 8003632:	6020      	str	r0, [r4, #0]
 8003634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003638:	81a3      	strh	r3, [r4, #12]
 800363a:	9b00      	ldr	r3, [sp, #0]
 800363c:	6163      	str	r3, [r4, #20]
 800363e:	9b01      	ldr	r3, [sp, #4]
 8003640:	6120      	str	r0, [r4, #16]
 8003642:	b15b      	cbz	r3, 800365c <__smakebuf_r+0x74>
 8003644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003648:	4630      	mov	r0, r6
 800364a:	f000 fc17 	bl	8003e7c <_isatty_r>
 800364e:	b128      	cbz	r0, 800365c <__smakebuf_r+0x74>
 8003650:	89a3      	ldrh	r3, [r4, #12]
 8003652:	f023 0303 	bic.w	r3, r3, #3
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	81a3      	strh	r3, [r4, #12]
 800365c:	89a3      	ldrh	r3, [r4, #12]
 800365e:	431d      	orrs	r5, r3
 8003660:	81a5      	strh	r5, [r4, #12]
 8003662:	e7cd      	b.n	8003600 <__smakebuf_r+0x18>
 8003664:	0800340d 	.word	0x0800340d

08003668 <_free_r>:
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	4605      	mov	r5, r0
 800366c:	2900      	cmp	r1, #0
 800366e:	d045      	beq.n	80036fc <_free_r+0x94>
 8003670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003674:	1f0c      	subs	r4, r1, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	bfb8      	it	lt
 800367a:	18e4      	addlt	r4, r4, r3
 800367c:	f000 fc20 	bl	8003ec0 <__malloc_lock>
 8003680:	4a1f      	ldr	r2, [pc, #124]	; (8003700 <_free_r+0x98>)
 8003682:	6813      	ldr	r3, [r2, #0]
 8003684:	4610      	mov	r0, r2
 8003686:	b933      	cbnz	r3, 8003696 <_free_r+0x2e>
 8003688:	6063      	str	r3, [r4, #4]
 800368a:	6014      	str	r4, [r2, #0]
 800368c:	4628      	mov	r0, r5
 800368e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003692:	f000 bc16 	b.w	8003ec2 <__malloc_unlock>
 8003696:	42a3      	cmp	r3, r4
 8003698:	d90c      	bls.n	80036b4 <_free_r+0x4c>
 800369a:	6821      	ldr	r1, [r4, #0]
 800369c:	1862      	adds	r2, r4, r1
 800369e:	4293      	cmp	r3, r2
 80036a0:	bf04      	itt	eq
 80036a2:	681a      	ldreq	r2, [r3, #0]
 80036a4:	685b      	ldreq	r3, [r3, #4]
 80036a6:	6063      	str	r3, [r4, #4]
 80036a8:	bf04      	itt	eq
 80036aa:	1852      	addeq	r2, r2, r1
 80036ac:	6022      	streq	r2, [r4, #0]
 80036ae:	6004      	str	r4, [r0, #0]
 80036b0:	e7ec      	b.n	800368c <_free_r+0x24>
 80036b2:	4613      	mov	r3, r2
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	b10a      	cbz	r2, 80036bc <_free_r+0x54>
 80036b8:	42a2      	cmp	r2, r4
 80036ba:	d9fa      	bls.n	80036b2 <_free_r+0x4a>
 80036bc:	6819      	ldr	r1, [r3, #0]
 80036be:	1858      	adds	r0, r3, r1
 80036c0:	42a0      	cmp	r0, r4
 80036c2:	d10b      	bne.n	80036dc <_free_r+0x74>
 80036c4:	6820      	ldr	r0, [r4, #0]
 80036c6:	4401      	add	r1, r0
 80036c8:	1858      	adds	r0, r3, r1
 80036ca:	4282      	cmp	r2, r0
 80036cc:	6019      	str	r1, [r3, #0]
 80036ce:	d1dd      	bne.n	800368c <_free_r+0x24>
 80036d0:	6810      	ldr	r0, [r2, #0]
 80036d2:	6852      	ldr	r2, [r2, #4]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	4401      	add	r1, r0
 80036d8:	6019      	str	r1, [r3, #0]
 80036da:	e7d7      	b.n	800368c <_free_r+0x24>
 80036dc:	d902      	bls.n	80036e4 <_free_r+0x7c>
 80036de:	230c      	movs	r3, #12
 80036e0:	602b      	str	r3, [r5, #0]
 80036e2:	e7d3      	b.n	800368c <_free_r+0x24>
 80036e4:	6820      	ldr	r0, [r4, #0]
 80036e6:	1821      	adds	r1, r4, r0
 80036e8:	428a      	cmp	r2, r1
 80036ea:	bf04      	itt	eq
 80036ec:	6811      	ldreq	r1, [r2, #0]
 80036ee:	6852      	ldreq	r2, [r2, #4]
 80036f0:	6062      	str	r2, [r4, #4]
 80036f2:	bf04      	itt	eq
 80036f4:	1809      	addeq	r1, r1, r0
 80036f6:	6021      	streq	r1, [r4, #0]
 80036f8:	605c      	str	r4, [r3, #4]
 80036fa:	e7c7      	b.n	800368c <_free_r+0x24>
 80036fc:	bd38      	pop	{r3, r4, r5, pc}
 80036fe:	bf00      	nop
 8003700:	20000084 	.word	0x20000084

08003704 <_malloc_r>:
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	1ccd      	adds	r5, r1, #3
 8003708:	f025 0503 	bic.w	r5, r5, #3
 800370c:	3508      	adds	r5, #8
 800370e:	2d0c      	cmp	r5, #12
 8003710:	bf38      	it	cc
 8003712:	250c      	movcc	r5, #12
 8003714:	2d00      	cmp	r5, #0
 8003716:	4606      	mov	r6, r0
 8003718:	db01      	blt.n	800371e <_malloc_r+0x1a>
 800371a:	42a9      	cmp	r1, r5
 800371c:	d903      	bls.n	8003726 <_malloc_r+0x22>
 800371e:	230c      	movs	r3, #12
 8003720:	6033      	str	r3, [r6, #0]
 8003722:	2000      	movs	r0, #0
 8003724:	bd70      	pop	{r4, r5, r6, pc}
 8003726:	f000 fbcb 	bl	8003ec0 <__malloc_lock>
 800372a:	4a23      	ldr	r2, [pc, #140]	; (80037b8 <_malloc_r+0xb4>)
 800372c:	6814      	ldr	r4, [r2, #0]
 800372e:	4621      	mov	r1, r4
 8003730:	b991      	cbnz	r1, 8003758 <_malloc_r+0x54>
 8003732:	4c22      	ldr	r4, [pc, #136]	; (80037bc <_malloc_r+0xb8>)
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	b91b      	cbnz	r3, 8003740 <_malloc_r+0x3c>
 8003738:	4630      	mov	r0, r6
 800373a:	f000 fb17 	bl	8003d6c <_sbrk_r>
 800373e:	6020      	str	r0, [r4, #0]
 8003740:	4629      	mov	r1, r5
 8003742:	4630      	mov	r0, r6
 8003744:	f000 fb12 	bl	8003d6c <_sbrk_r>
 8003748:	1c43      	adds	r3, r0, #1
 800374a:	d126      	bne.n	800379a <_malloc_r+0x96>
 800374c:	230c      	movs	r3, #12
 800374e:	6033      	str	r3, [r6, #0]
 8003750:	4630      	mov	r0, r6
 8003752:	f000 fbb6 	bl	8003ec2 <__malloc_unlock>
 8003756:	e7e4      	b.n	8003722 <_malloc_r+0x1e>
 8003758:	680b      	ldr	r3, [r1, #0]
 800375a:	1b5b      	subs	r3, r3, r5
 800375c:	d41a      	bmi.n	8003794 <_malloc_r+0x90>
 800375e:	2b0b      	cmp	r3, #11
 8003760:	d90f      	bls.n	8003782 <_malloc_r+0x7e>
 8003762:	600b      	str	r3, [r1, #0]
 8003764:	50cd      	str	r5, [r1, r3]
 8003766:	18cc      	adds	r4, r1, r3
 8003768:	4630      	mov	r0, r6
 800376a:	f000 fbaa 	bl	8003ec2 <__malloc_unlock>
 800376e:	f104 000b 	add.w	r0, r4, #11
 8003772:	1d23      	adds	r3, r4, #4
 8003774:	f020 0007 	bic.w	r0, r0, #7
 8003778:	1ac3      	subs	r3, r0, r3
 800377a:	d01b      	beq.n	80037b4 <_malloc_r+0xb0>
 800377c:	425a      	negs	r2, r3
 800377e:	50e2      	str	r2, [r4, r3]
 8003780:	bd70      	pop	{r4, r5, r6, pc}
 8003782:	428c      	cmp	r4, r1
 8003784:	bf0d      	iteet	eq
 8003786:	6863      	ldreq	r3, [r4, #4]
 8003788:	684b      	ldrne	r3, [r1, #4]
 800378a:	6063      	strne	r3, [r4, #4]
 800378c:	6013      	streq	r3, [r2, #0]
 800378e:	bf18      	it	ne
 8003790:	460c      	movne	r4, r1
 8003792:	e7e9      	b.n	8003768 <_malloc_r+0x64>
 8003794:	460c      	mov	r4, r1
 8003796:	6849      	ldr	r1, [r1, #4]
 8003798:	e7ca      	b.n	8003730 <_malloc_r+0x2c>
 800379a:	1cc4      	adds	r4, r0, #3
 800379c:	f024 0403 	bic.w	r4, r4, #3
 80037a0:	42a0      	cmp	r0, r4
 80037a2:	d005      	beq.n	80037b0 <_malloc_r+0xac>
 80037a4:	1a21      	subs	r1, r4, r0
 80037a6:	4630      	mov	r0, r6
 80037a8:	f000 fae0 	bl	8003d6c <_sbrk_r>
 80037ac:	3001      	adds	r0, #1
 80037ae:	d0cd      	beq.n	800374c <_malloc_r+0x48>
 80037b0:	6025      	str	r5, [r4, #0]
 80037b2:	e7d9      	b.n	8003768 <_malloc_r+0x64>
 80037b4:	bd70      	pop	{r4, r5, r6, pc}
 80037b6:	bf00      	nop
 80037b8:	20000084 	.word	0x20000084
 80037bc:	20000088 	.word	0x20000088

080037c0 <__sfputc_r>:
 80037c0:	6893      	ldr	r3, [r2, #8]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	b410      	push	{r4}
 80037c8:	6093      	str	r3, [r2, #8]
 80037ca:	da09      	bge.n	80037e0 <__sfputc_r+0x20>
 80037cc:	6994      	ldr	r4, [r2, #24]
 80037ce:	42a3      	cmp	r3, r4
 80037d0:	db02      	blt.n	80037d8 <__sfputc_r+0x18>
 80037d2:	b2cb      	uxtb	r3, r1
 80037d4:	2b0a      	cmp	r3, #10
 80037d6:	d103      	bne.n	80037e0 <__sfputc_r+0x20>
 80037d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037dc:	f7ff bca4 	b.w	8003128 <__swbuf_r>
 80037e0:	6813      	ldr	r3, [r2, #0]
 80037e2:	1c58      	adds	r0, r3, #1
 80037e4:	6010      	str	r0, [r2, #0]
 80037e6:	7019      	strb	r1, [r3, #0]
 80037e8:	b2c8      	uxtb	r0, r1
 80037ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <__sfputs_r>:
 80037f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f2:	4606      	mov	r6, r0
 80037f4:	460f      	mov	r7, r1
 80037f6:	4614      	mov	r4, r2
 80037f8:	18d5      	adds	r5, r2, r3
 80037fa:	42ac      	cmp	r4, r5
 80037fc:	d101      	bne.n	8003802 <__sfputs_r+0x12>
 80037fe:	2000      	movs	r0, #0
 8003800:	e007      	b.n	8003812 <__sfputs_r+0x22>
 8003802:	463a      	mov	r2, r7
 8003804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003808:	4630      	mov	r0, r6
 800380a:	f7ff ffd9 	bl	80037c0 <__sfputc_r>
 800380e:	1c43      	adds	r3, r0, #1
 8003810:	d1f3      	bne.n	80037fa <__sfputs_r+0xa>
 8003812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003814 <_vfiprintf_r>:
 8003814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003818:	b09d      	sub	sp, #116	; 0x74
 800381a:	460c      	mov	r4, r1
 800381c:	4617      	mov	r7, r2
 800381e:	9303      	str	r3, [sp, #12]
 8003820:	4606      	mov	r6, r0
 8003822:	b118      	cbz	r0, 800382c <_vfiprintf_r+0x18>
 8003824:	6983      	ldr	r3, [r0, #24]
 8003826:	b90b      	cbnz	r3, 800382c <_vfiprintf_r+0x18>
 8003828:	f7ff fe30 	bl	800348c <__sinit>
 800382c:	4b7c      	ldr	r3, [pc, #496]	; (8003a20 <_vfiprintf_r+0x20c>)
 800382e:	429c      	cmp	r4, r3
 8003830:	d157      	bne.n	80038e2 <_vfiprintf_r+0xce>
 8003832:	6874      	ldr	r4, [r6, #4]
 8003834:	89a3      	ldrh	r3, [r4, #12]
 8003836:	0718      	lsls	r0, r3, #28
 8003838:	d55d      	bpl.n	80038f6 <_vfiprintf_r+0xe2>
 800383a:	6923      	ldr	r3, [r4, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d05a      	beq.n	80038f6 <_vfiprintf_r+0xe2>
 8003840:	2300      	movs	r3, #0
 8003842:	9309      	str	r3, [sp, #36]	; 0x24
 8003844:	2320      	movs	r3, #32
 8003846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800384a:	2330      	movs	r3, #48	; 0x30
 800384c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003850:	f04f 0b01 	mov.w	fp, #1
 8003854:	46b8      	mov	r8, r7
 8003856:	4645      	mov	r5, r8
 8003858:	f815 3b01 	ldrb.w	r3, [r5], #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d155      	bne.n	800390c <_vfiprintf_r+0xf8>
 8003860:	ebb8 0a07 	subs.w	sl, r8, r7
 8003864:	d00b      	beq.n	800387e <_vfiprintf_r+0x6a>
 8003866:	4653      	mov	r3, sl
 8003868:	463a      	mov	r2, r7
 800386a:	4621      	mov	r1, r4
 800386c:	4630      	mov	r0, r6
 800386e:	f7ff ffbf 	bl	80037f0 <__sfputs_r>
 8003872:	3001      	adds	r0, #1
 8003874:	f000 80c4 	beq.w	8003a00 <_vfiprintf_r+0x1ec>
 8003878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800387a:	4453      	add	r3, sl
 800387c:	9309      	str	r3, [sp, #36]	; 0x24
 800387e:	f898 3000 	ldrb.w	r3, [r8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 80bc 	beq.w	8003a00 <_vfiprintf_r+0x1ec>
 8003888:	2300      	movs	r3, #0
 800388a:	f04f 32ff 	mov.w	r2, #4294967295
 800388e:	9304      	str	r3, [sp, #16]
 8003890:	9307      	str	r3, [sp, #28]
 8003892:	9205      	str	r2, [sp, #20]
 8003894:	9306      	str	r3, [sp, #24]
 8003896:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800389a:	931a      	str	r3, [sp, #104]	; 0x68
 800389c:	2205      	movs	r2, #5
 800389e:	7829      	ldrb	r1, [r5, #0]
 80038a0:	4860      	ldr	r0, [pc, #384]	; (8003a24 <_vfiprintf_r+0x210>)
 80038a2:	f7fc fc9d 	bl	80001e0 <memchr>
 80038a6:	f105 0801 	add.w	r8, r5, #1
 80038aa:	9b04      	ldr	r3, [sp, #16]
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d131      	bne.n	8003914 <_vfiprintf_r+0x100>
 80038b0:	06d9      	lsls	r1, r3, #27
 80038b2:	bf44      	itt	mi
 80038b4:	2220      	movmi	r2, #32
 80038b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80038ba:	071a      	lsls	r2, r3, #28
 80038bc:	bf44      	itt	mi
 80038be:	222b      	movmi	r2, #43	; 0x2b
 80038c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80038c4:	782a      	ldrb	r2, [r5, #0]
 80038c6:	2a2a      	cmp	r2, #42	; 0x2a
 80038c8:	d02c      	beq.n	8003924 <_vfiprintf_r+0x110>
 80038ca:	9a07      	ldr	r2, [sp, #28]
 80038cc:	2100      	movs	r1, #0
 80038ce:	200a      	movs	r0, #10
 80038d0:	46a8      	mov	r8, r5
 80038d2:	3501      	adds	r5, #1
 80038d4:	f898 3000 	ldrb.w	r3, [r8]
 80038d8:	3b30      	subs	r3, #48	; 0x30
 80038da:	2b09      	cmp	r3, #9
 80038dc:	d96d      	bls.n	80039ba <_vfiprintf_r+0x1a6>
 80038de:	b371      	cbz	r1, 800393e <_vfiprintf_r+0x12a>
 80038e0:	e026      	b.n	8003930 <_vfiprintf_r+0x11c>
 80038e2:	4b51      	ldr	r3, [pc, #324]	; (8003a28 <_vfiprintf_r+0x214>)
 80038e4:	429c      	cmp	r4, r3
 80038e6:	d101      	bne.n	80038ec <_vfiprintf_r+0xd8>
 80038e8:	68b4      	ldr	r4, [r6, #8]
 80038ea:	e7a3      	b.n	8003834 <_vfiprintf_r+0x20>
 80038ec:	4b4f      	ldr	r3, [pc, #316]	; (8003a2c <_vfiprintf_r+0x218>)
 80038ee:	429c      	cmp	r4, r3
 80038f0:	bf08      	it	eq
 80038f2:	68f4      	ldreq	r4, [r6, #12]
 80038f4:	e79e      	b.n	8003834 <_vfiprintf_r+0x20>
 80038f6:	4621      	mov	r1, r4
 80038f8:	4630      	mov	r0, r6
 80038fa:	f7ff fc67 	bl	80031cc <__swsetup_r>
 80038fe:	2800      	cmp	r0, #0
 8003900:	d09e      	beq.n	8003840 <_vfiprintf_r+0x2c>
 8003902:	f04f 30ff 	mov.w	r0, #4294967295
 8003906:	b01d      	add	sp, #116	; 0x74
 8003908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800390c:	2b25      	cmp	r3, #37	; 0x25
 800390e:	d0a7      	beq.n	8003860 <_vfiprintf_r+0x4c>
 8003910:	46a8      	mov	r8, r5
 8003912:	e7a0      	b.n	8003856 <_vfiprintf_r+0x42>
 8003914:	4a43      	ldr	r2, [pc, #268]	; (8003a24 <_vfiprintf_r+0x210>)
 8003916:	1a80      	subs	r0, r0, r2
 8003918:	fa0b f000 	lsl.w	r0, fp, r0
 800391c:	4318      	orrs	r0, r3
 800391e:	9004      	str	r0, [sp, #16]
 8003920:	4645      	mov	r5, r8
 8003922:	e7bb      	b.n	800389c <_vfiprintf_r+0x88>
 8003924:	9a03      	ldr	r2, [sp, #12]
 8003926:	1d11      	adds	r1, r2, #4
 8003928:	6812      	ldr	r2, [r2, #0]
 800392a:	9103      	str	r1, [sp, #12]
 800392c:	2a00      	cmp	r2, #0
 800392e:	db01      	blt.n	8003934 <_vfiprintf_r+0x120>
 8003930:	9207      	str	r2, [sp, #28]
 8003932:	e004      	b.n	800393e <_vfiprintf_r+0x12a>
 8003934:	4252      	negs	r2, r2
 8003936:	f043 0302 	orr.w	r3, r3, #2
 800393a:	9207      	str	r2, [sp, #28]
 800393c:	9304      	str	r3, [sp, #16]
 800393e:	f898 3000 	ldrb.w	r3, [r8]
 8003942:	2b2e      	cmp	r3, #46	; 0x2e
 8003944:	d110      	bne.n	8003968 <_vfiprintf_r+0x154>
 8003946:	f898 3001 	ldrb.w	r3, [r8, #1]
 800394a:	2b2a      	cmp	r3, #42	; 0x2a
 800394c:	f108 0101 	add.w	r1, r8, #1
 8003950:	d137      	bne.n	80039c2 <_vfiprintf_r+0x1ae>
 8003952:	9b03      	ldr	r3, [sp, #12]
 8003954:	1d1a      	adds	r2, r3, #4
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	9203      	str	r2, [sp, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	bfb8      	it	lt
 800395e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003962:	f108 0802 	add.w	r8, r8, #2
 8003966:	9305      	str	r3, [sp, #20]
 8003968:	4d31      	ldr	r5, [pc, #196]	; (8003a30 <_vfiprintf_r+0x21c>)
 800396a:	f898 1000 	ldrb.w	r1, [r8]
 800396e:	2203      	movs	r2, #3
 8003970:	4628      	mov	r0, r5
 8003972:	f7fc fc35 	bl	80001e0 <memchr>
 8003976:	b140      	cbz	r0, 800398a <_vfiprintf_r+0x176>
 8003978:	2340      	movs	r3, #64	; 0x40
 800397a:	1b40      	subs	r0, r0, r5
 800397c:	fa03 f000 	lsl.w	r0, r3, r0
 8003980:	9b04      	ldr	r3, [sp, #16]
 8003982:	4303      	orrs	r3, r0
 8003984:	9304      	str	r3, [sp, #16]
 8003986:	f108 0801 	add.w	r8, r8, #1
 800398a:	f898 1000 	ldrb.w	r1, [r8]
 800398e:	4829      	ldr	r0, [pc, #164]	; (8003a34 <_vfiprintf_r+0x220>)
 8003990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003994:	2206      	movs	r2, #6
 8003996:	f108 0701 	add.w	r7, r8, #1
 800399a:	f7fc fc21 	bl	80001e0 <memchr>
 800399e:	2800      	cmp	r0, #0
 80039a0:	d034      	beq.n	8003a0c <_vfiprintf_r+0x1f8>
 80039a2:	4b25      	ldr	r3, [pc, #148]	; (8003a38 <_vfiprintf_r+0x224>)
 80039a4:	bb03      	cbnz	r3, 80039e8 <_vfiprintf_r+0x1d4>
 80039a6:	9b03      	ldr	r3, [sp, #12]
 80039a8:	3307      	adds	r3, #7
 80039aa:	f023 0307 	bic.w	r3, r3, #7
 80039ae:	3308      	adds	r3, #8
 80039b0:	9303      	str	r3, [sp, #12]
 80039b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039b4:	444b      	add	r3, r9
 80039b6:	9309      	str	r3, [sp, #36]	; 0x24
 80039b8:	e74c      	b.n	8003854 <_vfiprintf_r+0x40>
 80039ba:	fb00 3202 	mla	r2, r0, r2, r3
 80039be:	2101      	movs	r1, #1
 80039c0:	e786      	b.n	80038d0 <_vfiprintf_r+0xbc>
 80039c2:	2300      	movs	r3, #0
 80039c4:	9305      	str	r3, [sp, #20]
 80039c6:	4618      	mov	r0, r3
 80039c8:	250a      	movs	r5, #10
 80039ca:	4688      	mov	r8, r1
 80039cc:	3101      	adds	r1, #1
 80039ce:	f898 2000 	ldrb.w	r2, [r8]
 80039d2:	3a30      	subs	r2, #48	; 0x30
 80039d4:	2a09      	cmp	r2, #9
 80039d6:	d903      	bls.n	80039e0 <_vfiprintf_r+0x1cc>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0c5      	beq.n	8003968 <_vfiprintf_r+0x154>
 80039dc:	9005      	str	r0, [sp, #20]
 80039de:	e7c3      	b.n	8003968 <_vfiprintf_r+0x154>
 80039e0:	fb05 2000 	mla	r0, r5, r0, r2
 80039e4:	2301      	movs	r3, #1
 80039e6:	e7f0      	b.n	80039ca <_vfiprintf_r+0x1b6>
 80039e8:	ab03      	add	r3, sp, #12
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	4622      	mov	r2, r4
 80039ee:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <_vfiprintf_r+0x228>)
 80039f0:	a904      	add	r1, sp, #16
 80039f2:	4630      	mov	r0, r6
 80039f4:	f3af 8000 	nop.w
 80039f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80039fc:	4681      	mov	r9, r0
 80039fe:	d1d8      	bne.n	80039b2 <_vfiprintf_r+0x19e>
 8003a00:	89a3      	ldrh	r3, [r4, #12]
 8003a02:	065b      	lsls	r3, r3, #25
 8003a04:	f53f af7d 	bmi.w	8003902 <_vfiprintf_r+0xee>
 8003a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a0a:	e77c      	b.n	8003906 <_vfiprintf_r+0xf2>
 8003a0c:	ab03      	add	r3, sp, #12
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	4622      	mov	r2, r4
 8003a12:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <_vfiprintf_r+0x228>)
 8003a14:	a904      	add	r1, sp, #16
 8003a16:	4630      	mov	r0, r6
 8003a18:	f000 f888 	bl	8003b2c <_printf_i>
 8003a1c:	e7ec      	b.n	80039f8 <_vfiprintf_r+0x1e4>
 8003a1e:	bf00      	nop
 8003a20:	08004130 	.word	0x08004130
 8003a24:	08004170 	.word	0x08004170
 8003a28:	08004150 	.word	0x08004150
 8003a2c:	08004110 	.word	0x08004110
 8003a30:	08004176 	.word	0x08004176
 8003a34:	0800417a 	.word	0x0800417a
 8003a38:	00000000 	.word	0x00000000
 8003a3c:	080037f1 	.word	0x080037f1

08003a40 <_printf_common>:
 8003a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a44:	4691      	mov	r9, r2
 8003a46:	461f      	mov	r7, r3
 8003a48:	688a      	ldr	r2, [r1, #8]
 8003a4a:	690b      	ldr	r3, [r1, #16]
 8003a4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a50:	4293      	cmp	r3, r2
 8003a52:	bfb8      	it	lt
 8003a54:	4613      	movlt	r3, r2
 8003a56:	f8c9 3000 	str.w	r3, [r9]
 8003a5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a5e:	4606      	mov	r6, r0
 8003a60:	460c      	mov	r4, r1
 8003a62:	b112      	cbz	r2, 8003a6a <_printf_common+0x2a>
 8003a64:	3301      	adds	r3, #1
 8003a66:	f8c9 3000 	str.w	r3, [r9]
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	0699      	lsls	r1, r3, #26
 8003a6e:	bf42      	ittt	mi
 8003a70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003a74:	3302      	addmi	r3, #2
 8003a76:	f8c9 3000 	strmi.w	r3, [r9]
 8003a7a:	6825      	ldr	r5, [r4, #0]
 8003a7c:	f015 0506 	ands.w	r5, r5, #6
 8003a80:	d107      	bne.n	8003a92 <_printf_common+0x52>
 8003a82:	f104 0a19 	add.w	sl, r4, #25
 8003a86:	68e3      	ldr	r3, [r4, #12]
 8003a88:	f8d9 2000 	ldr.w	r2, [r9]
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	429d      	cmp	r5, r3
 8003a90:	db29      	blt.n	8003ae6 <_printf_common+0xa6>
 8003a92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003a96:	6822      	ldr	r2, [r4, #0]
 8003a98:	3300      	adds	r3, #0
 8003a9a:	bf18      	it	ne
 8003a9c:	2301      	movne	r3, #1
 8003a9e:	0692      	lsls	r2, r2, #26
 8003aa0:	d42e      	bmi.n	8003b00 <_printf_common+0xc0>
 8003aa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003aa6:	4639      	mov	r1, r7
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	47c0      	blx	r8
 8003aac:	3001      	adds	r0, #1
 8003aae:	d021      	beq.n	8003af4 <_printf_common+0xb4>
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	68e5      	ldr	r5, [r4, #12]
 8003ab4:	f8d9 2000 	ldr.w	r2, [r9]
 8003ab8:	f003 0306 	and.w	r3, r3, #6
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	bf08      	it	eq
 8003ac0:	1aad      	subeq	r5, r5, r2
 8003ac2:	68a3      	ldr	r3, [r4, #8]
 8003ac4:	6922      	ldr	r2, [r4, #16]
 8003ac6:	bf0c      	ite	eq
 8003ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003acc:	2500      	movne	r5, #0
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	bfc4      	itt	gt
 8003ad2:	1a9b      	subgt	r3, r3, r2
 8003ad4:	18ed      	addgt	r5, r5, r3
 8003ad6:	f04f 0900 	mov.w	r9, #0
 8003ada:	341a      	adds	r4, #26
 8003adc:	454d      	cmp	r5, r9
 8003ade:	d11b      	bne.n	8003b18 <_printf_common+0xd8>
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	4652      	mov	r2, sl
 8003aea:	4639      	mov	r1, r7
 8003aec:	4630      	mov	r0, r6
 8003aee:	47c0      	blx	r8
 8003af0:	3001      	adds	r0, #1
 8003af2:	d103      	bne.n	8003afc <_printf_common+0xbc>
 8003af4:	f04f 30ff 	mov.w	r0, #4294967295
 8003af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003afc:	3501      	adds	r5, #1
 8003afe:	e7c2      	b.n	8003a86 <_printf_common+0x46>
 8003b00:	18e1      	adds	r1, r4, r3
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	2030      	movs	r0, #48	; 0x30
 8003b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b0a:	4422      	add	r2, r4
 8003b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b14:	3302      	adds	r3, #2
 8003b16:	e7c4      	b.n	8003aa2 <_printf_common+0x62>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	4622      	mov	r2, r4
 8003b1c:	4639      	mov	r1, r7
 8003b1e:	4630      	mov	r0, r6
 8003b20:	47c0      	blx	r8
 8003b22:	3001      	adds	r0, #1
 8003b24:	d0e6      	beq.n	8003af4 <_printf_common+0xb4>
 8003b26:	f109 0901 	add.w	r9, r9, #1
 8003b2a:	e7d7      	b.n	8003adc <_printf_common+0x9c>

08003b2c <_printf_i>:
 8003b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b30:	4617      	mov	r7, r2
 8003b32:	7e0a      	ldrb	r2, [r1, #24]
 8003b34:	b085      	sub	sp, #20
 8003b36:	2a6e      	cmp	r2, #110	; 0x6e
 8003b38:	4698      	mov	r8, r3
 8003b3a:	4606      	mov	r6, r0
 8003b3c:	460c      	mov	r4, r1
 8003b3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b40:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003b44:	f000 80bc 	beq.w	8003cc0 <_printf_i+0x194>
 8003b48:	d81a      	bhi.n	8003b80 <_printf_i+0x54>
 8003b4a:	2a63      	cmp	r2, #99	; 0x63
 8003b4c:	d02e      	beq.n	8003bac <_printf_i+0x80>
 8003b4e:	d80a      	bhi.n	8003b66 <_printf_i+0x3a>
 8003b50:	2a00      	cmp	r2, #0
 8003b52:	f000 80c8 	beq.w	8003ce6 <_printf_i+0x1ba>
 8003b56:	2a58      	cmp	r2, #88	; 0x58
 8003b58:	f000 808a 	beq.w	8003c70 <_printf_i+0x144>
 8003b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b60:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003b64:	e02a      	b.n	8003bbc <_printf_i+0x90>
 8003b66:	2a64      	cmp	r2, #100	; 0x64
 8003b68:	d001      	beq.n	8003b6e <_printf_i+0x42>
 8003b6a:	2a69      	cmp	r2, #105	; 0x69
 8003b6c:	d1f6      	bne.n	8003b5c <_printf_i+0x30>
 8003b6e:	6821      	ldr	r1, [r4, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003b76:	d023      	beq.n	8003bc0 <_printf_i+0x94>
 8003b78:	1d11      	adds	r1, r2, #4
 8003b7a:	6019      	str	r1, [r3, #0]
 8003b7c:	6813      	ldr	r3, [r2, #0]
 8003b7e:	e027      	b.n	8003bd0 <_printf_i+0xa4>
 8003b80:	2a73      	cmp	r2, #115	; 0x73
 8003b82:	f000 80b4 	beq.w	8003cee <_printf_i+0x1c2>
 8003b86:	d808      	bhi.n	8003b9a <_printf_i+0x6e>
 8003b88:	2a6f      	cmp	r2, #111	; 0x6f
 8003b8a:	d02a      	beq.n	8003be2 <_printf_i+0xb6>
 8003b8c:	2a70      	cmp	r2, #112	; 0x70
 8003b8e:	d1e5      	bne.n	8003b5c <_printf_i+0x30>
 8003b90:	680a      	ldr	r2, [r1, #0]
 8003b92:	f042 0220 	orr.w	r2, r2, #32
 8003b96:	600a      	str	r2, [r1, #0]
 8003b98:	e003      	b.n	8003ba2 <_printf_i+0x76>
 8003b9a:	2a75      	cmp	r2, #117	; 0x75
 8003b9c:	d021      	beq.n	8003be2 <_printf_i+0xb6>
 8003b9e:	2a78      	cmp	r2, #120	; 0x78
 8003ba0:	d1dc      	bne.n	8003b5c <_printf_i+0x30>
 8003ba2:	2278      	movs	r2, #120	; 0x78
 8003ba4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003ba8:	496e      	ldr	r1, [pc, #440]	; (8003d64 <_printf_i+0x238>)
 8003baa:	e064      	b.n	8003c76 <_printf_i+0x14a>
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003bb2:	1d11      	adds	r1, r2, #4
 8003bb4:	6019      	str	r1, [r3, #0]
 8003bb6:	6813      	ldr	r3, [r2, #0]
 8003bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0a3      	b.n	8003d08 <_printf_i+0x1dc>
 8003bc0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003bc4:	f102 0104 	add.w	r1, r2, #4
 8003bc8:	6019      	str	r1, [r3, #0]
 8003bca:	d0d7      	beq.n	8003b7c <_printf_i+0x50>
 8003bcc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	da03      	bge.n	8003bdc <_printf_i+0xb0>
 8003bd4:	222d      	movs	r2, #45	; 0x2d
 8003bd6:	425b      	negs	r3, r3
 8003bd8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003bdc:	4962      	ldr	r1, [pc, #392]	; (8003d68 <_printf_i+0x23c>)
 8003bde:	220a      	movs	r2, #10
 8003be0:	e017      	b.n	8003c12 <_printf_i+0xe6>
 8003be2:	6820      	ldr	r0, [r4, #0]
 8003be4:	6819      	ldr	r1, [r3, #0]
 8003be6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003bea:	d003      	beq.n	8003bf4 <_printf_i+0xc8>
 8003bec:	1d08      	adds	r0, r1, #4
 8003bee:	6018      	str	r0, [r3, #0]
 8003bf0:	680b      	ldr	r3, [r1, #0]
 8003bf2:	e006      	b.n	8003c02 <_printf_i+0xd6>
 8003bf4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003bf8:	f101 0004 	add.w	r0, r1, #4
 8003bfc:	6018      	str	r0, [r3, #0]
 8003bfe:	d0f7      	beq.n	8003bf0 <_printf_i+0xc4>
 8003c00:	880b      	ldrh	r3, [r1, #0]
 8003c02:	4959      	ldr	r1, [pc, #356]	; (8003d68 <_printf_i+0x23c>)
 8003c04:	2a6f      	cmp	r2, #111	; 0x6f
 8003c06:	bf14      	ite	ne
 8003c08:	220a      	movne	r2, #10
 8003c0a:	2208      	moveq	r2, #8
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003c12:	6865      	ldr	r5, [r4, #4]
 8003c14:	60a5      	str	r5, [r4, #8]
 8003c16:	2d00      	cmp	r5, #0
 8003c18:	f2c0 809c 	blt.w	8003d54 <_printf_i+0x228>
 8003c1c:	6820      	ldr	r0, [r4, #0]
 8003c1e:	f020 0004 	bic.w	r0, r0, #4
 8003c22:	6020      	str	r0, [r4, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d13f      	bne.n	8003ca8 <_printf_i+0x17c>
 8003c28:	2d00      	cmp	r5, #0
 8003c2a:	f040 8095 	bne.w	8003d58 <_printf_i+0x22c>
 8003c2e:	4675      	mov	r5, lr
 8003c30:	2a08      	cmp	r2, #8
 8003c32:	d10b      	bne.n	8003c4c <_printf_i+0x120>
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	07da      	lsls	r2, r3, #31
 8003c38:	d508      	bpl.n	8003c4c <_printf_i+0x120>
 8003c3a:	6923      	ldr	r3, [r4, #16]
 8003c3c:	6862      	ldr	r2, [r4, #4]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	bfde      	ittt	le
 8003c42:	2330      	movle	r3, #48	; 0x30
 8003c44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c4c:	ebae 0305 	sub.w	r3, lr, r5
 8003c50:	6123      	str	r3, [r4, #16]
 8003c52:	f8cd 8000 	str.w	r8, [sp]
 8003c56:	463b      	mov	r3, r7
 8003c58:	aa03      	add	r2, sp, #12
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	f7ff feef 	bl	8003a40 <_printf_common>
 8003c62:	3001      	adds	r0, #1
 8003c64:	d155      	bne.n	8003d12 <_printf_i+0x1e6>
 8003c66:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6a:	b005      	add	sp, #20
 8003c6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c70:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003c74:	493c      	ldr	r1, [pc, #240]	; (8003d68 <_printf_i+0x23c>)
 8003c76:	6822      	ldr	r2, [r4, #0]
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003c7e:	f100 0504 	add.w	r5, r0, #4
 8003c82:	601d      	str	r5, [r3, #0]
 8003c84:	d001      	beq.n	8003c8a <_printf_i+0x15e>
 8003c86:	6803      	ldr	r3, [r0, #0]
 8003c88:	e002      	b.n	8003c90 <_printf_i+0x164>
 8003c8a:	0655      	lsls	r5, r2, #25
 8003c8c:	d5fb      	bpl.n	8003c86 <_printf_i+0x15a>
 8003c8e:	8803      	ldrh	r3, [r0, #0]
 8003c90:	07d0      	lsls	r0, r2, #31
 8003c92:	bf44      	itt	mi
 8003c94:	f042 0220 	orrmi.w	r2, r2, #32
 8003c98:	6022      	strmi	r2, [r4, #0]
 8003c9a:	b91b      	cbnz	r3, 8003ca4 <_printf_i+0x178>
 8003c9c:	6822      	ldr	r2, [r4, #0]
 8003c9e:	f022 0220 	bic.w	r2, r2, #32
 8003ca2:	6022      	str	r2, [r4, #0]
 8003ca4:	2210      	movs	r2, #16
 8003ca6:	e7b1      	b.n	8003c0c <_printf_i+0xe0>
 8003ca8:	4675      	mov	r5, lr
 8003caa:	fbb3 f0f2 	udiv	r0, r3, r2
 8003cae:	fb02 3310 	mls	r3, r2, r0, r3
 8003cb2:	5ccb      	ldrb	r3, [r1, r3]
 8003cb4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2800      	cmp	r0, #0
 8003cbc:	d1f5      	bne.n	8003caa <_printf_i+0x17e>
 8003cbe:	e7b7      	b.n	8003c30 <_printf_i+0x104>
 8003cc0:	6808      	ldr	r0, [r1, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	6949      	ldr	r1, [r1, #20]
 8003cc6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003cca:	d004      	beq.n	8003cd6 <_printf_i+0x1aa>
 8003ccc:	1d10      	adds	r0, r2, #4
 8003cce:	6018      	str	r0, [r3, #0]
 8003cd0:	6813      	ldr	r3, [r2, #0]
 8003cd2:	6019      	str	r1, [r3, #0]
 8003cd4:	e007      	b.n	8003ce6 <_printf_i+0x1ba>
 8003cd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cda:	f102 0004 	add.w	r0, r2, #4
 8003cde:	6018      	str	r0, [r3, #0]
 8003ce0:	6813      	ldr	r3, [r2, #0]
 8003ce2:	d0f6      	beq.n	8003cd2 <_printf_i+0x1a6>
 8003ce4:	8019      	strh	r1, [r3, #0]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	6123      	str	r3, [r4, #16]
 8003cea:	4675      	mov	r5, lr
 8003cec:	e7b1      	b.n	8003c52 <_printf_i+0x126>
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	1d11      	adds	r1, r2, #4
 8003cf2:	6019      	str	r1, [r3, #0]
 8003cf4:	6815      	ldr	r5, [r2, #0]
 8003cf6:	6862      	ldr	r2, [r4, #4]
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	f7fc fa70 	bl	80001e0 <memchr>
 8003d00:	b108      	cbz	r0, 8003d06 <_printf_i+0x1da>
 8003d02:	1b40      	subs	r0, r0, r5
 8003d04:	6060      	str	r0, [r4, #4]
 8003d06:	6863      	ldr	r3, [r4, #4]
 8003d08:	6123      	str	r3, [r4, #16]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d10:	e79f      	b.n	8003c52 <_printf_i+0x126>
 8003d12:	6923      	ldr	r3, [r4, #16]
 8003d14:	462a      	mov	r2, r5
 8003d16:	4639      	mov	r1, r7
 8003d18:	4630      	mov	r0, r6
 8003d1a:	47c0      	blx	r8
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	d0a2      	beq.n	8003c66 <_printf_i+0x13a>
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	079b      	lsls	r3, r3, #30
 8003d24:	d507      	bpl.n	8003d36 <_printf_i+0x20a>
 8003d26:	2500      	movs	r5, #0
 8003d28:	f104 0919 	add.w	r9, r4, #25
 8003d2c:	68e3      	ldr	r3, [r4, #12]
 8003d2e:	9a03      	ldr	r2, [sp, #12]
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	429d      	cmp	r5, r3
 8003d34:	db05      	blt.n	8003d42 <_printf_i+0x216>
 8003d36:	68e0      	ldr	r0, [r4, #12]
 8003d38:	9b03      	ldr	r3, [sp, #12]
 8003d3a:	4298      	cmp	r0, r3
 8003d3c:	bfb8      	it	lt
 8003d3e:	4618      	movlt	r0, r3
 8003d40:	e793      	b.n	8003c6a <_printf_i+0x13e>
 8003d42:	2301      	movs	r3, #1
 8003d44:	464a      	mov	r2, r9
 8003d46:	4639      	mov	r1, r7
 8003d48:	4630      	mov	r0, r6
 8003d4a:	47c0      	blx	r8
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d08a      	beq.n	8003c66 <_printf_i+0x13a>
 8003d50:	3501      	adds	r5, #1
 8003d52:	e7eb      	b.n	8003d2c <_printf_i+0x200>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1a7      	bne.n	8003ca8 <_printf_i+0x17c>
 8003d58:	780b      	ldrb	r3, [r1, #0]
 8003d5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d62:	e765      	b.n	8003c30 <_printf_i+0x104>
 8003d64:	08004192 	.word	0x08004192
 8003d68:	08004181 	.word	0x08004181

08003d6c <_sbrk_r>:
 8003d6c:	b538      	push	{r3, r4, r5, lr}
 8003d6e:	4c06      	ldr	r4, [pc, #24]	; (8003d88 <_sbrk_r+0x1c>)
 8003d70:	2300      	movs	r3, #0
 8003d72:	4605      	mov	r5, r0
 8003d74:	4608      	mov	r0, r1
 8003d76:	6023      	str	r3, [r4, #0]
 8003d78:	f000 f8b6 	bl	8003ee8 <_sbrk>
 8003d7c:	1c43      	adds	r3, r0, #1
 8003d7e:	d102      	bne.n	8003d86 <_sbrk_r+0x1a>
 8003d80:	6823      	ldr	r3, [r4, #0]
 8003d82:	b103      	cbz	r3, 8003d86 <_sbrk_r+0x1a>
 8003d84:	602b      	str	r3, [r5, #0]
 8003d86:	bd38      	pop	{r3, r4, r5, pc}
 8003d88:	2000021c 	.word	0x2000021c

08003d8c <__sread>:
 8003d8c:	b510      	push	{r4, lr}
 8003d8e:	460c      	mov	r4, r1
 8003d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d94:	f000 f896 	bl	8003ec4 <_read_r>
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	bfab      	itete	ge
 8003d9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d9e:	89a3      	ldrhlt	r3, [r4, #12]
 8003da0:	181b      	addge	r3, r3, r0
 8003da2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003da6:	bfac      	ite	ge
 8003da8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003daa:	81a3      	strhlt	r3, [r4, #12]
 8003dac:	bd10      	pop	{r4, pc}

08003dae <__swrite>:
 8003dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003db2:	461f      	mov	r7, r3
 8003db4:	898b      	ldrh	r3, [r1, #12]
 8003db6:	05db      	lsls	r3, r3, #23
 8003db8:	4605      	mov	r5, r0
 8003dba:	460c      	mov	r4, r1
 8003dbc:	4616      	mov	r6, r2
 8003dbe:	d505      	bpl.n	8003dcc <__swrite+0x1e>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dc8:	f000 f868 	bl	8003e9c <_lseek_r>
 8003dcc:	89a3      	ldrh	r3, [r4, #12]
 8003dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dd6:	81a3      	strh	r3, [r4, #12]
 8003dd8:	4632      	mov	r2, r6
 8003dda:	463b      	mov	r3, r7
 8003ddc:	4628      	mov	r0, r5
 8003dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003de2:	f000 b817 	b.w	8003e14 <_write_r>

08003de6 <__sseek>:
 8003de6:	b510      	push	{r4, lr}
 8003de8:	460c      	mov	r4, r1
 8003dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dee:	f000 f855 	bl	8003e9c <_lseek_r>
 8003df2:	1c43      	adds	r3, r0, #1
 8003df4:	89a3      	ldrh	r3, [r4, #12]
 8003df6:	bf15      	itete	ne
 8003df8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003dfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003dfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e02:	81a3      	strheq	r3, [r4, #12]
 8003e04:	bf18      	it	ne
 8003e06:	81a3      	strhne	r3, [r4, #12]
 8003e08:	bd10      	pop	{r4, pc}

08003e0a <__sclose>:
 8003e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e0e:	f000 b813 	b.w	8003e38 <_close_r>
	...

08003e14 <_write_r>:
 8003e14:	b538      	push	{r3, r4, r5, lr}
 8003e16:	4c07      	ldr	r4, [pc, #28]	; (8003e34 <_write_r+0x20>)
 8003e18:	4605      	mov	r5, r0
 8003e1a:	4608      	mov	r0, r1
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	2200      	movs	r2, #0
 8003e20:	6022      	str	r2, [r4, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	f7ff f86c 	bl	8002f00 <_write>
 8003e28:	1c43      	adds	r3, r0, #1
 8003e2a:	d102      	bne.n	8003e32 <_write_r+0x1e>
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	b103      	cbz	r3, 8003e32 <_write_r+0x1e>
 8003e30:	602b      	str	r3, [r5, #0]
 8003e32:	bd38      	pop	{r3, r4, r5, pc}
 8003e34:	2000021c 	.word	0x2000021c

08003e38 <_close_r>:
 8003e38:	b538      	push	{r3, r4, r5, lr}
 8003e3a:	4c06      	ldr	r4, [pc, #24]	; (8003e54 <_close_r+0x1c>)
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	4605      	mov	r5, r0
 8003e40:	4608      	mov	r0, r1
 8003e42:	6023      	str	r3, [r4, #0]
 8003e44:	f7ff f86e 	bl	8002f24 <_close>
 8003e48:	1c43      	adds	r3, r0, #1
 8003e4a:	d102      	bne.n	8003e52 <_close_r+0x1a>
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	b103      	cbz	r3, 8003e52 <_close_r+0x1a>
 8003e50:	602b      	str	r3, [r5, #0]
 8003e52:	bd38      	pop	{r3, r4, r5, pc}
 8003e54:	2000021c 	.word	0x2000021c

08003e58 <_fstat_r>:
 8003e58:	b538      	push	{r3, r4, r5, lr}
 8003e5a:	4c07      	ldr	r4, [pc, #28]	; (8003e78 <_fstat_r+0x20>)
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	4605      	mov	r5, r0
 8003e60:	4608      	mov	r0, r1
 8003e62:	4611      	mov	r1, r2
 8003e64:	6023      	str	r3, [r4, #0]
 8003e66:	f7ff f860 	bl	8002f2a <_fstat>
 8003e6a:	1c43      	adds	r3, r0, #1
 8003e6c:	d102      	bne.n	8003e74 <_fstat_r+0x1c>
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	b103      	cbz	r3, 8003e74 <_fstat_r+0x1c>
 8003e72:	602b      	str	r3, [r5, #0]
 8003e74:	bd38      	pop	{r3, r4, r5, pc}
 8003e76:	bf00      	nop
 8003e78:	2000021c 	.word	0x2000021c

08003e7c <_isatty_r>:
 8003e7c:	b538      	push	{r3, r4, r5, lr}
 8003e7e:	4c06      	ldr	r4, [pc, #24]	; (8003e98 <_isatty_r+0x1c>)
 8003e80:	2300      	movs	r3, #0
 8003e82:	4605      	mov	r5, r0
 8003e84:	4608      	mov	r0, r1
 8003e86:	6023      	str	r3, [r4, #0]
 8003e88:	f7ff f854 	bl	8002f34 <_isatty>
 8003e8c:	1c43      	adds	r3, r0, #1
 8003e8e:	d102      	bne.n	8003e96 <_isatty_r+0x1a>
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	b103      	cbz	r3, 8003e96 <_isatty_r+0x1a>
 8003e94:	602b      	str	r3, [r5, #0]
 8003e96:	bd38      	pop	{r3, r4, r5, pc}
 8003e98:	2000021c 	.word	0x2000021c

08003e9c <_lseek_r>:
 8003e9c:	b538      	push	{r3, r4, r5, lr}
 8003e9e:	4c07      	ldr	r4, [pc, #28]	; (8003ebc <_lseek_r+0x20>)
 8003ea0:	4605      	mov	r5, r0
 8003ea2:	4608      	mov	r0, r1
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	6022      	str	r2, [r4, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f7ff f844 	bl	8002f38 <_lseek>
 8003eb0:	1c43      	adds	r3, r0, #1
 8003eb2:	d102      	bne.n	8003eba <_lseek_r+0x1e>
 8003eb4:	6823      	ldr	r3, [r4, #0]
 8003eb6:	b103      	cbz	r3, 8003eba <_lseek_r+0x1e>
 8003eb8:	602b      	str	r3, [r5, #0]
 8003eba:	bd38      	pop	{r3, r4, r5, pc}
 8003ebc:	2000021c 	.word	0x2000021c

08003ec0 <__malloc_lock>:
 8003ec0:	4770      	bx	lr

08003ec2 <__malloc_unlock>:
 8003ec2:	4770      	bx	lr

08003ec4 <_read_r>:
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	4c07      	ldr	r4, [pc, #28]	; (8003ee4 <_read_r+0x20>)
 8003ec8:	4605      	mov	r5, r0
 8003eca:	4608      	mov	r0, r1
 8003ecc:	4611      	mov	r1, r2
 8003ece:	2200      	movs	r2, #0
 8003ed0:	6022      	str	r2, [r4, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f7ff f804 	bl	8002ee0 <_read>
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	d102      	bne.n	8003ee2 <_read_r+0x1e>
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	b103      	cbz	r3, 8003ee2 <_read_r+0x1e>
 8003ee0:	602b      	str	r3, [r5, #0]
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	2000021c 	.word	0x2000021c

08003ee8 <_sbrk>:
 8003ee8:	4b04      	ldr	r3, [pc, #16]	; (8003efc <_sbrk+0x14>)
 8003eea:	6819      	ldr	r1, [r3, #0]
 8003eec:	4602      	mov	r2, r0
 8003eee:	b909      	cbnz	r1, 8003ef4 <_sbrk+0xc>
 8003ef0:	4903      	ldr	r1, [pc, #12]	; (8003f00 <_sbrk+0x18>)
 8003ef2:	6019      	str	r1, [r3, #0]
 8003ef4:	6818      	ldr	r0, [r3, #0]
 8003ef6:	4402      	add	r2, r0
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	4770      	bx	lr
 8003efc:	2000008c 	.word	0x2000008c
 8003f00:	20000220 	.word	0x20000220

08003f04 <_init>:
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	bf00      	nop
 8003f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0a:	bc08      	pop	{r3}
 8003f0c:	469e      	mov	lr, r3
 8003f0e:	4770      	bx	lr

08003f10 <_fini>:
 8003f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f12:	bf00      	nop
 8003f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f16:	bc08      	pop	{r3}
 8003f18:	469e      	mov	lr, r3
 8003f1a:	4770      	bx	lr
